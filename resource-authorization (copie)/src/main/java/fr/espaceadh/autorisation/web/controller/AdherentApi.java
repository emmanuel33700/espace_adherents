/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package fr.espaceadh.autorisation.web.controller;


import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import fr.espaceadh.autorisation.dto.Adherent;
import org.springframework.security.access.prepost.PreAuthorize;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-20T15:15:37.676Z[GMT]")
@Api(value = "adherent", description = "the adherent API")
public interface AdherentApi {

    @ApiOperation(value = "Ajouter un adhérent", nickname = "ajoutAdherent", notes = "")
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/adherent",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> ajoutAdherent(@ApiParam(value = "Besoin de l'objet adhérent pour ajouter un adhérent" ,required=true )  @Valid @RequestBody Adherent body);


    @ApiOperation(value = "Supression de l'adherent par id", nickname = "deleteUser", notes = "")
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "ID adherent invalide"),
        @ApiResponse(code = 404, message = "adherent non trouvé") })
    @RequestMapping(value = "/adherent/{idAdh}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "Id de l'adhérent à récupérer",required=true) @PathVariable("idAdh") Integer idAdh);


    @ApiOperation(value = "rechercher adherent par id", nickname = "getAdherent", notes = "", response = Adherent.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operation réussie", response = Adherent.class),
        @ApiResponse(code = 400, message = "ID adherent invalide"),
        @ApiResponse(code = 404, message = "adherent non trouvé") })
    @RequestMapping(value = "/adherent/{idAdh}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    @PreAuthorize("#oauth2.hasScope('bar') and #oauth2.hasScope('read')")
    ResponseEntity<Adherent> getAdherent(@ApiParam(value = "Id de l'adhérent à récupérer",required=true) @PathVariable("idAdh") Integer idAdh);


    @ApiOperation(value = "Mise à jour de l'adherent", nickname = "updateUser", notes = "This can only be done by the logged in user.", tags={ "adherent", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid user supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/adherent",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@ApiParam(value = "Updated user object" ,required=true )  @Valid @RequestBody Adherent body,@ApiParam(value = "name that need to be updated",required=true) @PathVariable("username") String username);

}
