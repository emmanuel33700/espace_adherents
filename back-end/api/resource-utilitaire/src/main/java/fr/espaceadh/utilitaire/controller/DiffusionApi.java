/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package fr.espaceadh.utilitaire.controller;

import fr.espaceadh.utilitaire.model.*;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-08-15T13:08:44.732Z[GMT]")
@Validated
public interface DiffusionApi {

    @Operation(summary = "Attacher un  fichier a un mail a envoyer", description = "", security = {
            @SecurityRequirement(name = "oAuth", scopes = {
                    "ress-adherent-admin"        })    }, tags={ "Liste de diffusion" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Operation réussie"),

            @ApiResponse(responseCode = "401", description = "utilisateur non authentifié"),

            @ApiResponse(responseCode = "403", description = "Droit insufisant"),

            @ApiResponse(responseCode = "405", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))),

            @ApiResponse(responseCode = "500", description = "Erreur serveur", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/diffusion/mail/{idMail}/fichier",
            produces = { "application/json" },
            consumes = { "multipart/form-data" },
            method = RequestMethod.POST)
    @PreAuthorize("isDansGroupe('RES_ATELIER')")
    ResponseEntity<Void> addBinaryToMail(@Parameter(in = ParameterIn.PATH, description = "id du mail à envoyer", required=true, schema=@Schema()) @PathVariable("idMail") Long idMail, @Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile file, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestParam(value="fileName", required=false)  String fileName);

    @Operation(summary = "Ajouter une liste de diffusion", description = "", security = {
        @SecurityRequirement(name = "oAuth", scopes = {
            "ress-adherent-admin"        })    }, tags={ "Liste de diffusion" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Operation réussie"),
        
        @ApiResponse(responseCode = "401", description = "utilisateur non authentifié"),
        
        @ApiResponse(responseCode = "403", description = "Droit insufisant"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Erreur serveur", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/diffusion/liste/{idListe}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    @PreAuthorize("isDansGroupe('RES_ATELIER')")
    ResponseEntity<Void> addListe(@Parameter(in = ParameterIn.PATH, description = "id de la liste de diffusion", required=true, schema=@Schema()) @PathVariable("idListe") Long idListe, @Parameter(in = ParameterIn.DEFAULT, description = "Objet listeDiffusion", required=true, schema=@Schema()) @Valid @RequestBody ListeDiffusion body);


    @Operation(summary = "Supprimer une liste de diffusion", description = "", security = {
        @SecurityRequirement(name = "oAuth", scopes = {
            "ress-adherent-admin"        })    }, tags={ "Liste de diffusion" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operation réussie"),
        
        @ApiResponse(responseCode = "401", description = "utilisateur non authentifié"),
        
        @ApiResponse(responseCode = "403", description = "Droit insufisant"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Erreur serveur", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/diffusion/liste/{idListe}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    @PreAuthorize("isDansGroupe('RES_ATELIER')")
    ResponseEntity<Void> delListe(@Parameter(in = ParameterIn.PATH, description = "id du fichier", required=true, schema=@Schema()) @PathVariable("idListe") Long idListe);



    @Operation(summary = "Recupérer les adhérents inscrits à une liste de diffusion", description = "", security = {
            @SecurityRequirement(name = "oAuth", scopes = {
                    "ress-adherent-admin"        })    }, tags={ "Liste de diffusion" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Operation réussie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListInscritsMailingListe.class))),

            @ApiResponse(responseCode = "401", description = "utilisateur non authentifié"),

            @ApiResponse(responseCode = "403", description = "Droit insufisant"),

            @ApiResponse(responseCode = "405", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))),

            @ApiResponse(responseCode = "500", description = "Erreur serveur", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/diffusion/liste/{idListe}/inscrits",
            produces = { "application/json" },
            method = RequestMethod.GET)
    @PreAuthorize("isDansGroupe('RES_ATELIER')")
    ResponseEntity<ListInscritsMailingListe> getAdherentsInscritListe(@Parameter(in = ParameterIn.PATH, description = "id du fichier", required=true, schema=@Schema()) @PathVariable("idListe") Long idListe);

    @Operation(summary = "Recupérer la liste des listes de diffusion", description = "", security = {
        @SecurityRequirement(name = "oAuth", scopes = {
            "ress-adherent-admin"        })    }, tags={ "Liste de diffusion" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operation réussie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListeListeDiffusion.class))),
        
        @ApiResponse(responseCode = "401", description = "utilisateur non authentifié"),
        
        @ApiResponse(responseCode = "403", description = "Droit insufisant"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Erreur serveur", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/diffusion/listes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    @PreAuthorize("isDansGroupe('ADHERENT')")
    ResponseEntity<ListeListeDiffusion> getListes();


    @Operation(summary = "Mise d'une liste de diffusion", description = "", security = {
        @SecurityRequirement(name = "oAuth", scopes = {
            "ress-adherent-admin"        })    }, tags={ "Liste de diffusion" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operation réussie"),
        
        @ApiResponse(responseCode = "401", description = "utilisateur non authentifié"),
        
        @ApiResponse(responseCode = "403", description = "Droit insufisant"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Erreur serveur", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/diffusion/liste/{idListe}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    @PreAuthorize("isDansGroupe('RES_ATELIER')")
    ResponseEntity<Void> majListe(@Parameter(in = ParameterIn.PATH, description = "id du fichier", required=true, schema=@Schema()) @PathVariable("idListe") Long idListe, @Parameter(in = ParameterIn.DEFAULT, description = "Objet listeDiffusion", required=true, schema=@Schema()) @Valid @RequestBody ListeDiffusion body);


    @Operation(summary = "Envoyer un email", description = "", security = {
            @SecurityRequirement(name = "oAuth", scopes = {
                    "ress-adherent-admin"        })    }, tags={ "Liste de diffusion" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Operation réussie"),

            @ApiResponse(responseCode = "401", description = "utilisateur non authentifié"),

            @ApiResponse(responseCode = "403", description = "Droit insufisant"),

            @ApiResponse(responseCode = "405", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))),

            @ApiResponse(responseCode = "500", description = "Erreur serveur", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/diffusion/mail/{idMail}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    @PreAuthorize("isDansGroupe('RES_ATELIER')")
    ResponseEntity<Void> sendMail(@Parameter(in = ParameterIn.PATH, description = "id du mail à envoyer", required=true, schema=@Schema()) @PathVariable("idMail") Long idMail, @Parameter(in = ParameterIn.DEFAULT, description = "Objet listeDiffusion", schema=@Schema()) @Valid @RequestBody MailAEnvoyer body);
}
