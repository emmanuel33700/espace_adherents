import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { YAxisTicksComponent } from './y-axis-ticks.component';
import * as ɵngcc0 from '@angular/core';
export declare class YAxisComponent implements OnChanges {
    yScale: any;
    dims: any;
    trimTicks: boolean;
    maxTickLength: number;
    tickFormatting: any;
    ticks: any[];
    showGridLines: boolean;
    showLabel: any;
    labelText: any;
    yAxisTickInterval: any;
    yAxisTickCount: any;
    yOrient: string;
    referenceLines: any;
    showRefLines: any;
    showRefLabels: any;
    yAxisOffset: number;
    dimensionsChanged: EventEmitter<any>;
    yAxisClassName: string;
    tickArguments: any;
    offset: any;
    transform: any;
    labelOffset: number;
    fill: string;
    stroke: string;
    tickStroke: string;
    strokeWidth: number;
    padding: number;
    ticksComponent: YAxisTicksComponent;
    ngOnChanges(changes: SimpleChanges): void;
    update(): void;
    emitTicksWidth({ width }: {
        width: any;
    }): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<YAxisComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<YAxisComponent, "g[ngx-charts-y-axis]", never, { "showGridLines": "showGridLines"; "yOrient": "yOrient"; "yAxisOffset": "yAxisOffset"; "yScale": "yScale"; "dims": "dims"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "tickFormatting": "tickFormatting"; "ticks": "ticks"; "showLabel": "showLabel"; "labelText": "labelText"; "yAxisTickInterval": "yAxisTickInterval"; "yAxisTickCount": "yAxisTickCount"; "referenceLines": "referenceLines"; "showRefLines": "showRefLines"; "showRefLabels": "showRefLabels"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieS1heGlzLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ5LWF4aXMuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgWUF4aXNUaWNrc0NvbXBvbmVudCB9IGZyb20gJy4veS1heGlzLXRpY2tzLmNvbXBvbmVudCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBZQXhpc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgeVNjYWxlOiBhbnk7XG4gICAgZGltczogYW55O1xuICAgIHRyaW1UaWNrczogYm9vbGVhbjtcbiAgICBtYXhUaWNrTGVuZ3RoOiBudW1iZXI7XG4gICAgdGlja0Zvcm1hdHRpbmc6IGFueTtcbiAgICB0aWNrczogYW55W107XG4gICAgc2hvd0dyaWRMaW5lczogYm9vbGVhbjtcbiAgICBzaG93TGFiZWw6IGFueTtcbiAgICBsYWJlbFRleHQ6IGFueTtcbiAgICB5QXhpc1RpY2tJbnRlcnZhbDogYW55O1xuICAgIHlBeGlzVGlja0NvdW50OiBhbnk7XG4gICAgeU9yaWVudDogc3RyaW5nO1xuICAgIHJlZmVyZW5jZUxpbmVzOiBhbnk7XG4gICAgc2hvd1JlZkxpbmVzOiBhbnk7XG4gICAgc2hvd1JlZkxhYmVsczogYW55O1xuICAgIHlBeGlzT2Zmc2V0OiBudW1iZXI7XG4gICAgZGltZW5zaW9uc0NoYW5nZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHlBeGlzQ2xhc3NOYW1lOiBzdHJpbmc7XG4gICAgdGlja0FyZ3VtZW50czogYW55O1xuICAgIG9mZnNldDogYW55O1xuICAgIHRyYW5zZm9ybTogYW55O1xuICAgIGxhYmVsT2Zmc2V0OiBudW1iZXI7XG4gICAgZmlsbDogc3RyaW5nO1xuICAgIHN0cm9rZTogc3RyaW5nO1xuICAgIHRpY2tTdHJva2U6IHN0cmluZztcbiAgICBzdHJva2VXaWR0aDogbnVtYmVyO1xuICAgIHBhZGRpbmc6IG51bWJlcjtcbiAgICB0aWNrc0NvbXBvbmVudDogWUF4aXNUaWNrc0NvbXBvbmVudDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICB1cGRhdGUoKTogdm9pZDtcbiAgICBlbWl0VGlja3NXaWR0aCh7IHdpZHRoIH06IHtcbiAgICAgICAgd2lkdGg6IGFueTtcbiAgICB9KTogdm9pZDtcbn1cbiJdfQ==