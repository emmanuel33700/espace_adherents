import { ElementRef, AfterViewInit } from '@angular/core';
import { BaseChartComponent } from '../common/base-chart.component';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import * as ɵngcc0 from '@angular/core';
export declare class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {
    min: number;
    max: number;
    value: number;
    units: string;
    previousValue: any;
    valueFormatting: any;
    valueTextEl: ElementRef;
    unitsTextEl: ElementRef;
    dims: ViewDimensions;
    valueDomain: any;
    valueScale: any;
    colors: ColorHelper;
    transform: string;
    margin: any[];
    transformLine: string;
    valueResizeScale: number;
    unitsResizeScale: number;
    valueTextTransform: string;
    valueTranslate: string;
    unitsTextTransform: string;
    unitsTranslate: string;
    displayValue: string;
    hasPreviousValue: boolean;
    ngAfterViewInit(): void;
    update(): void;
    getValueDomain(): any[];
    getValueScale(): any;
    getDisplayValue(): string;
    scaleText(element: any, repeat?: boolean): void;
    onClick(): void;
    setColors(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LinearGaugeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LinearGaugeComponent, "ngx-charts-linear-gauge", never, { "min": "min"; "max": "max"; "value": "value"; "units": "units"; "previousValue": "previousValue"; "valueFormatting": "valueFormatting"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZWFyLWdhdWdlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJsaW5lYXItZ2F1Z2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vYmFzZS1jaGFydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgVmlld0RpbWVuc2lvbnMgfSBmcm9tICcuLi9jb21tb24vdmlldy1kaW1lbnNpb25zLmhlbHBlcic7XG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL2NvbW1vbi9jb2xvci5oZWxwZXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTGluZWFyR2F1Z2VDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ2hhcnRDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICBtaW46IG51bWJlcjtcbiAgICBtYXg6IG51bWJlcjtcbiAgICB2YWx1ZTogbnVtYmVyO1xuICAgIHVuaXRzOiBzdHJpbmc7XG4gICAgcHJldmlvdXNWYWx1ZTogYW55O1xuICAgIHZhbHVlRm9ybWF0dGluZzogYW55O1xuICAgIHZhbHVlVGV4dEVsOiBFbGVtZW50UmVmO1xuICAgIHVuaXRzVGV4dEVsOiBFbGVtZW50UmVmO1xuICAgIGRpbXM6IFZpZXdEaW1lbnNpb25zO1xuICAgIHZhbHVlRG9tYWluOiBhbnk7XG4gICAgdmFsdWVTY2FsZTogYW55O1xuICAgIGNvbG9yczogQ29sb3JIZWxwZXI7XG4gICAgdHJhbnNmb3JtOiBzdHJpbmc7XG4gICAgbWFyZ2luOiBhbnlbXTtcbiAgICB0cmFuc2Zvcm1MaW5lOiBzdHJpbmc7XG4gICAgdmFsdWVSZXNpemVTY2FsZTogbnVtYmVyO1xuICAgIHVuaXRzUmVzaXplU2NhbGU6IG51bWJlcjtcbiAgICB2YWx1ZVRleHRUcmFuc2Zvcm06IHN0cmluZztcbiAgICB2YWx1ZVRyYW5zbGF0ZTogc3RyaW5nO1xuICAgIHVuaXRzVGV4dFRyYW5zZm9ybTogc3RyaW5nO1xuICAgIHVuaXRzVHJhbnNsYXRlOiBzdHJpbmc7XG4gICAgZGlzcGxheVZhbHVlOiBzdHJpbmc7XG4gICAgaGFzUHJldmlvdXNWYWx1ZTogYm9vbGVhbjtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICB1cGRhdGUoKTogdm9pZDtcbiAgICBnZXRWYWx1ZURvbWFpbigpOiBhbnlbXTtcbiAgICBnZXRWYWx1ZVNjYWxlKCk6IGFueTtcbiAgICBnZXREaXNwbGF5VmFsdWUoKTogc3RyaW5nO1xuICAgIHNjYWxlVGV4dChlbGVtZW50OiBhbnksIHJlcGVhdD86IGJvb2xlYW4pOiB2b2lkO1xuICAgIG9uQ2xpY2soKTogdm9pZDtcbiAgICBzZXRDb2xvcnMoKTogdm9pZDtcbn1cbiJdfQ==