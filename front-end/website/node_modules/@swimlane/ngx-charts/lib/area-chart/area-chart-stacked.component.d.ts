import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class AreaChartStackedComponent extends BaseChartComponent {
    legend: boolean;
    legendTitle: string;
    legendPosition: string;
    xAxis: any;
    yAxis: any;
    showXAxisLabel: any;
    showYAxisLabel: any;
    xAxisLabel: any;
    yAxisLabel: any;
    timeline: any;
    gradient: any;
    showGridLines: boolean;
    curve: any;
    activeEntries: any[];
    schemeType: string;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    roundDomains: boolean;
    tooltipDisabled: boolean;
    xScaleMin: any;
    xScaleMax: any;
    yScaleMin: number;
    yScaleMax: number;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    seriesTooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    scaleType: string;
    xDomain: any[];
    xSet: any[];
    yDomain: any[];
    seriesDomain: any;
    xScale: any;
    yScale: any;
    transform: string;
    clipPathId: string;
    clipPath: string;
    colors: ColorHelper;
    margin: number[];
    hoveredVertical: any;
    xAxisHeight: number;
    yAxisWidth: number;
    filteredDomain: any;
    legendOptions: any;
    timelineWidth: any;
    timelineHeight: number;
    timelineXScale: any;
    timelineYScale: any;
    timelineXDomain: any;
    timelineTransform: any;
    timelinePadding: number;
    update(): void;
    updateTimeline(): void;
    getXDomain(): any[];
    getYDomain(): any[];
    getSeriesDomain(): any[];
    getXScale(domain: any, width: any): any;
    getYScale(domain: any, height: any): any;
    updateDomain(domain: any): void;
    updateHoveredVertical(item: any): void;
    hideCircles(): void;
    onClick(data: any, series?: any): void;
    trackBy(index: any, item: any): string;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: any;
        domain: any[];
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(item: any): void;
    onDeactivate(item: any): void;
    deactivateAll(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AreaChartStackedComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AreaChartStackedComponent, "ngx-charts-area-chart-stacked", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "showGridLines": "showGridLines"; "curve": "curve"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "timeline": "timeline"; "gradient": "gradient"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "xScaleMin": "xScaleMin"; "xScaleMax": "xScaleMax"; "yScaleMin": "yScaleMin"; "yScaleMax": "yScaleMax"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate", "seriesTooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJlYS1jaGFydC1zdGFja2VkLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhcmVhLWNoYXJ0LXN0YWNrZWQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5RkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWaWV3RGltZW5zaW9ucyB9IGZyb20gJy4uL2NvbW1vbi92aWV3LWRpbWVuc2lvbnMuaGVscGVyJztcbmltcG9ydCB7IENvbG9ySGVscGVyIH0gZnJvbSAnLi4vY29tbW9uL2NvbG9yLmhlbHBlcic7XG5pbXBvcnQgeyBCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vYmFzZS1jaGFydC5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXJlYUNoYXJ0U3RhY2tlZENvbXBvbmVudCBleHRlbmRzIEJhc2VDaGFydENvbXBvbmVudCB7XG4gICAgbGVnZW5kOiBib29sZWFuO1xuICAgIGxlZ2VuZFRpdGxlOiBzdHJpbmc7XG4gICAgbGVnZW5kUG9zaXRpb246IHN0cmluZztcbiAgICB4QXhpczogYW55O1xuICAgIHlBeGlzOiBhbnk7XG4gICAgc2hvd1hBeGlzTGFiZWw6IGFueTtcbiAgICBzaG93WUF4aXNMYWJlbDogYW55O1xuICAgIHhBeGlzTGFiZWw6IGFueTtcbiAgICB5QXhpc0xhYmVsOiBhbnk7XG4gICAgdGltZWxpbmU6IGFueTtcbiAgICBncmFkaWVudDogYW55O1xuICAgIHNob3dHcmlkTGluZXM6IGJvb2xlYW47XG4gICAgY3VydmU6IGFueTtcbiAgICBhY3RpdmVFbnRyaWVzOiBhbnlbXTtcbiAgICBzY2hlbWVUeXBlOiBzdHJpbmc7XG4gICAgdHJpbVhBeGlzVGlja3M6IGJvb2xlYW47XG4gICAgdHJpbVlBeGlzVGlja3M6IGJvb2xlYW47XG4gICAgcm90YXRlWEF4aXNUaWNrczogYm9vbGVhbjtcbiAgICBtYXhYQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcbiAgICBtYXhZQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcbiAgICB4QXhpc1RpY2tGb3JtYXR0aW5nOiBhbnk7XG4gICAgeUF4aXNUaWNrRm9ybWF0dGluZzogYW55O1xuICAgIHhBeGlzVGlja3M6IGFueVtdO1xuICAgIHlBeGlzVGlja3M6IGFueVtdO1xuICAgIHJvdW5kRG9tYWluczogYm9vbGVhbjtcbiAgICB0b29sdGlwRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgeFNjYWxlTWluOiBhbnk7XG4gICAgeFNjYWxlTWF4OiBhbnk7XG4gICAgeVNjYWxlTWluOiBudW1iZXI7XG4gICAgeVNjYWxlTWF4OiBudW1iZXI7XG4gICAgYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGRlYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRvb2x0aXBUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBzZXJpZXNUb29sdGlwVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgZGltczogVmlld0RpbWVuc2lvbnM7XG4gICAgc2NhbGVUeXBlOiBzdHJpbmc7XG4gICAgeERvbWFpbjogYW55W107XG4gICAgeFNldDogYW55W107XG4gICAgeURvbWFpbjogYW55W107XG4gICAgc2VyaWVzRG9tYWluOiBhbnk7XG4gICAgeFNjYWxlOiBhbnk7XG4gICAgeVNjYWxlOiBhbnk7XG4gICAgdHJhbnNmb3JtOiBzdHJpbmc7XG4gICAgY2xpcFBhdGhJZDogc3RyaW5nO1xuICAgIGNsaXBQYXRoOiBzdHJpbmc7XG4gICAgY29sb3JzOiBDb2xvckhlbHBlcjtcbiAgICBtYXJnaW46IG51bWJlcltdO1xuICAgIGhvdmVyZWRWZXJ0aWNhbDogYW55O1xuICAgIHhBeGlzSGVpZ2h0OiBudW1iZXI7XG4gICAgeUF4aXNXaWR0aDogbnVtYmVyO1xuICAgIGZpbHRlcmVkRG9tYWluOiBhbnk7XG4gICAgbGVnZW5kT3B0aW9uczogYW55O1xuICAgIHRpbWVsaW5lV2lkdGg6IGFueTtcbiAgICB0aW1lbGluZUhlaWdodDogbnVtYmVyO1xuICAgIHRpbWVsaW5lWFNjYWxlOiBhbnk7XG4gICAgdGltZWxpbmVZU2NhbGU6IGFueTtcbiAgICB0aW1lbGluZVhEb21haW46IGFueTtcbiAgICB0aW1lbGluZVRyYW5zZm9ybTogYW55O1xuICAgIHRpbWVsaW5lUGFkZGluZzogbnVtYmVyO1xuICAgIHVwZGF0ZSgpOiB2b2lkO1xuICAgIHVwZGF0ZVRpbWVsaW5lKCk6IHZvaWQ7XG4gICAgZ2V0WERvbWFpbigpOiBhbnlbXTtcbiAgICBnZXRZRG9tYWluKCk6IGFueVtdO1xuICAgIGdldFNlcmllc0RvbWFpbigpOiBhbnlbXTtcbiAgICBnZXRYU2NhbGUoZG9tYWluOiBhbnksIHdpZHRoOiBhbnkpOiBhbnk7XG4gICAgZ2V0WVNjYWxlKGRvbWFpbjogYW55LCBoZWlnaHQ6IGFueSk6IGFueTtcbiAgICB1cGRhdGVEb21haW4oZG9tYWluOiBhbnkpOiB2b2lkO1xuICAgIHVwZGF0ZUhvdmVyZWRWZXJ0aWNhbChpdGVtOiBhbnkpOiB2b2lkO1xuICAgIGhpZGVDaXJjbGVzKCk6IHZvaWQ7XG4gICAgb25DbGljayhkYXRhOiBhbnksIHNlcmllcz86IGFueSk6IHZvaWQ7XG4gICAgdHJhY2tCeShpbmRleDogYW55LCBpdGVtOiBhbnkpOiBzdHJpbmc7XG4gICAgc2V0Q29sb3JzKCk6IHZvaWQ7XG4gICAgZ2V0TGVnZW5kT3B0aW9ucygpOiB7XG4gICAgICAgIHNjYWxlVHlwZTogc3RyaW5nO1xuICAgICAgICBjb2xvcnM6IGFueTtcbiAgICAgICAgZG9tYWluOiBhbnlbXTtcbiAgICAgICAgdGl0bGU6IGFueTtcbiAgICAgICAgcG9zaXRpb246IHN0cmluZztcbiAgICB9O1xuICAgIHVwZGF0ZVlBeGlzV2lkdGgoeyB3aWR0aCB9OiB7XG4gICAgICAgIHdpZHRoOiBhbnk7XG4gICAgfSk6IHZvaWQ7XG4gICAgdXBkYXRlWEF4aXNIZWlnaHQoeyBoZWlnaHQgfToge1xuICAgICAgICBoZWlnaHQ6IGFueTtcbiAgICB9KTogdm9pZDtcbiAgICBvbkFjdGl2YXRlKGl0ZW06IGFueSk6IHZvaWQ7XG4gICAgb25EZWFjdGl2YXRlKGl0ZW06IGFueSk6IHZvaWQ7XG4gICAgZGVhY3RpdmF0ZUFsbCgpOiB2b2lkO1xufVxuIl19