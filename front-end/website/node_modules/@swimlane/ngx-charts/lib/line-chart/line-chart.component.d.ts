import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class LineChartComponent extends BaseChartComponent {
    legend: any;
    legendTitle: string;
    legendPosition: string;
    xAxis: any;
    yAxis: any;
    showXAxisLabel: any;
    showYAxisLabel: any;
    xAxisLabel: any;
    yAxisLabel: any;
    autoScale: any;
    timeline: any;
    gradient: boolean;
    showGridLines: boolean;
    curve: any;
    activeEntries: any[];
    schemeType: string;
    rangeFillOpacity: number;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    roundDomains: boolean;
    tooltipDisabled: boolean;
    showRefLines: boolean;
    referenceLines: any;
    showRefLabels: boolean;
    xScaleMin: any;
    xScaleMax: any;
    yScaleMin: number;
    yScaleMax: number;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    seriesTooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    xSet: any;
    xDomain: any;
    yDomain: any;
    seriesDomain: any;
    yScale: any;
    xScale: any;
    colors: ColorHelper;
    scaleType: string;
    transform: string;
    clipPath: string;
    clipPathId: string;
    series: any;
    areaPath: any;
    margin: number[];
    hoveredVertical: any;
    xAxisHeight: number;
    yAxisWidth: number;
    filteredDomain: any;
    legendOptions: any;
    hasRange: boolean;
    timelineWidth: any;
    timelineHeight: number;
    timelineXScale: any;
    timelineYScale: any;
    timelineXDomain: any;
    timelineTransform: any;
    timelinePadding: number;
    update(): void;
    updateTimeline(): void;
    getXDomain(): any[];
    getYDomain(): any[];
    getSeriesDomain(): any[];
    getXScale(domain: any, width: any): any;
    getYScale(domain: any, height: any): any;
    updateDomain(domain: any): void;
    updateHoveredVertical(item: any): void;
    hideCircles(): void;
    onClick(data: any): void;
    trackBy(index: any, item: any): string;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: any;
        domain: any[];
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(item: any): void;
    onDeactivate(item: any): void;
    deactivateAll(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LineChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LineChartComponent, "ngx-charts-line-chart", never, { "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "showGridLines": "showGridLines"; "curve": "curve"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "showRefLines": "showRefLines"; "showRefLabels": "showRefLabels"; "legend": "legend"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "autoScale": "autoScale"; "timeline": "timeline"; "gradient": "gradient"; "schemeType": "schemeType"; "rangeFillOpacity": "rangeFillOpacity"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "referenceLines": "referenceLines"; "xScaleMin": "xScaleMin"; "xScaleMax": "xScaleMax"; "yScaleMin": "yScaleMin"; "yScaleMax": "yScaleMax"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate", "seriesTooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS1jaGFydC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibGluZS1jaGFydC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUdBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmlld0RpbWVuc2lvbnMgfSBmcm9tICcuLi9jb21tb24vdmlldy1kaW1lbnNpb25zLmhlbHBlcic7XG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL2NvbW1vbi9jb2xvci5oZWxwZXInO1xuaW1wb3J0IHsgQmFzZUNoYXJ0Q29tcG9uZW50IH0gZnJvbSAnLi4vY29tbW9uL2Jhc2UtY2hhcnQuY29tcG9uZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIExpbmVDaGFydENvbXBvbmVudCBleHRlbmRzIEJhc2VDaGFydENvbXBvbmVudCB7XG4gICAgbGVnZW5kOiBhbnk7XG4gICAgbGVnZW5kVGl0bGU6IHN0cmluZztcbiAgICBsZWdlbmRQb3NpdGlvbjogc3RyaW5nO1xuICAgIHhBeGlzOiBhbnk7XG4gICAgeUF4aXM6IGFueTtcbiAgICBzaG93WEF4aXNMYWJlbDogYW55O1xuICAgIHNob3dZQXhpc0xhYmVsOiBhbnk7XG4gICAgeEF4aXNMYWJlbDogYW55O1xuICAgIHlBeGlzTGFiZWw6IGFueTtcbiAgICBhdXRvU2NhbGU6IGFueTtcbiAgICB0aW1lbGluZTogYW55O1xuICAgIGdyYWRpZW50OiBib29sZWFuO1xuICAgIHNob3dHcmlkTGluZXM6IGJvb2xlYW47XG4gICAgY3VydmU6IGFueTtcbiAgICBhY3RpdmVFbnRyaWVzOiBhbnlbXTtcbiAgICBzY2hlbWVUeXBlOiBzdHJpbmc7XG4gICAgcmFuZ2VGaWxsT3BhY2l0eTogbnVtYmVyO1xuICAgIHRyaW1YQXhpc1RpY2tzOiBib29sZWFuO1xuICAgIHRyaW1ZQXhpc1RpY2tzOiBib29sZWFuO1xuICAgIHJvdGF0ZVhBeGlzVGlja3M6IGJvb2xlYW47XG4gICAgbWF4WEF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XG4gICAgbWF4WUF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XG4gICAgeEF4aXNUaWNrRm9ybWF0dGluZzogYW55O1xuICAgIHlBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcbiAgICB4QXhpc1RpY2tzOiBhbnlbXTtcbiAgICB5QXhpc1RpY2tzOiBhbnlbXTtcbiAgICByb3VuZERvbWFpbnM6IGJvb2xlYW47XG4gICAgdG9vbHRpcERpc2FibGVkOiBib29sZWFuO1xuICAgIHNob3dSZWZMaW5lczogYm9vbGVhbjtcbiAgICByZWZlcmVuY2VMaW5lczogYW55O1xuICAgIHNob3dSZWZMYWJlbHM6IGJvb2xlYW47XG4gICAgeFNjYWxlTWluOiBhbnk7XG4gICAgeFNjYWxlTWF4OiBhbnk7XG4gICAgeVNjYWxlTWluOiBudW1iZXI7XG4gICAgeVNjYWxlTWF4OiBudW1iZXI7XG4gICAgYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGRlYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRvb2x0aXBUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBzZXJpZXNUb29sdGlwVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgZGltczogVmlld0RpbWVuc2lvbnM7XG4gICAgeFNldDogYW55O1xuICAgIHhEb21haW46IGFueTtcbiAgICB5RG9tYWluOiBhbnk7XG4gICAgc2VyaWVzRG9tYWluOiBhbnk7XG4gICAgeVNjYWxlOiBhbnk7XG4gICAgeFNjYWxlOiBhbnk7XG4gICAgY29sb3JzOiBDb2xvckhlbHBlcjtcbiAgICBzY2FsZVR5cGU6IHN0cmluZztcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcbiAgICBjbGlwUGF0aDogc3RyaW5nO1xuICAgIGNsaXBQYXRoSWQ6IHN0cmluZztcbiAgICBzZXJpZXM6IGFueTtcbiAgICBhcmVhUGF0aDogYW55O1xuICAgIG1hcmdpbjogbnVtYmVyW107XG4gICAgaG92ZXJlZFZlcnRpY2FsOiBhbnk7XG4gICAgeEF4aXNIZWlnaHQ6IG51bWJlcjtcbiAgICB5QXhpc1dpZHRoOiBudW1iZXI7XG4gICAgZmlsdGVyZWREb21haW46IGFueTtcbiAgICBsZWdlbmRPcHRpb25zOiBhbnk7XG4gICAgaGFzUmFuZ2U6IGJvb2xlYW47XG4gICAgdGltZWxpbmVXaWR0aDogYW55O1xuICAgIHRpbWVsaW5lSGVpZ2h0OiBudW1iZXI7XG4gICAgdGltZWxpbmVYU2NhbGU6IGFueTtcbiAgICB0aW1lbGluZVlTY2FsZTogYW55O1xuICAgIHRpbWVsaW5lWERvbWFpbjogYW55O1xuICAgIHRpbWVsaW5lVHJhbnNmb3JtOiBhbnk7XG4gICAgdGltZWxpbmVQYWRkaW5nOiBudW1iZXI7XG4gICAgdXBkYXRlKCk6IHZvaWQ7XG4gICAgdXBkYXRlVGltZWxpbmUoKTogdm9pZDtcbiAgICBnZXRYRG9tYWluKCk6IGFueVtdO1xuICAgIGdldFlEb21haW4oKTogYW55W107XG4gICAgZ2V0U2VyaWVzRG9tYWluKCk6IGFueVtdO1xuICAgIGdldFhTY2FsZShkb21haW46IGFueSwgd2lkdGg6IGFueSk6IGFueTtcbiAgICBnZXRZU2NhbGUoZG9tYWluOiBhbnksIGhlaWdodDogYW55KTogYW55O1xuICAgIHVwZGF0ZURvbWFpbihkb21haW46IGFueSk6IHZvaWQ7XG4gICAgdXBkYXRlSG92ZXJlZFZlcnRpY2FsKGl0ZW06IGFueSk6IHZvaWQ7XG4gICAgaGlkZUNpcmNsZXMoKTogdm9pZDtcbiAgICBvbkNsaWNrKGRhdGE6IGFueSk6IHZvaWQ7XG4gICAgdHJhY2tCeShpbmRleDogYW55LCBpdGVtOiBhbnkpOiBzdHJpbmc7XG4gICAgc2V0Q29sb3JzKCk6IHZvaWQ7XG4gICAgZ2V0TGVnZW5kT3B0aW9ucygpOiB7XG4gICAgICAgIHNjYWxlVHlwZTogc3RyaW5nO1xuICAgICAgICBjb2xvcnM6IGFueTtcbiAgICAgICAgZG9tYWluOiBhbnlbXTtcbiAgICAgICAgdGl0bGU6IGFueTtcbiAgICAgICAgcG9zaXRpb246IHN0cmluZztcbiAgICB9O1xuICAgIHVwZGF0ZVlBeGlzV2lkdGgoeyB3aWR0aCB9OiB7XG4gICAgICAgIHdpZHRoOiBhbnk7XG4gICAgfSk6IHZvaWQ7XG4gICAgdXBkYXRlWEF4aXNIZWlnaHQoeyBoZWlnaHQgfToge1xuICAgICAgICBoZWlnaHQ6IGFueTtcbiAgICB9KTogdm9pZDtcbiAgICBvbkFjdGl2YXRlKGl0ZW06IGFueSk6IHZvaWQ7XG4gICAgb25EZWFjdGl2YXRlKGl0ZW06IGFueSk6IHZvaWQ7XG4gICAgZGVhY3RpdmF0ZUFsbCgpOiB2b2lkO1xufVxuIl19