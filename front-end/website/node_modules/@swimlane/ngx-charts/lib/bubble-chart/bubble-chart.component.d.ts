import { EventEmitter, TemplateRef } from '@angular/core';
import { BaseChartComponent } from '../common/base-chart.component';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import * as ɵngcc0 from '@angular/core';
export declare class BubbleChartComponent extends BaseChartComponent {
    showGridLines: boolean;
    legend: boolean;
    legendTitle: string;
    legendPosition: string;
    xAxis: boolean;
    yAxis: boolean;
    showXAxisLabel: boolean;
    showYAxisLabel: boolean;
    xAxisLabel: string;
    yAxisLabel: string;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    roundDomains: boolean;
    maxRadius: number;
    minRadius: number;
    autoScale: boolean;
    schemeType: string;
    tooltipDisabled: boolean;
    xScaleMin: any;
    xScaleMax: any;
    yScaleMin: any;
    yScaleMax: any;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    colors: ColorHelper;
    scaleType: string;
    margin: number[];
    bubblePadding: number[];
    data: any;
    legendOptions: any;
    transform: string;
    clipPath: string;
    clipPathId: string;
    seriesDomain: any[];
    xDomain: any[];
    yDomain: any[];
    rDomain: number[];
    xScaleType: string;
    yScaleType: string;
    yScale: any;
    xScale: any;
    rScale: any;
    xAxisHeight: number;
    yAxisWidth: number;
    activeEntries: any[];
    update(): void;
    hideCircles(): void;
    onClick(data: any, series?: any): void;
    getBubblePadding(): number[];
    setScales(): void;
    getYScale(domain: any, height: any): any;
    getXScale(domain: any, width: any): any;
    getRScale(domain: any, range: any): any;
    getLegendOptions(): any;
    getXDomain(): any[];
    getYDomain(): any[];
    getRDomain(): number[];
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(item: any): void;
    onDeactivate(item: any): void;
    deactivateAll(): void;
    trackBy(index: any, item: any): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BubbleChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BubbleChartComponent, "ngx-charts-bubble-chart", never, { "showGridLines": "showGridLines"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "roundDomains": "roundDomains"; "maxRadius": "maxRadius"; "minRadius": "minRadius"; "schemeType": "schemeType"; "tooltipDisabled": "tooltipDisabled"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "autoScale": "autoScale"; "xScaleMin": "xScaleMin"; "xScaleMax": "xScaleMax"; "yScaleMin": "yScaleMin"; "yScaleMax": "yScaleMax"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnViYmxlLWNoYXJ0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJidWJibGUtY2hhcnQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2RUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vYmFzZS1jaGFydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgVmlld0RpbWVuc2lvbnMgfSBmcm9tICcuLi9jb21tb24vdmlldy1kaW1lbnNpb25zLmhlbHBlcic7XG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL2NvbW1vbi9jb2xvci5oZWxwZXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQnViYmxlQ2hhcnRDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ2hhcnRDb21wb25lbnQge1xuICAgIHNob3dHcmlkTGluZXM6IGJvb2xlYW47XG4gICAgbGVnZW5kOiBib29sZWFuO1xuICAgIGxlZ2VuZFRpdGxlOiBzdHJpbmc7XG4gICAgbGVnZW5kUG9zaXRpb246IHN0cmluZztcbiAgICB4QXhpczogYm9vbGVhbjtcbiAgICB5QXhpczogYm9vbGVhbjtcbiAgICBzaG93WEF4aXNMYWJlbDogYm9vbGVhbjtcbiAgICBzaG93WUF4aXNMYWJlbDogYm9vbGVhbjtcbiAgICB4QXhpc0xhYmVsOiBzdHJpbmc7XG4gICAgeUF4aXNMYWJlbDogc3RyaW5nO1xuICAgIHRyaW1YQXhpc1RpY2tzOiBib29sZWFuO1xuICAgIHRyaW1ZQXhpc1RpY2tzOiBib29sZWFuO1xuICAgIHJvdGF0ZVhBeGlzVGlja3M6IGJvb2xlYW47XG4gICAgbWF4WEF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XG4gICAgbWF4WUF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XG4gICAgeEF4aXNUaWNrRm9ybWF0dGluZzogYW55O1xuICAgIHlBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcbiAgICB4QXhpc1RpY2tzOiBhbnlbXTtcbiAgICB5QXhpc1RpY2tzOiBhbnlbXTtcbiAgICByb3VuZERvbWFpbnM6IGJvb2xlYW47XG4gICAgbWF4UmFkaXVzOiBudW1iZXI7XG4gICAgbWluUmFkaXVzOiBudW1iZXI7XG4gICAgYXV0b1NjYWxlOiBib29sZWFuO1xuICAgIHNjaGVtZVR5cGU6IHN0cmluZztcbiAgICB0b29sdGlwRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgeFNjYWxlTWluOiBhbnk7XG4gICAgeFNjYWxlTWF4OiBhbnk7XG4gICAgeVNjYWxlTWluOiBhbnk7XG4gICAgeVNjYWxlTWF4OiBhbnk7XG4gICAgYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGRlYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRvb2x0aXBUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBkaW1zOiBWaWV3RGltZW5zaW9ucztcbiAgICBjb2xvcnM6IENvbG9ySGVscGVyO1xuICAgIHNjYWxlVHlwZTogc3RyaW5nO1xuICAgIG1hcmdpbjogbnVtYmVyW107XG4gICAgYnViYmxlUGFkZGluZzogbnVtYmVyW107XG4gICAgZGF0YTogYW55O1xuICAgIGxlZ2VuZE9wdGlvbnM6IGFueTtcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcbiAgICBjbGlwUGF0aDogc3RyaW5nO1xuICAgIGNsaXBQYXRoSWQ6IHN0cmluZztcbiAgICBzZXJpZXNEb21haW46IGFueVtdO1xuICAgIHhEb21haW46IGFueVtdO1xuICAgIHlEb21haW46IGFueVtdO1xuICAgIHJEb21haW46IG51bWJlcltdO1xuICAgIHhTY2FsZVR5cGU6IHN0cmluZztcbiAgICB5U2NhbGVUeXBlOiBzdHJpbmc7XG4gICAgeVNjYWxlOiBhbnk7XG4gICAgeFNjYWxlOiBhbnk7XG4gICAgclNjYWxlOiBhbnk7XG4gICAgeEF4aXNIZWlnaHQ6IG51bWJlcjtcbiAgICB5QXhpc1dpZHRoOiBudW1iZXI7XG4gICAgYWN0aXZlRW50cmllczogYW55W107XG4gICAgdXBkYXRlKCk6IHZvaWQ7XG4gICAgaGlkZUNpcmNsZXMoKTogdm9pZDtcbiAgICBvbkNsaWNrKGRhdGE6IGFueSwgc2VyaWVzPzogYW55KTogdm9pZDtcbiAgICBnZXRCdWJibGVQYWRkaW5nKCk6IG51bWJlcltdO1xuICAgIHNldFNjYWxlcygpOiB2b2lkO1xuICAgIGdldFlTY2FsZShkb21haW46IGFueSwgaGVpZ2h0OiBhbnkpOiBhbnk7XG4gICAgZ2V0WFNjYWxlKGRvbWFpbjogYW55LCB3aWR0aDogYW55KTogYW55O1xuICAgIGdldFJTY2FsZShkb21haW46IGFueSwgcmFuZ2U6IGFueSk6IGFueTtcbiAgICBnZXRMZWdlbmRPcHRpb25zKCk6IGFueTtcbiAgICBnZXRYRG9tYWluKCk6IGFueVtdO1xuICAgIGdldFlEb21haW4oKTogYW55W107XG4gICAgZ2V0UkRvbWFpbigpOiBudW1iZXJbXTtcbiAgICB1cGRhdGVZQXhpc1dpZHRoKHsgd2lkdGggfToge1xuICAgICAgICB3aWR0aDogYW55O1xuICAgIH0pOiB2b2lkO1xuICAgIHVwZGF0ZVhBeGlzSGVpZ2h0KHsgaGVpZ2h0IH06IHtcbiAgICAgICAgaGVpZ2h0OiBhbnk7XG4gICAgfSk6IHZvaWQ7XG4gICAgb25BY3RpdmF0ZShpdGVtOiBhbnkpOiB2b2lkO1xuICAgIG9uRGVhY3RpdmF0ZShpdGVtOiBhbnkpOiB2b2lkO1xuICAgIGRlYWN0aXZhdGVBbGwoKTogdm9pZDtcbiAgICB0cmFja0J5KGluZGV4OiBhbnksIGl0ZW06IGFueSk6IHN0cmluZztcbn1cbiJdfQ==