import { AfterViewChecked, ChangeDetectorRef, EventEmitter, OnInit, AfterViewInit, ElementRef } from "@angular/core";
import { ControlValueAccessor, FormControl } from "@angular/forms";
import { CtrCompleter } from "../directives/ctr-completer";
import { CompleterData } from "../services/completer-data";
import { CompleterService } from "../services/completer-service";
import { CompleterItem } from "./completer-item";
import * as ɵngcc0 from '@angular/core';
export declare class CompleterCmp implements OnInit, ControlValueAccessor, AfterViewChecked, AfterViewInit {
    private completerService;
    private cdr;
    dataService: CompleterData | undefined;
    inputName: string;
    inputId: string;
    pause: number;
    minSearchLength: number;
    maxChars: number;
    overrideSuggested: boolean;
    clearSelected: boolean;
    clearUnselected: boolean;
    fillHighlighted: boolean;
    placeholder: string;
    matchClass: string | undefined;
    fieldTabindex: number | undefined;
    autoMatch: boolean;
    disableInput: boolean;
    inputClass: string | undefined;
    autofocus: boolean;
    openOnFocus: boolean;
    openOnClick: boolean;
    selectOnClick: boolean;
    selectOnFocus: boolean;
    initialValue: any;
    autoHighlight: boolean;
    selected: EventEmitter<CompleterItem>;
    highlighted: EventEmitter<CompleterItem>;
    blurEvent: EventEmitter<void>;
    click: EventEmitter<void>;
    focusEvent: EventEmitter<void>;
    opened: EventEmitter<boolean>;
    keyup: EventEmitter<any>;
    keydown: EventEmitter<any>;
    completer: CtrCompleter | undefined;
    ctrInput: ElementRef | undefined;
    control: FormControl;
    displaySearching: boolean;
    displayNoResults: boolean;
    _textNoResults: string;
    _textSearching: string;
    private _onTouchedCallback;
    private _onChangeCallback;
    private _focus;
    private _open;
    private _searchStr;
    constructor(completerService: CompleterService, cdr: ChangeDetectorRef);
    get value(): any;
    set value(v: any);
    get searchStr(): string;
    set searchStr(value: string);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    onTouched(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    set datasource(source: CompleterData | string | any[]);
    set textNoResults(text: string);
    set textSearching(text: string);
    ngOnInit(): void;
    onBlur(): void;
    onFocus(): void;
    onClick(event: any): void;
    onKeyup(event: any): void;
    onKeydown(event: any): void;
    onChange(value: string): void;
    open(): void;
    close(): void;
    focus(): void;
    blur(): void;
    isOpen(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CompleterCmp, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CompleterCmp, "ng2-completer", never, { "inputName": "inputName"; "inputId": "inputId"; "pause": "pause"; "minSearchLength": "minSearchLength"; "maxChars": "maxChars"; "overrideSuggested": "overrideSuggested"; "clearSelected": "clearSelected"; "clearUnselected": "clearUnselected"; "fillHighlighted": "fillHighlighted"; "placeholder": "placeholder"; "autoMatch": "autoMatch"; "disableInput": "disableInput"; "autofocus": "autofocus"; "openOnFocus": "openOnFocus"; "openOnClick": "openOnClick"; "selectOnClick": "selectOnClick"; "selectOnFocus": "selectOnFocus"; "autoHighlight": "autoHighlight"; "datasource": "datasource"; "dataService": "dataService"; "textNoResults": "textNoResults"; "textSearching": "textSearching"; "matchClass": "matchClass"; "fieldTabindex": "fieldTabindex"; "inputClass": "inputClass"; "initialValue": "initialValue"; }, { "selected": "selected"; "highlighted": "highlighted"; "blurEvent": "blur"; "click": "click"; "focusEvent": "focus"; "opened": "opened"; "keyup": "keyup"; "keydown": "keydown"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGVyLWNtcC5kLnRzIiwic291cmNlcyI6WyJjb21wbGV0ZXItY21wLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3Q2hlY2tlZCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBGb3JtQ29udHJvbCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgQ3RyQ29tcGxldGVyIH0gZnJvbSBcIi4uL2RpcmVjdGl2ZXMvY3RyLWNvbXBsZXRlclwiO1xuaW1wb3J0IHsgQ29tcGxldGVyRGF0YSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb21wbGV0ZXItZGF0YVwiO1xuaW1wb3J0IHsgQ29tcGxldGVyU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb21wbGV0ZXItc2VydmljZVwiO1xuaW1wb3J0IHsgQ29tcGxldGVySXRlbSB9IGZyb20gXCIuL2NvbXBsZXRlci1pdGVtXCI7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb21wbGV0ZXJDbXAgaW1wbGVtZW50cyBPbkluaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBZnRlclZpZXdDaGVja2VkLCBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGNvbXBsZXRlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgZGF0YVNlcnZpY2U6IENvbXBsZXRlckRhdGEgfCB1bmRlZmluZWQ7XG4gICAgaW5wdXROYW1lOiBzdHJpbmc7XG4gICAgaW5wdXRJZDogc3RyaW5nO1xuICAgIHBhdXNlOiBudW1iZXI7XG4gICAgbWluU2VhcmNoTGVuZ3RoOiBudW1iZXI7XG4gICAgbWF4Q2hhcnM6IG51bWJlcjtcbiAgICBvdmVycmlkZVN1Z2dlc3RlZDogYm9vbGVhbjtcbiAgICBjbGVhclNlbGVjdGVkOiBib29sZWFuO1xuICAgIGNsZWFyVW5zZWxlY3RlZDogYm9vbGVhbjtcbiAgICBmaWxsSGlnaGxpZ2h0ZWQ6IGJvb2xlYW47XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBtYXRjaENsYXNzOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgZmllbGRUYWJpbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIGF1dG9NYXRjaDogYm9vbGVhbjtcbiAgICBkaXNhYmxlSW5wdXQ6IGJvb2xlYW47XG4gICAgaW5wdXRDbGFzczogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGF1dG9mb2N1czogYm9vbGVhbjtcbiAgICBvcGVuT25Gb2N1czogYm9vbGVhbjtcbiAgICBvcGVuT25DbGljazogYm9vbGVhbjtcbiAgICBzZWxlY3RPbkNsaWNrOiBib29sZWFuO1xuICAgIHNlbGVjdE9uRm9jdXM6IGJvb2xlYW47XG4gICAgaW5pdGlhbFZhbHVlOiBhbnk7XG4gICAgYXV0b0hpZ2hsaWdodDogYm9vbGVhbjtcbiAgICBzZWxlY3RlZDogRXZlbnRFbWl0dGVyPENvbXBsZXRlckl0ZW0+O1xuICAgIGhpZ2hsaWdodGVkOiBFdmVudEVtaXR0ZXI8Q29tcGxldGVySXRlbT47XG4gICAgYmx1ckV2ZW50OiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgY2xpY2s6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBmb2N1c0V2ZW50OiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgb3BlbmVkOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAga2V5dXA6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGtleWRvd246IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNvbXBsZXRlcjogQ3RyQ29tcGxldGVyIHwgdW5kZWZpbmVkO1xuICAgIGN0cklucHV0OiBFbGVtZW50UmVmIHwgdW5kZWZpbmVkO1xuICAgIGNvbnRyb2w6IEZvcm1Db250cm9sO1xuICAgIGRpc3BsYXlTZWFyY2hpbmc6IGJvb2xlYW47XG4gICAgZGlzcGxheU5vUmVzdWx0czogYm9vbGVhbjtcbiAgICBfdGV4dE5vUmVzdWx0czogc3RyaW5nO1xuICAgIF90ZXh0U2VhcmNoaW5nOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfb25Ub3VjaGVkQ2FsbGJhY2s7XG4gICAgcHJpdmF0ZSBfb25DaGFuZ2VDYWxsYmFjaztcbiAgICBwcml2YXRlIF9mb2N1cztcbiAgICBwcml2YXRlIF9vcGVuO1xuICAgIHByaXZhdGUgX3NlYXJjaFN0cjtcbiAgICBjb25zdHJ1Y3Rvcihjb21wbGV0ZXJTZXJ2aWNlOiBDb21wbGV0ZXJTZXJ2aWNlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBnZXQgdmFsdWUoKTogYW55O1xuICAgIHNldCB2YWx1ZSh2OiBhbnkpO1xuICAgIGdldCBzZWFyY2hTdHIoKTogc3RyaW5nO1xuICAgIHNldCBzZWFyY2hTdHIodmFsdWU6IHN0cmluZyk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgb25Ub3VjaGVkKCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgc2V0IGRhdGFzb3VyY2Uoc291cmNlOiBDb21wbGV0ZXJEYXRhIHwgc3RyaW5nIHwgYW55W10pO1xuICAgIHNldCB0ZXh0Tm9SZXN1bHRzKHRleHQ6IHN0cmluZyk7XG4gICAgc2V0IHRleHRTZWFyY2hpbmcodGV4dDogc3RyaW5nKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG9uQmx1cigpOiB2b2lkO1xuICAgIG9uRm9jdXMoKTogdm9pZDtcbiAgICBvbkNsaWNrKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uS2V5dXAoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25LZXlkb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uQ2hhbmdlKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIG9wZW4oKTogdm9pZDtcbiAgICBjbG9zZSgpOiB2b2lkO1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgYmx1cigpOiB2b2lkO1xuICAgIGlzT3BlbigpOiBib29sZWFuO1xufVxuIl19