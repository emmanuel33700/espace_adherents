import { EventEmitter } from "@angular/core";
import { CompleterItem } from "../components/completer-item";
import * as ɵngcc0 from '@angular/core';
export interface CompleterList {
    search(term: string): void;
    open(): void;
    isOpen(open: boolean): void;
    clear(): void;
}
export interface CompleterDropdown {
    clear(): void;
    selectCurrent(): void;
    nextRow(): void;
    prevRow(): void;
    highlightRow(index: number | null): void;
}
export declare class CtrCompleter {
    selected: EventEmitter<CompleterItem | null>;
    highlighted: EventEmitter<CompleterItem | null>;
    opened: EventEmitter<boolean>;
    dataSourceChange: EventEmitter<void>;
    private list;
    private dropdown;
    private _hasHighlighted;
    private _hasSelected;
    private _cancelBlur;
    private _isOpen;
    private _autoHighlightIndex;
    registerList(list: CompleterList): void;
    registerDropdown(dropdown: CompleterDropdown | null): void;
    onHighlighted(item: CompleterItem | null): void;
    onSelected(item: CompleterItem | null, clearList?: boolean): void;
    onDataSourceChange(): void;
    search(term: string): void;
    clear(): void;
    selectCurrent(): void;
    nextRow(): void;
    prevRow(): void;
    hasHighlighted(): boolean;
    cancelBlur(cancel: boolean): void;
    isCancelBlur(): boolean;
    open(): void;
    get isOpen(): boolean;
    set isOpen(open: boolean);
    get autoHighlightIndex(): number | null;
    set autoHighlightIndex(index: number | null);
    get hasSelected(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CtrCompleter, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CtrCompleter, "[ctrCompleter]", never, {}, { "selected": "selected"; "highlighted": "highlighted"; "opened": "opened"; "dataSourceChange": "dataSourceChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3RyLWNvbXBsZXRlci5kLnRzIiwic291cmNlcyI6WyJjdHItY29tcGxldGVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNENBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IENvbXBsZXRlckl0ZW0gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb21wbGV0ZXItaXRlbVwiO1xuZXhwb3J0IGludGVyZmFjZSBDb21wbGV0ZXJMaXN0IHtcbiAgICBzZWFyY2godGVybTogc3RyaW5nKTogdm9pZDtcbiAgICBvcGVuKCk6IHZvaWQ7XG4gICAgaXNPcGVuKG9wZW46IGJvb2xlYW4pOiB2b2lkO1xuICAgIGNsZWFyKCk6IHZvaWQ7XG59XG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXRlckRyb3Bkb3duIHtcbiAgICBjbGVhcigpOiB2b2lkO1xuICAgIHNlbGVjdEN1cnJlbnQoKTogdm9pZDtcbiAgICBuZXh0Um93KCk6IHZvaWQ7XG4gICAgcHJldlJvdygpOiB2b2lkO1xuICAgIGhpZ2hsaWdodFJvdyhpbmRleDogbnVtYmVyIHwgbnVsbCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDdHJDb21wbGV0ZXIge1xuICAgIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8Q29tcGxldGVySXRlbSB8IG51bGw+O1xuICAgIGhpZ2hsaWdodGVkOiBFdmVudEVtaXR0ZXI8Q29tcGxldGVySXRlbSB8IG51bGw+O1xuICAgIG9wZW5lZDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIGRhdGFTb3VyY2VDaGFuZ2U6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBwcml2YXRlIGxpc3Q7XG4gICAgcHJpdmF0ZSBkcm9wZG93bjtcbiAgICBwcml2YXRlIF9oYXNIaWdobGlnaHRlZDtcbiAgICBwcml2YXRlIF9oYXNTZWxlY3RlZDtcbiAgICBwcml2YXRlIF9jYW5jZWxCbHVyO1xuICAgIHByaXZhdGUgX2lzT3BlbjtcbiAgICBwcml2YXRlIF9hdXRvSGlnaGxpZ2h0SW5kZXg7XG4gICAgcmVnaXN0ZXJMaXN0KGxpc3Q6IENvbXBsZXRlckxpc3QpOiB2b2lkO1xuICAgIHJlZ2lzdGVyRHJvcGRvd24oZHJvcGRvd246IENvbXBsZXRlckRyb3Bkb3duIHwgbnVsbCk6IHZvaWQ7XG4gICAgb25IaWdobGlnaHRlZChpdGVtOiBDb21wbGV0ZXJJdGVtIHwgbnVsbCk6IHZvaWQ7XG4gICAgb25TZWxlY3RlZChpdGVtOiBDb21wbGV0ZXJJdGVtIHwgbnVsbCwgY2xlYXJMaXN0PzogYm9vbGVhbik6IHZvaWQ7XG4gICAgb25EYXRhU291cmNlQ2hhbmdlKCk6IHZvaWQ7XG4gICAgc2VhcmNoKHRlcm06IHN0cmluZyk6IHZvaWQ7XG4gICAgY2xlYXIoKTogdm9pZDtcbiAgICBzZWxlY3RDdXJyZW50KCk6IHZvaWQ7XG4gICAgbmV4dFJvdygpOiB2b2lkO1xuICAgIHByZXZSb3coKTogdm9pZDtcbiAgICBoYXNIaWdobGlnaHRlZCgpOiBib29sZWFuO1xuICAgIGNhbmNlbEJsdXIoY2FuY2VsOiBib29sZWFuKTogdm9pZDtcbiAgICBpc0NhbmNlbEJsdXIoKTogYm9vbGVhbjtcbiAgICBvcGVuKCk6IHZvaWQ7XG4gICAgZ2V0IGlzT3BlbigpOiBib29sZWFuO1xuICAgIHNldCBpc09wZW4ob3BlbjogYm9vbGVhbik7XG4gICAgZ2V0IGF1dG9IaWdobGlnaHRJbmRleCgpOiBudW1iZXIgfCBudWxsO1xuICAgIHNldCBhdXRvSGlnaGxpZ2h0SW5kZXgoaW5kZXg6IG51bWJlciB8IG51bGwpO1xuICAgIGdldCBoYXNTZWxlY3RlZCgpOiBib29sZWFuO1xufVxuIl19