{"version":3,"file":"leaflet-layer.directive.js","sources":["../../../src/leaflet/layers/leaflet-layer.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAErG,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,OAAO,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAC7D,OAAO,EAAE,uBAAuB,EAAE,MAAM,mCAAmC,CAAC;;;;;;;;;AAS1E;IAYD,+BAAY,gBAAkC,EAAU,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QACnE,IAAI,CAAC,gBAAgB,GAAG,IAAI,uBAAuB,CAAC,gBAAgB,CAAC,CAAC;KACtE;IAED,wCAAQ,GAAR;;QAGC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;KAE7B;IAED,2CAAW,GAAX;QAAA,iBAMC;QAJA,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;YAC3B,KAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;SACpB,CAAC,CAAC;KAEH;IAED,2CAAW,GAAX,UAAY,OAAwC;QAApD,iBAkBC;QAhBA,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;YAGtB,IAAM,GAAC,GAAU,OAAO,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC;YAChD,IAAM,GAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC;YAExC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBAC3B,EAAE,CAAC,CAAC,IAAI,IAAI,GAAC,CAAC,CAAC,CAAC;oBACf,GAAC,CAAC,MAAM,EAAE,CAAC;iBACX;gBACD,EAAE,CAAC,CAAC,IAAI,IAAI,GAAC,CAAC,CAAC,CAAC;oBACf,KAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,GAAC,CAAC,CAAC;iBAC3C;aACD,CAAC,CAAC;SACH;KAED,CACF,AA9CU;;kCAHT,SAAS,SAAC;QACV,QAAQ,EAAE,gBAAgB,lBAZlB,gBAAgB;eAaxB,CAjB0B,MAAM;;;0BAqB/B,KAAK,SAAC,cAAc;;;;;;;;;;;;oBAAc;gCArBpC;;SAkBa,qBAAqB","sourcesContent":["import { Directive, Input, NgZone, OnChanges, OnDestroy, OnInit, SimpleChange } from '@angular/core';\n\nimport { Layer } from 'leaflet';\n\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\n\n\n/**\n * Layer directive\n *\n * This directive is used to directly control a single map layer. The purpose of this directive is to\n * be used as part of a child structural directive of the map element.\n *\n */\n@Directive({\n\tselector: '[leafletLayer]'\n})\nexport class LeafletLayerDirective\n\timplements OnChanges, OnDestroy, OnInit {\n\n\t@Input('leafletLayer') layer: Layer;\n\n\t// Wrapper for the leaflet directive (manages the parent directive)\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective, private zone: NgZone) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t}\n\n\tngOnInit() {\n\n\t\t// Init the map\n\t\tthis.leafletDirective.init();\n\n\t}\n\n\tngOnDestroy() {\n\n\t\tthis.zone.runOutsideAngular(() => {\n\t\t\tthis.layer.remove();\n\t\t});\n\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\tif (changes['layer']) {\n\n\t\t\t// Update the layer\n\t\t\tconst p: Layer = changes['layer'].previousValue;\n\t\t\tconst n = changes['layer'].currentValue;\n\n\t\t\tthis.zone.runOutsideAngular(() => {\n\t\t\t\tif (null != p) {\n\t\t\t\t\tp.remove();\n\t\t\t\t}\n\t\t\t\tif (null != n) {\n\t\t\t\t\tthis.leafletDirective.getMap().addLayer(n);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t}\n\n}\n"]}