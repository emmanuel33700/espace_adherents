{"version":3,"file":"leaflet.directive.js","sources":["../../../src/leaflet/core/leaflet.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tDirective, ElementRef, EventEmitter, HostListener, Input, NgZone, OnChanges, OnInit, Output,\n\tSimpleChange\n} from '@angular/core';\n\nimport { latLng, LatLng, LatLngBounds, map, Map, MapOptions} from 'leaflet';\n\n@Directive({\n\tselector: '[leaflet]'\n})\nexport class LeafletDirective\n\timplements OnChanges, OnInit {\n\n\treadonly DEFAULT_ZOOM = 1;\n\treadonly DEFAULT_CENTER = latLng(38.907192, -77.036871);\n\treadonly DEFAULT_FPZ_OPTIONS = {};\n\n\tresizeTimer: any;\n\n\t// Reference to the primary map object\n\tmap: Map;\n\n\t@Input('leafletFitBoundsOptions') fitBoundsOptions = this.DEFAULT_FPZ_OPTIONS;\n\t@Input('leafletPanOptions') panOptions = this.DEFAULT_FPZ_OPTIONS;\n\t@Input('leafletZoomOptions') zoomOptions = this.DEFAULT_FPZ_OPTIONS;\n\t@Input('leafletZoomPanOptions') zoomPanOptions = this.DEFAULT_FPZ_OPTIONS;\n\n\n\t// Default configuration\n\t@Input('leafletOptions') options: MapOptions = {};\n\n\t// Configure callback function for the map\n\t@Output('leafletMapReady') mapReady = new EventEmitter<Map>();\n\n\t// Zoom level for the map\n\t@Input('leafletZoom') zoom: number;\n\n\t// Center the map\n\t@Input('leafletCenter') center: LatLng;\n\n\t// Set fit bounds for map\n\t@Input('leafletFitBounds') fitBounds: LatLngBounds;\n\n\n\tconstructor(private element: ElementRef, private zone: NgZone) {\n\t\t// Nothing here\n\t}\n\n\tngOnInit() {\n\n\t\t// Create the map with some reasonable defaults\n\t\tthis.zone.runOutsideAngular(() => {\n\t\t\tthis.map = map(this.element.nativeElement, this.options);\n\t\t});\n\n\t\t// Only setView if there is a center/zoom\n\t\tif (null != this.center && null != this.zoom) {\n\t\t\tthis.setView(this.center, this.zoom);\n\t\t}\n\n\t\t// Set up all the initial settings\n\t\tif (null != this.fitBounds) {\n\t\t\tthis.setFitBounds(this.fitBounds);\n\t\t}\n\n\t\tthis.doResize();\n\n\t\t// Fire map ready event\n\t\tthis.mapReady.emit(this.map);\n\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\t/*\n\t\t * The following code is to address an issue with our (basic) implementation of\n\t\t * zooming and panning. From our testing, it seems that a pan operation followed\n\t\t * by a zoom operation in the same thread will interfere with eachother. The zoom\n\t\t * operation interrupts/cancels the pan, resulting in a final center point that is\n\t\t * inaccurate. The solution seems to be to either separate them with a timeout or\n\t\t  * to collapse them into a setView call.\n\t\t */\n\n\t\t// Zooming and Panning\n\t\tif (changes['zoom'] && changes['center'] && null != this.zoom && null != this.center) {\n\t\t\tthis.setView(changes['center'].currentValue, changes['zoom'].currentValue);\n\t\t}\n\t\t// Set the zoom level\n\t\telse if (changes['zoom']) {\n\t\t\tthis.setZoom(changes['zoom'].currentValue);\n\t\t}\n\t\t// Set the map center\n\t\telse if (changes['center']) {\n\t\t\tthis.setCenter(changes['center'].currentValue);\n\t\t}\n\n\t\t// Fit bounds\n\t\tif (changes['fitBounds']) {\n\t\t\tthis.setFitBounds(changes['fitBounds'].currentValue);\n\t\t}\n\n\t}\n\n\tpublic getMap() {\n\t\treturn this.map;\n\t}\n\n\n\t@HostListener('window:resize', [])\n\tonResize() {\n\t\tthis.delayResize();\n\t}\n\n\t/**\n\t * Resize the map to fit it's parent container\n\t */\n\tprivate doResize() {\n\n\t\t// Invalidate the map size to trigger it to update itself\n\t\tthis.zone.runOutsideAngular(() => {\n\t\t\tthis.map.invalidateSize({});\n\t\t});\n\n\t}\n\n\t/**\n\t * Manage a delayed resize of the component\n\t */\n\tprivate delayResize() {\n\t\tif (null != this.resizeTimer) {\n\t\t\tclearTimeout(this.resizeTimer);\n\t\t}\n\t\tthis.resizeTimer = setTimeout(this.doResize.bind(this), 200);\n\t}\n\n\n\t/**\n\t * Set the view (center/zoom) all at once\n\t * @param center The new center\n\t * @param zoom The new zoom level\n\t */\n\tprivate setView(center: LatLng, zoom: number) {\n\n\t\tif (this.map && null != center && null != zoom) {\n\t\t\tthis.zone.runOutsideAngular(() => {\n\t\t\t\tthis.map.setView(center, zoom, this.zoomPanOptions);\n\t\t\t});\n\t\t}\n\n\t}\n\n\t/**\n\t * Set the map zoom level\n\t * @param zoom the new zoom level for the map\n\t */\n\tprivate setZoom(zoom: number) {\n\n\t\tif (this.map && null != zoom) {\n\t\t\tthis.zone.runOutsideAngular(() => {\n\t\t\t\tthis.map.setZoom(zoom, this.zoomOptions);\n\t\t\t});\n\t\t}\n\n\t}\n\n\t/**\n\t * Set the center of the map\n\t * @param center the center point\n\t */\n\tprivate setCenter(center: LatLng) {\n\n\t\tif (this.map && null != center) {\n\t\t\tthis.zone.runOutsideAngular(() => {\n\t\t\t\tthis.map.panTo(center, this.panOptions);\n\t\t\t});\n\t\t}\n\n\t}\n\n\t/**\n\t * Fit the map to the bounds\n\t * @param center the center point\n\t */\n\tprivate setFitBounds(latLngBounds: LatLngBounds) {\n\n\t\tif (this.map && null != latLngBounds) {\n\t\t\tthis.zone.runOutsideAngular(() => {\n\t\t\t\tthis.map.fitBounds(latLngBounds, this.fitBoundsOptions);\n\t\t\t});\n\t\t}\n\n\t}\n}\n"]}