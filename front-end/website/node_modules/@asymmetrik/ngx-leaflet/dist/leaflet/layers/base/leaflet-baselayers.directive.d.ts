import { DoCheck, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy, OnInit } from '@angular/core';
import { Control, Layer } from 'leaflet';
import { LeafletDirective } from '../../core/leaflet.directive';
/**
 * Baselayers directive
 *
 * This directive is provided as a convenient way to add baselayers to the map. The input accepts
 * a key-value map of layer name -> layer. Mutable changed are detected. On changes, a differ is
 * used to determine what changed so that layers are appropriately added or removed. This directive
 * will also add the layers control so users can switch between available base layers.
 *
 * To specify which layer to show as the 'active' baselayer, you will want to add it to the map
 * using the layers directive. Otherwise, the plugin will use the last one it sees.
 */
import * as ɵngcc0 from '@angular/core';
export declare class LeafletBaseLayersDirective implements DoCheck, OnDestroy, OnInit {
    private differs;
    private zone;
    baseLayersValue: {
        [name: string]: Layer;
    };
    baseLayersDiffer: KeyValueDiffer<string, Layer>;
    baseLayers: {
        [name: string]: Layer;
    };
    layersControlOptions: Control.LayersOptions;
    baseLayer: Layer;
    private leafletDirective;
    private controlLayers;
    constructor(leafletDirective: LeafletDirective, differs: KeyValueDiffers, zone: NgZone);
    ngOnDestroy(): void;
    ngOnInit(): void;
    ngDoCheck(): void;
    protected updateBaseLayers(): void;
    /**
     * Check the current base layer and change it to the new one if necessary
     */
    protected syncBaseLayer(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LeafletBaseLayersDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LeafletBaseLayersDirective, "[leafletBaseLayers]", never, { "baseLayers": "leafletBaseLayers"; "layersControlOptions": "leafletLayersControlOptions"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZmxldC1iYXNlbGF5ZXJzLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJsZWFmbGV0LWJhc2VsYXllcnMuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9DaGVjaywgS2V5VmFsdWVEaWZmZXIsIEtleVZhbHVlRGlmZmVycywgTmdab25lLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbCwgTGF5ZXIgfSBmcm9tICdsZWFmbGV0JztcbmltcG9ydCB7IExlYWZsZXREaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9jb3JlL2xlYWZsZXQuZGlyZWN0aXZlJztcbi8qKlxuICogQmFzZWxheWVycyBkaXJlY3RpdmVcbiAqXG4gKiBUaGlzIGRpcmVjdGl2ZSBpcyBwcm92aWRlZCBhcyBhIGNvbnZlbmllbnQgd2F5IHRvIGFkZCBiYXNlbGF5ZXJzIHRvIHRoZSBtYXAuIFRoZSBpbnB1dCBhY2NlcHRzXG4gKiBhIGtleS12YWx1ZSBtYXAgb2YgbGF5ZXIgbmFtZSAtPiBsYXllci4gTXV0YWJsZSBjaGFuZ2VkIGFyZSBkZXRlY3RlZC4gT24gY2hhbmdlcywgYSBkaWZmZXIgaXNcbiAqIHVzZWQgdG8gZGV0ZXJtaW5lIHdoYXQgY2hhbmdlZCBzbyB0aGF0IGxheWVycyBhcmUgYXBwcm9wcmlhdGVseSBhZGRlZCBvciByZW1vdmVkLiBUaGlzIGRpcmVjdGl2ZVxuICogd2lsbCBhbHNvIGFkZCB0aGUgbGF5ZXJzIGNvbnRyb2wgc28gdXNlcnMgY2FuIHN3aXRjaCBiZXR3ZWVuIGF2YWlsYWJsZSBiYXNlIGxheWVycy5cbiAqXG4gKiBUbyBzcGVjaWZ5IHdoaWNoIGxheWVyIHRvIHNob3cgYXMgdGhlICdhY3RpdmUnIGJhc2VsYXllciwgeW91IHdpbGwgd2FudCB0byBhZGQgaXQgdG8gdGhlIG1hcFxuICogdXNpbmcgdGhlIGxheWVycyBkaXJlY3RpdmUuIE90aGVyd2lzZSwgdGhlIHBsdWdpbiB3aWxsIHVzZSB0aGUgbGFzdCBvbmUgaXQgc2Vlcy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTGVhZmxldEJhc2VMYXllcnNEaXJlY3RpdmUgaW1wbGVtZW50cyBEb0NoZWNrLCBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBkaWZmZXJzO1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBiYXNlTGF5ZXJzVmFsdWU6IHtcbiAgICAgICAgW25hbWU6IHN0cmluZ106IExheWVyO1xuICAgIH07XG4gICAgYmFzZUxheWVyc0RpZmZlcjogS2V5VmFsdWVEaWZmZXI8c3RyaW5nLCBMYXllcj47XG4gICAgYmFzZUxheWVyczoge1xuICAgICAgICBbbmFtZTogc3RyaW5nXTogTGF5ZXI7XG4gICAgfTtcbiAgICBsYXllcnNDb250cm9sT3B0aW9uczogQ29udHJvbC5MYXllcnNPcHRpb25zO1xuICAgIGJhc2VMYXllcjogTGF5ZXI7XG4gICAgcHJpdmF0ZSBsZWFmbGV0RGlyZWN0aXZlO1xuICAgIHByaXZhdGUgY29udHJvbExheWVycztcbiAgICBjb25zdHJ1Y3RvcihsZWFmbGV0RGlyZWN0aXZlOiBMZWFmbGV0RGlyZWN0aXZlLCBkaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMsIHpvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVCYXNlTGF5ZXJzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIGN1cnJlbnQgYmFzZSBsYXllciBhbmQgY2hhbmdlIGl0IHRvIHRoZSBuZXcgb25lIGlmIG5lY2Vzc2FyeVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBzeW5jQmFzZUxheWVyKCk6IHZvaWQ7XG59XG4iXX0=