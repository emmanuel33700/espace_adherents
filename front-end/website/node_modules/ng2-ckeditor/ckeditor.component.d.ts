import { EventEmitter, NgZone, QueryList, AfterViewInit, SimpleChanges, OnChanges } from '@angular/core';
import { CKButtonDirective } from './ckbutton.directive';
import { CKGroupDirective } from './ckgroup.directive';
/**
 * CKEditor component
 * Usage :
 *  <ckeditor [(ngModel)]="data" [config]="{...}" debounce="500"></ckeditor>
 */
import * as ɵngcc0 from '@angular/core';
export declare class CKEditorComponent implements OnChanges, AfterViewInit {
    private zone;
    config: any;
    readonly: boolean;
    debounce: string;
    change: EventEmitter<any>;
    editorChange: EventEmitter<any>;
    ready: EventEmitter<any>;
    blur: EventEmitter<any>;
    focus: EventEmitter<any>;
    contentDom: EventEmitter<any>;
    fileUploadRequest: EventEmitter<any>;
    fileUploadResponse: EventEmitter<any>;
    paste: EventEmitter<any>;
    drop: EventEmitter<any>;
    host: any;
    toolbarButtons: QueryList<CKButtonDirective>;
    toolbarGroups: QueryList<CKGroupDirective>;
    _value: string;
    instance: any;
    debounceTimeout: any;
    /**
     * Constructor
     */
    constructor(zone: NgZone);
    get value(): any;
    set value(v: any);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * On component destroy
     */
    ngOnDestroy(): void;
    /**
     * On component view init
     */
    ngAfterViewInit(): void;
    /**
     * On component view checked
     */
    ngAfterViewChecked(): void;
    /**
     * Value update process
     */
    updateValue(value: any): void;
    /**
     * CKEditor init
     */
    ckeditorInit(config: any): void;
    /**
     * Implements ControlValueAccessor
     */
    writeValue(value: any): void;
    onChange(_: any): void;
    onTouched(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private documentContains;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CKEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CKEditorComponent, "ckeditor", never, { "value": "value"; "config": "config"; "readonly": "readonly"; "debounce": "debounce"; }, { "change": "change"; "editorChange": "editorChange"; "ready": "ready"; "blur": "blur"; "focus": "focus"; "contentDom": "contentDom"; "fileUploadRequest": "fileUploadRequest"; "fileUploadResponse": "fileUploadResponse"; "paste": "paste"; "drop": "drop"; }, ["toolbarButtons", "toolbarGroups"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2tlZGl0b3IuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNrZWRpdG9yLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgUXVlcnlMaXN0LCBBZnRlclZpZXdJbml0LCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENLQnV0dG9uRGlyZWN0aXZlIH0gZnJvbSAnLi9ja2J1dHRvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQ0tHcm91cERpcmVjdGl2ZSB9IGZyb20gJy4vY2tncm91cC5kaXJlY3RpdmUnO1xuLyoqXG4gKiBDS0VkaXRvciBjb21wb25lbnRcbiAqIFVzYWdlIDpcbiAqICA8Y2tlZGl0b3IgWyhuZ01vZGVsKV09XCJkYXRhXCIgW2NvbmZpZ109XCJ7Li4ufVwiIGRlYm91bmNlPVwiNTAwXCI+PC9ja2VkaXRvcj5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ0tFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQge1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBjb25maWc6IGFueTtcbiAgICByZWFkb25seTogYm9vbGVhbjtcbiAgICBkZWJvdW5jZTogc3RyaW5nO1xuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZWRpdG9yQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICByZWFkeTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNvbnRlbnREb206IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGZpbGVVcGxvYWRSZXF1ZXN0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBmaWxlVXBsb2FkUmVzcG9uc2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHBhc3RlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBkcm9wOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBob3N0OiBhbnk7XG4gICAgdG9vbGJhckJ1dHRvbnM6IFF1ZXJ5TGlzdDxDS0J1dHRvbkRpcmVjdGl2ZT47XG4gICAgdG9vbGJhckdyb3VwczogUXVlcnlMaXN0PENLR3JvdXBEaXJlY3RpdmU+O1xuICAgIF92YWx1ZTogc3RyaW5nO1xuICAgIGluc3RhbmNlOiBhbnk7XG4gICAgZGVib3VuY2VUaW1lb3V0OiBhbnk7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih6b25lOiBOZ1pvbmUpO1xuICAgIGdldCB2YWx1ZSgpOiBhbnk7XG4gICAgc2V0IHZhbHVlKHY6IGFueSk7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogT24gY29tcG9uZW50IGRlc3Ryb3lcbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9uIGNvbXBvbmVudCB2aWV3IGluaXRcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBPbiBjb21wb25lbnQgdmlldyBjaGVja2VkXG4gICAgICovXG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVmFsdWUgdXBkYXRlIHByb2Nlc3NcbiAgICAgKi9cbiAgICB1cGRhdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDS0VkaXRvciBpbml0XG4gICAgICovXG4gICAgY2tlZGl0b3JJbml0KGNvbmZpZzogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yXG4gICAgICovXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICBvbkNoYW5nZShfOiBhbnkpOiB2b2lkO1xuICAgIG9uVG91Y2hlZCgpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBkb2N1bWVudENvbnRhaW5zO1xufVxuIl19