{"version":3,"file":"token-storage.js","sourceRoot":"","sources":["../../../../../../.ng_build/auth/services/token/token-storage.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAG3C,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAEvD,MAAM,OAAgB,cAAc;CAKnC;AAED;;;;;;;;;;;;;;GAcG;AAEH,IAAa,mBAAmB,GAAhC,MAAa,mBAAoB,SAAQ,cAAc;IAIrD,YAAoB,QAA6B;QAC/C,KAAK,EAAE,CAAC;QADU,aAAQ,GAAR,QAAQ,CAAqB;QAFvC,QAAG,GAAG,gBAAgB,CAAC;IAIjC,CAAC;IAED;;;OAGG;IACH,GAAG;QACD,MAAM,GAAG,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;IAED;;;OAGG;IACH,GAAG,CAAC,KAAkB;QACpB,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,KAAK;QACH,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;CACF,CAAA;AAhCY,mBAAmB;IAD/B,UAAU,EAAE;qCAKmB,mBAAmB;GAJtC,mBAAmB,CAgC/B;SAhCY,mBAAmB","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { NbAuthToken } from './token';\nimport { NbAuthTokenParceler } from './token-parceler';\n\nexport abstract class NbTokenStorage {\n\n  abstract get(): NbAuthToken;\n  abstract set(token: NbAuthToken);\n  abstract clear();\n}\n\n/**\n * Service that uses browser localStorage as a storage.\n *\n * The token storage is provided into auth module the following way:\n * ```ts\n * { provide: NbTokenStorage, useClass: NbTokenLocalStorage },\n * ```\n *\n * If you need to change the storage behaviour or provide your own - just extend your class from basic `NbTokenStorage`\n * or `NbTokenLocalStorage` and provide in your `app.module`:\n * ```ts\n * { provide: NbTokenStorage, useClass: NbTokenCustomStorage },\n * ```\n *\n */\n@Injectable()\nexport class NbTokenLocalStorage extends NbTokenStorage {\n\n  protected key = 'auth_app_token';\n\n  constructor(private parceler: NbAuthTokenParceler) {\n    super();\n  }\n\n  /**\n   * Returns token from localStorage\n   * @returns {NbAuthToken}\n   */\n  get(): NbAuthToken {\n    const raw = localStorage.getItem(this.key);\n    return this.parceler.unwrap(raw);\n  }\n\n  /**\n   * Sets token to localStorage\n   * @param {NbAuthToken} token\n   */\n  set(token: NbAuthToken) {\n    const raw = this.parceler.wrap(token);\n    localStorage.setItem(this.key, raw);\n  }\n\n  /**\n   * Clears token from localStorage\n   */\n  clear() {\n    localStorage.removeItem(this.key);\n  }\n}\n"]}