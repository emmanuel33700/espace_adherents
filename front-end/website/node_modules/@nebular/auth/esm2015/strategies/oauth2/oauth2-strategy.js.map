{"version":3,"file":"oauth2-strategy.js","sourceRoot":"","sources":["../../../../../../.ng_build/auth/strategies/oauth2/oauth2-strategy.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { NB_WINDOW } from '@nebular/theme';\n\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { NbAuthIllegalTokenError, NbAuthRefreshableToken, NbAuthToken } from '../../services/token/token';\nimport { NbAuthResult } from '../../services/auth-result';\nimport {\n  NbOAuth2AuthStrategyOptions,\n  NbOAuth2ResponseType,\n  auth2StrategyOptions,\n  NbOAuth2GrantType, NbOAuth2ClientAuthMethod,\n} from './oauth2-strategy.options';\nimport { NbAuthStrategyClass } from '../../auth.options';\n\n\n/**\n * OAuth2 authentication strategy.\n *\n * Strategy settings:\n *\n * ```ts\n * export enum NbOAuth2ResponseType {\n *   CODE = 'code',\n *   TOKEN = 'token',\n * }\n *\n * export enum NbOAuth2GrantType {\n *   AUTHORIZATION_CODE = 'authorization_code',\n *   PASSWORD = 'password',\n *   REFRESH_TOKEN = 'refresh_token',\n * }\n *\n * export class NbOAuth2AuthStrategyOptions {\n *   name: string;\n *   baseEndpoint?: string = '';\n *   clientId: string = '';\n *   clientSecret: string = '';\n *   clientAuthMethod: string = NbOAuth2ClientAuthMethod.NONE;\n *   redirect?: { success?: string; failure?: string } = {\n *     success: '/',\n *     failure: null,\n *   };\n *   defaultErrors?: any[] = ['Something went wrong, please try again.'];\n *   defaultMessages?: any[] = ['You have been successfully authenticated.'];\n *   authorize?: {\n *     endpoint?: string;\n *     redirectUri?: string;\n *     responseType?: string;\n *     requireValidToken: true,\n *     scope?: string;\n *     state?: string;\n *     params?: { [key: string]: string };\n *   } = {\n *     endpoint: 'authorize',\n *     responseType: NbOAuth2ResponseType.CODE,\n *   };\n *   token?: {\n *     endpoint?: string;\n *     grantType?: string;\n *     requireValidToken: true,\n *     redirectUri?: string;\n *     scope?: string;\n *     class: NbAuthTokenClass,\n *   } = {\n *     endpoint: 'token',\n *     grantType: NbOAuth2GrantType.AUTHORIZATION_CODE,\n *     class: NbAuthOAuth2Token,\n *   };\n *   refresh?: {\n *     endpoint?: string;\n *     grantType?: string;\n *     scope?: string;\n *     requireValidToken: true,\n *   } = {\n *     endpoint: 'token',\n *     grantType: NbOAuth2GrantType.REFRESH_TOKEN,\n *   };\n * }\n * ```\n *\n */\n@Injectable()\nexport class NbOAuth2AuthStrategy extends NbAuthStrategy {\n\n  static setup(options: NbOAuth2AuthStrategyOptions): [NbAuthStrategyClass, NbOAuth2AuthStrategyOptions] {\n    return [NbOAuth2AuthStrategy, options];\n  }\n\n  get responseType() {\n    return this.getOption('authorize.responseType');\n  }\n\n  get clientAuthMethod() {\n    return this.getOption('clientAuthMethod');\n  }\n\n  protected redirectResultHandlers: { [key: string]: Function } = {\n    [NbOAuth2ResponseType.CODE]: () => {\n      return observableOf(this.route.snapshot.queryParams).pipe(\n        switchMap((params: any) => {\n          if (params.code) {\n            return this.requestToken(params.code)\n          }\n\n          return observableOf(\n            new NbAuthResult(\n              false,\n              params,\n              this.getOption('redirect.failure'),\n              this.getOption('defaultErrors'),\n              [],\n            ));\n        }),\n      );\n    },\n    [NbOAuth2ResponseType.TOKEN]: () => {\n      const module = 'authorize';\n      const requireValidToken = this.getOption(`${module}.requireValidToken`);\n      return observableOf(this.route.snapshot.fragment).pipe(\n        map(fragment => this.parseHashAsQueryParams(fragment)),\n        map((params: any) => {\n          if (!params.error) {\n            return new NbAuthResult(\n              true,\n              params,\n              this.getOption('redirect.success'),\n              [],\n              this.getOption('defaultMessages'),\n              this.createToken(params, requireValidToken));\n          }\n          return new NbAuthResult(\n            false,\n            params,\n            this.getOption('redirect.failure'),\n            this.getOption('defaultErrors'),\n            [],\n          );\n        }),\n        catchError(err => {\n          const errors = [];\n          if (err instanceof NbAuthIllegalTokenError) {\n            errors.push(err.message)\n          } else {\n            errors.push('Something went wrong.');\n          }\n          return observableOf(\n            new NbAuthResult(\n              false,\n              err,\n              this.getOption('redirect.failure'),\n              errors,\n            ));\n        }),\n      );\n    },\n  };\n\n  protected redirectResults: { [key: string]: Function } = {\n    [NbOAuth2ResponseType.CODE]: () => {\n      return observableOf(this.route.snapshot.queryParams).pipe(\n        map((params: any) => !!(params && (params.code || params.error))),\n      );\n    },\n    [NbOAuth2ResponseType.TOKEN]: () => {\n      return observableOf(this.route.snapshot.fragment).pipe(\n        map(fragment => this.parseHashAsQueryParams(fragment)),\n        map((params: any) => !!(params && (params.access_token || params.error))),\n      );\n    },\n  };\n\n  protected defaultOptions: NbOAuth2AuthStrategyOptions = auth2StrategyOptions;\n\n  constructor(protected http: HttpClient,\n              protected route: ActivatedRoute,\n              @Inject(NB_WINDOW) protected window: any) {\n    super();\n  }\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n\n    if (this.getOption('token.grantType') === NbOAuth2GrantType.PASSWORD) {\n      return this.passwordToken(data.email, data.password)\n    } else {\n      return this.isRedirectResult()\n        .pipe(\n          switchMap((result: boolean) => {\n            if (!result) {\n              this.authorizeRedirect();\n              return observableOf(new NbAuthResult(true));\n            }\n            return this.getAuthorizationResult();\n          }),\n        );\n    }\n  }\n\n  getAuthorizationResult(): Observable<any> {\n    const redirectResultHandler = this.redirectResultHandlers[this.responseType];\n    if (redirectResultHandler) {\n      return redirectResultHandler.call(this);\n    }\n\n    throw new Error(`'${this.responseType}' responseType is not supported,\n                      only 'token' and 'code' are supported now`);\n  }\n\n  refreshToken(token: NbAuthRefreshableToken): Observable<NbAuthResult> {\n    const module = 'refresh';\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n\n    let headers = this.buildAuthHeader() || new HttpHeaders() ;\n    headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.http.post(url, this.buildRefreshRequestData(token), { headers: headers })\n      .pipe(\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption('redirect.success'),\n            [],\n            this.getOption('defaultMessages'),\n            this.createRefreshedToken(res, token, requireValidToken));\n        }),\n        catchError((res) => this.handleResponseError(res)),\n      );\n  }\n\n  passwordToken(username: string, password: string): Observable<NbAuthResult> {\n    const module = 'token';\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n\n    let headers = this.buildAuthHeader() || new HttpHeaders() ;\n    headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.http.post(url, this.buildPasswordRequestData(username, password), { headers: headers })\n      .pipe(\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption('redirect.success'),\n            [],\n            this.getOption('defaultMessages'),\n            this.createToken(res, requireValidToken));\n        }),\n        catchError((res) => this.handleResponseError(res)),\n      );\n  }\n\n  protected authorizeRedirect() {\n    this.window.location.href = this.buildRedirectUrl();\n  }\n\n  protected isRedirectResult(): Observable<boolean> {\n    return this.redirectResults[this.responseType].call(this);\n  }\n\n  protected requestToken(code: string) {\n\n    const module = 'token';\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n\n    let headers = this.buildAuthHeader() || new HttpHeaders() ;\n    headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.http.post(url, this.buildCodeRequestData(code), { headers: headers })\n      .pipe(\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption('redirect.success'),\n            [],\n            this.getOption('defaultMessages'),\n            this.createToken(res, requireValidToken));\n        }),\n        catchError((res) => this.handleResponseError(res)),\n      );\n  }\n\n  protected buildCodeRequestData(code: string): any {\n    const params = {\n      grant_type: this.getOption('token.grantType'),\n      code: code,\n      redirect_uri: this.getOption('token.redirectUri'),\n      client_id: this.getOption('clientId'),\n    };\n    return this.urlEncodeParameters(this.cleanParams(this.addCredentialsToParams(params)));\n  }\n\n  protected buildRefreshRequestData(token: NbAuthRefreshableToken): any {\n    const params = {\n      grant_type: this.getOption('refresh.grantType'),\n      refresh_token: token.getRefreshToken(),\n      scope: this.getOption('refresh.scope'),\n    };\n    return this.urlEncodeParameters(this.cleanParams(this.addCredentialsToParams(params)));\n  }\n\n  protected buildPasswordRequestData(username: string, password: string ): string {\n    const params = {\n      grant_type: this.getOption('token.grantType'),\n      username: username,\n      password: password,\n      scope: this.getOption('token.scope'),\n    };\n    return this.urlEncodeParameters(this.cleanParams(this.addCredentialsToParams(params)));\n  }\n\n  protected buildAuthHeader(): any {\n    if (this.clientAuthMethod === NbOAuth2ClientAuthMethod.BASIC) {\n      if (this.getOption('clientId') && this.getOption('clientSecret')) {\n        return new HttpHeaders(\n            {\n              'Authorization': 'Basic ' + btoa(\n                this.getOption('clientId') + ':' + this.getOption('clientSecret')),\n            },\n          );\n      } else {\n        throw Error('For basic client authentication method, please provide both clientId & clientSecret.');\n      }\n    }\n  }\n\n  protected cleanParams(params: any): any {\n    Object.entries(params)\n      .forEach(([key, val]) => !val && delete params[key]);\n    return params;\n  }\n\n  protected addCredentialsToParams(params: any): any {\n    if (this.clientAuthMethod === NbOAuth2ClientAuthMethod.REQUEST_BODY) {\n      if (this.getOption('clientId') && this.getOption('clientSecret')) {\n        return {\n          ... params,\n          client_id: this.getOption('clientId'),\n          client_secret: this.getOption('clientSecret'),\n        }\n      } else {\n        throw Error('For request body client authentication method, please provide both clientId & clientSecret.')\n      }\n    }\n    return params;\n  }\n\n\n  protected handleResponseError(res: any): Observable<NbAuthResult> {\n    let errors = [];\n    if (res instanceof HttpErrorResponse) {\n      if (res.error.error_description) {\n        errors.push(res.error.error_description);\n      } else {\n        errors = this.getOption('defaultErrors');\n      }\n    }  else if (res instanceof NbAuthIllegalTokenError ) {\n      errors.push(res.message)\n    } else {\n        errors.push('Something went wrong.')\n    };\n\n    return observableOf(\n      new NbAuthResult(\n        false,\n        res,\n        this.getOption('redirect.failure'),\n        errors,\n        [],\n      ));\n  }\n\n  protected buildRedirectUrl() {\n    const params = {\n      response_type: this.getOption('authorize.responseType'),\n      client_id: this.getOption('clientId'),\n      redirect_uri: this.getOption('authorize.redirectUri'),\n      scope: this.getOption('authorize.scope'),\n      state: this.getOption('authorize.state'),\n\n      ...this.getOption('authorize.params'),\n    };\n\n    const endpoint = this.getActionEndpoint('authorize');\n    const query = this.urlEncodeParameters(this.cleanParams(params));\n\n    return `${endpoint}?${query}`;\n  }\n\n  protected parseHashAsQueryParams(hash: string): { [key: string]: string } {\n    return hash ? hash.split('&').reduce((acc: any, part: string) => {\n      const item = part.split('=');\n      acc[item[0]] = decodeURIComponent(item[1]);\n      return acc;\n    }, {}) : {};\n  }\n\n  protected urlEncodeParameters(params: any): string {\n    return Object.keys(params).map((k) => {\n      return `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`;\n    }).join('&');\n  }\n\n  protected createRefreshedToken(res, existingToken: NbAuthRefreshableToken, requireValidToken: boolean): NbAuthToken {\n    type AuthRefreshToken = NbAuthRefreshableToken & NbAuthToken;\n\n    const refreshedToken: AuthRefreshToken = this.createToken<AuthRefreshToken>(res, requireValidToken);\n    if (!refreshedToken.getRefreshToken() && existingToken.getRefreshToken()) {\n      refreshedToken.setRefreshToken(existingToken.getRefreshToken());\n    }\n    return refreshedToken;\n  }\n\n  register(data?: any): Observable<NbAuthResult> {\n    throw new Error('`register` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n  }\n\n  requestPassword(data?: any): Observable<NbAuthResult> {\n    throw new Error('`requestPassword` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n  }\n\n  resetPassword(data: any = {}): Observable<NbAuthResult> {\n    throw new Error('`resetPassword` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n  }\n\n  logout(): Observable<NbAuthResult> {\n    return observableOf(new NbAuthResult(true));\n  }\n}\n"]}