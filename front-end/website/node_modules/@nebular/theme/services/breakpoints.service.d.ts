/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Media breakpoint type
 *
 * Where `name` - breakpoint name alias (e.g. xs, sm, md, etc), and width - min breakpoint width
 */
import * as ɵngcc0 from '@angular/core';
export interface NbMediaBreakpoint {
    name: string;
    width: number;
}
export declare const DEFAULT_MEDIA_BREAKPOINTS: {
    name: string;
    width: number;
}[];
/**
 * Manages media breakpoints
 *
 * Provides access to available media breakpoints to convert window width to a configured breakpoint,
 * e.g. 200px - *xs* breakpoint
 */
export declare class NbMediaBreakpointsService {
    private breakpoints;
    private breakpointsMap;
    constructor(breakpoints: any);
    /**
     * Returns a configured breakpoint by width
     * @param width number
     * @returns {Z|{name: string, width: number}}
     */
    getByWidth(width: number): NbMediaBreakpoint;
    /**
     * Returns a configured breakpoint by name
     * @param name string
     * @returns NbMediaBreakpoint
     */
    getByName(name: string): NbMediaBreakpoint;
    /**
     * Returns a list of configured breakpoints for the theme
     * @returns NbMediaBreakpoint[]
     */
    getBreakpoints(): NbMediaBreakpoint[];
    /**
     * Returns a map of configured breakpoints for the theme
     * @returns {[p: string]: number}
     */
    getBreakpointsMap(): {
        [breakpoint: string]: number;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbMediaBreakpointsService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbMediaBreakpointsService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWtwb2ludHMuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJicmVha3BvaW50cy5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMENBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuLyoqXG4gKiBNZWRpYSBicmVha3BvaW50IHR5cGVcbiAqXG4gKiBXaGVyZSBgbmFtZWAgLSBicmVha3BvaW50IG5hbWUgYWxpYXMgKGUuZy4geHMsIHNtLCBtZCwgZXRjKSwgYW5kIHdpZHRoIC0gbWluIGJyZWFrcG9pbnQgd2lkdGhcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOYk1lZGlhQnJlYWtwb2ludCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHdpZHRoOiBudW1iZXI7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBERUZBVUxUX01FRElBX0JSRUFLUE9JTlRTOiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHdpZHRoOiBudW1iZXI7XG59W107XG4vKipcbiAqIE1hbmFnZXMgbWVkaWEgYnJlYWtwb2ludHNcbiAqXG4gKiBQcm92aWRlcyBhY2Nlc3MgdG8gYXZhaWxhYmxlIG1lZGlhIGJyZWFrcG9pbnRzIHRvIGNvbnZlcnQgd2luZG93IHdpZHRoIHRvIGEgY29uZmlndXJlZCBicmVha3BvaW50LFxuICogZS5nLiAyMDBweCAtICp4cyogYnJlYWtwb2ludFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYk1lZGlhQnJlYWtwb2ludHNTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGJyZWFrcG9pbnRzO1xuICAgIHByaXZhdGUgYnJlYWtwb2ludHNNYXA7XG4gICAgY29uc3RydWN0b3IoYnJlYWtwb2ludHM6IGFueSk7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGNvbmZpZ3VyZWQgYnJlYWtwb2ludCBieSB3aWR0aFxuICAgICAqIEBwYXJhbSB3aWR0aCBudW1iZXJcbiAgICAgKiBAcmV0dXJucyB7Wnx7bmFtZTogc3RyaW5nLCB3aWR0aDogbnVtYmVyfX1cbiAgICAgKi9cbiAgICBnZXRCeVdpZHRoKHdpZHRoOiBudW1iZXIpOiBOYk1lZGlhQnJlYWtwb2ludDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgY29uZmlndXJlZCBicmVha3BvaW50IGJ5IG5hbWVcbiAgICAgKiBAcGFyYW0gbmFtZSBzdHJpbmdcbiAgICAgKiBAcmV0dXJucyBOYk1lZGlhQnJlYWtwb2ludFxuICAgICAqL1xuICAgIGdldEJ5TmFtZShuYW1lOiBzdHJpbmcpOiBOYk1lZGlhQnJlYWtwb2ludDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBjb25maWd1cmVkIGJyZWFrcG9pbnRzIGZvciB0aGUgdGhlbWVcbiAgICAgKiBAcmV0dXJucyBOYk1lZGlhQnJlYWtwb2ludFtdXG4gICAgICovXG4gICAgZ2V0QnJlYWtwb2ludHMoKTogTmJNZWRpYUJyZWFrcG9pbnRbXTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbWFwIG9mIGNvbmZpZ3VyZWQgYnJlYWtwb2ludHMgZm9yIHRoZSB0aGVtZVxuICAgICAqIEByZXR1cm5zIHtbcDogc3RyaW5nXTogbnVtYmVyfVxuICAgICAqL1xuICAgIGdldEJyZWFrcG9pbnRzTWFwKCk6IHtcbiAgICAgICAgW2JyZWFrcG9pbnQ6IHN0cmluZ106IG51bWJlcjtcbiAgICB9O1xufVxuIl19