{"version":3,"file":"ruler.service.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/services/ruler.service.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,OAAO,EAAc,MAAM,MAAM,CAAC;AAgCvD;;;;;GAKG;AAEH,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IAAjC;QAEU,0BAAqB,GAAG,IAAI,OAAO,EAAE,CAAC;IAuBhD,CAAC;IArBC;;;OAGG;IACH,aAAa;QACX,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,QAAwC,EAAE,EAAE;YACpE,MAAM,QAAQ,GAAG,IAAI,OAAO,EAAsB,CAAC;YACnD,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7B,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;YAE9C,OAAO,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,eAAe;QACb,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACpC,CAAC;CACF,CAAA;AAzBY,oBAAoB;IADhC,UAAU,EAAE;GACA,oBAAoB,CAyBhC;SAzBY,oBAAoB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject, Subscriber } from 'rxjs';\n\n/**\n * Layout dimensions type\n */\nexport interface NbLayoutDimensions {\n\n  /**\n   * clientWidth\n   * @type {number}\n   */\n  clientWidth: number;\n\n  /**\n   * clientHeight\n   * @type {number}\n   */\n  clientHeight: number;\n\n  /**\n   * scrollWidth\n   * @type {number}\n   */\n  scrollWidth: number;\n\n  /**\n   * scrollHeight\n   * @type {number}\n   */\n  scrollHeight: number;\n}\n\n/**\n * Simple helper service to return Layout dimensions\n * Depending of current Layout scroll mode (default or `withScroll` when scroll is moved to an element\n * inside of the layout) corresponding dimensions will be returns  - of `documentElement` in first case and\n * `.scrollable-container` in the second.\n */\n@Injectable()\nexport class NbLayoutRulerService {\n\n  private contentDimensionsReq$ = new Subject();\n\n  /**\n   * Content dimensions\n   * @returns {Observable<NbLayoutDimensions>}\n   */\n  getDimensions(): Observable<NbLayoutDimensions> {\n    return Observable.create((observer: Subscriber<NbLayoutDimensions>) => {\n      const listener = new Subject<NbLayoutDimensions>();\n      listener.subscribe(observer);\n      this.contentDimensionsReq$.next({ listener });\n\n      return () => listener.complete();\n    });\n  }\n\n  /**\n   * @private\n   * @returns {Subject<any>}\n   */\n  onGetDimensions(): Subject<any> {\n    return this.contentDimensionsReq$;\n  }\n}\n"]}