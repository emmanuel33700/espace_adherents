{"version":3,"file":"tree-grid-sort.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tree-grid/tree-grid-sort.component.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EACL,SAAS,EACT,YAAY,EACZ,SAAS,EACT,YAAY,EACZ,WAAW,EACX,YAAY,EACZ,MAAM,EACN,KAAK,EACL,MAAM,EACN,WAAW,GACZ,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,qBAAqB,EAAmC,MAAM,YAAY,CAAC;AACpF,OAAO,EAAE,yBAAyB,EAAE,MAAM,mBAAmB,CAAC;AAiB9D,MAAM,CAAN,IAAY,eAIX;AAJD,WAAY,eAAe;IACzB,oCAAiB,CAAA;IACjB,sCAAmB,CAAA;IACnB,4BAAS,CAAA;AACX,CAAC,EAJW,eAAe,KAAf,eAAe,QAI1B;AACD,MAAM,cAAc,GAAsB;IACxC,eAAe,CAAC,SAAS;IACzB,eAAe,CAAC,UAAU;IAC1B,eAAe,CAAC,IAAI;CACrB,CAAC;AAEF;;GAEG;AAEH,IAAa,eAAe,GAA5B,MAAa,eAAe;IAA5B;QAIY,SAAI,GAAgC,IAAI,YAAY,EAAiB,CAAC;IAQlF,CAAC;IANC,QAAQ,CAAC,WAA0B;QACjC,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YACvC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACjC;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9B,CAAC;CACF,CAAA;AAXkB;IAAhB,KAAK,CAAC,QAAQ,CAAC;;iDAAsB;AAG5B;IAAT,MAAM,EAAE;8BAAO,YAAY;6CAAoD;AAJrE,eAAe;IAD3B,SAAS,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC;GACvB,eAAe,CAY3B;SAZY,eAAe;AAqB5B;;;;GAIG;AAEH,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;CAAG,CAAA;AAA5B,yBAAyB;IADrC,SAAS,CAAC,EAAE,QAAQ,EAAE,oBAAoB,EAAE,CAAC;GACjC,yBAAyB,CAAG;SAA5B,yBAAyB;AAWtC,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAAhC;QACW,cAAS,GAAoB,eAAe,CAAC,IAAI,CAAC;IAa7D,CAAC;IAXC,WAAW;QACT,OAAO,IAAI,CAAC,SAAS,KAAK,eAAe,CAAC,SAAS,CAAC;IACtD,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,SAAS,KAAK,eAAe,CAAC,UAAU,CAAC;IACvD,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;IACnD,CAAC;CACF,CAAA;AAbU;IAAR,KAAK,EAAE;;sDAAmD;AADhD,mBAAmB;IAT/B,SAAS,CAAC;QACT,QAAQ,EAAE,cAAc;QACxB,QAAQ,EAAE;;;;;GAKT;KACF,CAAC;GACW,mBAAmB,CAc/B;SAdY,mBAAmB;AAgBhC;;GAEG;AAeH,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;IAkChC,YACU,IAAqB,EACc,SAAgC;QADnE,SAAI,GAAJ,IAAI,CAAiB;QACc,cAAS,GAAT,SAAS,CAAuB;QAxBrE,kBAAa,GAAY,KAAK,CAAC;IAyBpC,CAAC;IAvBJ;;OAEG;IAGH,IAAI,QAAQ,CAAC,KAAK;QAChB,IAAI,CAAC,aAAa,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;IACD,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAID,aAAa;QACX,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB;IACH,CAAC;IAOD,WAAW;QACT,OAAO,IAAI,CAAC,SAAS,KAAK,eAAe,CAAC,SAAS,CAAC;IACtD,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,SAAS,KAAK,eAAe,CAAC,UAAU,CAAC;IACvD,CAAC;IAED,QAAQ;QACN,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IAClC,CAAC;IAED,cAAc;QACZ,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE;YAC/B,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE;YACjC,MAAM,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;SACpD,CAAC;IACJ,CAAC;IAED,yBAAyB;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACnC,CAAC;IAEO,iBAAiB;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACzC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;IACpE,CAAC;IAEO,gBAAgB;QACtB,MAAM,kBAAkB,GAAG,cAAc,CAAC;QAC1C,IAAI,kBAAkB,GAAG,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACxE,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,EAAE;YACnD,kBAAkB,GAAG,CAAC,CAAC;SACxB;QACD,OAAO,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;IAChD,CAAC;CACF,CAAA;AA3EC;IADC,YAAY,CAAC,yBAAyB,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;8BACrD,WAAW;uDAAmC;AAMjC;IAAtB,KAAK,CAAC,cAAc,CAAC;;wDAA4B;AAUlD;IAFC,KAAK,EAAE;IACP,WAAW,CAAC,gBAAgB,CAAC;;;qDAG7B;AAOD;IADC,YAAY,CAAC,OAAO,CAAC;;;;0DAKrB;AAhCU,qBAAqB;IAdjC,SAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,QAAQ,EAAE;;;;;;;;;;GAUT;KACF,CAAC;IAqCG,WAAA,MAAM,CAAC,yBAAyB,CAAC,CAAA;qCADpB,eAAe;GAnCpB,qBAAqB,CA8EjC;SA9EY,qBAAqB","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  Output,\n  TemplateRef,\n} from '@angular/core';\n\nimport { convertToBoolProperty, NbBooleanInput, NbNullableInput } from '../helpers';\nimport { NB_SORT_HEADER_COLUMN_DEF } from '../cdk/table/cell';\n\n/** Column definition associated with a `NbSortHeaderDirective`. */\ninterface NbSortHeaderColumnDef {\n  name: string;\n}\n\nexport interface NbSortRequest {\n  column: string;\n  direction: NbSortDirection;\n}\n\nexport interface NbSortable {\n  sort(sortRequest: NbSortRequest);\n}\n\nexport type NbSortDirectionValues = 'asc' | 'desc' | '';\nexport enum NbSortDirection {\n  ASCENDING = 'asc',\n  DESCENDING = 'desc',\n  NONE = '',\n}\nconst sortDirections: NbSortDirection[] = [\n  NbSortDirection.ASCENDING,\n  NbSortDirection.DESCENDING,\n  NbSortDirection.NONE,\n];\n\n/**\n * Directive triggers sort method of passed object when sort header changes direction\n */\n@Directive({ selector: '[nbSort]' })\nexport class NbSortDirective {\n  @Input('nbSort') sortable: NbSortable;\n  static ngAcceptInputType_sortable: NbSortable | NbNullableInput;\n\n  @Output() sort: EventEmitter<NbSortRequest> = new EventEmitter<NbSortRequest>();\n\n  emitSort(sortRequest: NbSortRequest) {\n    if (this.sortable && this.sortable.sort) {\n      this.sortable.sort(sortRequest);\n    }\n    this.sort.emit(sortRequest);\n  }\n}\n\nexport interface NbSortHeaderIconDirectiveContext {\n  $implicit: NbSortDirection;\n  isAscending: boolean;\n  isDescending: boolean;\n  isNone: boolean;\n}\n\n/**\n * Directive for headers sort icons. Mark you icon implementation with this structural directive and\n * it'll set template's implicit context with current direction. Context also has `isAscending`,\n * `isDescending` and `isNone` properties.\n */\n@Directive({ selector: '[nbSortHeaderIcon]' })\nexport class NbSortHeaderIconDirective {}\n\n@Component({\n  selector: 'nb-sort-icon',\n  template: `\n    <ng-container *ngIf=\"isDirectionSet()\">\n      <nb-icon *ngIf=\"isAscending()\" icon=\"chevron-down-outline\" pack=\"nebular-essentials\" aria-hidden=\"true\"></nb-icon>\n      <nb-icon *ngIf=\"isDescending()\" icon=\"chevron-up-outline\" pack=\"nebular-essentials\" aria-hidden=\"true\"></nb-icon>\n    </ng-container>\n  `,\n})\nexport class NbSortIconComponent {\n  @Input() direction: NbSortDirection = NbSortDirection.NONE;\n\n  isAscending(): boolean {\n    return this.direction === NbSortDirection.ASCENDING;\n  }\n\n  isDescending(): boolean {\n    return this.direction === NbSortDirection.DESCENDING;\n  }\n\n  isDirectionSet(): boolean {\n    return this.isAscending() || this.isDescending();\n  }\n}\n\n/**\n * Marks header as sort header so it emitting sort event when clicked.\n */\n@Component({\n  selector: '[nbSortHeader]',\n  template: `\n    <button\n      class=\"nb-tree-grid-header-change-sort-button\"\n      type=\"button\"\n      [attr.disabled]=\"getDisabledAttributeValue()\"\n      (click)=\"sortData()\">\n      <ng-content></ng-content>\n    </button>\n    <nb-sort-icon *ngIf=\"!sortIcon; else customIcon\" [direction]=\"direction\"></nb-sort-icon>\n    <ng-template #customIcon [ngTemplateOutlet]=\"sortIcon\" [ngTemplateOutletContext]=\"getIconContext()\"></ng-template>\n  `,\n})\nexport class NbSortHeaderComponent {\n\n  @ContentChild(NbSortHeaderIconDirective, { read: TemplateRef })\n  sortIcon: TemplateRef<NbSortHeaderIconDirectiveContext>;\n\n  /**\n   * Current sort direction. Possible values: `asc`, `desc`, ``(none)\n   * @type {NbSortDirection}\n   */\n  @Input('nbSortHeader') direction: NbSortDirection;\n  static ngAcceptInputType_direction: NbSortDirectionValues;\n\n  private disabledValue: boolean = false;\n\n  /**\n   * Disable sort header\n   */\n  @Input()\n  @HostBinding('class.disabled')\n  set disabled(value) {\n    this.disabledValue = convertToBoolProperty(value);\n  }\n  get disabled(): boolean {\n    return this.disabledValue;\n  }\n  static ngAcceptInputType_disabled: NbBooleanInput;\n\n  @HostListener('click')\n  sortIfEnabled() {\n    if (!this.disabled) {\n      this.sortData();\n    }\n  }\n\n  constructor(\n    private sort: NbSortDirective,\n    @Inject(NB_SORT_HEADER_COLUMN_DEF) private columnDef: NbSortHeaderColumnDef,\n  ) {}\n\n  isAscending(): boolean {\n    return this.direction === NbSortDirection.ASCENDING;\n  }\n\n  isDescending(): boolean {\n    return this.direction === NbSortDirection.DESCENDING;\n  }\n\n  sortData(): void {\n    const sortRequest = this.createSortRequest();\n    this.sort.emitSort(sortRequest);\n  }\n\n  getIconContext(): NbSortHeaderIconDirectiveContext {\n    return {\n      $implicit: this.direction,\n      isAscending: this.isAscending(),\n      isDescending: this.isDescending(),\n      isNone: !this.isAscending() && !this.isDescending(),\n    };\n  }\n\n  getDisabledAttributeValue(): '' | null {\n    return this.disabled ? '' : null;\n  }\n\n  private createSortRequest(): NbSortRequest {\n    this.direction = this.getNextDirection();\n    return { direction: this.direction, column: this.columnDef.name };\n  }\n\n  private getNextDirection(): NbSortDirection {\n    const sortDirectionCycle = sortDirections;\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) {\n      nextDirectionIndex = 0;\n    }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n}\n"]}