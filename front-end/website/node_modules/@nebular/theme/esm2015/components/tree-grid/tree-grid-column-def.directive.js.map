{"version":3,"file":"tree-grid-column-def.directive.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tree-grid/tree-grid-column-def.directive.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAa,MAAM,eAAe,CAAC;AAC5D,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAC5D,OAAO,EAAE,yBAAyB,EAAE,oBAAoB,EAAE,MAAM,mBAAmB,CAAC;AAEpF;;;GAGG;AAQH,IAAa,4BAA4B,oCAAzC,MAAa,4BAA6B,SAAQ,oBAAoB;IAAtE;;QAMU,gBAAW,GAAkB,IAAI,CAAC;QAelC,gBAAW,GAAkB,IAAI,CAAC;IAoC5C,CAAC;IAlDC;;;OAGG;IAEH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IACD,IAAI,MAAM,CAAC,KAAoB;QAC7B,IAAI,CAAC,WAAW,GAAG,CAAC,KAAK,IAAI,KAAK,KAAK,CAAC;YACtC,CAAC,CAAC,IAAI;YACN,CAAC,CAAC,QAAQ,CAAC,KAA0B,EAAE,EAAE,CAAC,CAAC;IAC/C,CAAC;IAGD;;;OAGG;IAEH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IACD,IAAI,MAAM,CAAC,KAAoB;QAC7B,IAAI,CAAC,WAAW,GAAG,CAAC,KAAK,IAAI,KAAK,KAAK,CAAC;YACtC,CAAC,CAAC,IAAI;YACN,CAAC,CAAC,QAAQ,CAAC,KAA0B,EAAE,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED,WAAW;QACT,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YAC9C,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;SAC/F;IACH,CAAC;IAED,UAAU,CAAC,KAAa;QACtB,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,UAAU,CAAC,KAAa;QACtB,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YAC9C,OAAO,IAAI,CAAC;SACb;QAED,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;YACvB,OAAO,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;SAC5B;QAED,OAAO,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC;IAC9B,CAAC;CACF,CAAA;AArD+B;IAA7B,KAAK,CAAC,qBAAqB,CAAC;;0DAAc;AAQ3C;IADC,KAAK,EAAE;;;0DAGP;AAaD;IADC,KAAK,EAAE;;;0DAGP;AA7BU,4BAA4B;IAPxC,SAAS,CAAC;QACT,QAAQ,EAAE,uBAAuB;QACjC,SAAS,EAAE;YACT,EAAE,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,8BAA4B,EAAE;YACtE,EAAE,OAAO,EAAE,yBAAyB,EAAE,WAAW,EAAE,8BAA4B,EAAE;SAClF;KACF,CAAC;GACW,4BAA4B,CAyDxC;SAzDY,4BAA4B","sourcesContent":["import { Directive, Input, OnChanges } from '@angular/core';\nimport { NbCdkColumnDef } from '../cdk/table/type-mappings';\nimport { NB_SORT_HEADER_COLUMN_DEF, NbColumnDefDirective } from '../cdk/table/cell';\n\n/**\n * Column definition for the tree-grid.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[nbTreeGridColumnDef]',\n  providers: [\n    { provide: NbCdkColumnDef, useExisting: NbTreeGridColumnDefDirective },\n    { provide: NB_SORT_HEADER_COLUMN_DEF, useExisting: NbTreeGridColumnDefDirective },\n  ],\n})\nexport class NbTreeGridColumnDefDirective extends NbColumnDefDirective implements OnChanges {\n  /**\n   * Column name\n   */\n  @Input('nbTreeGridColumnDef') name: string;\n\n  private hideOnValue: number | null = null;\n  /**\n   * Amount of pixels of viewport at which column should be hidden.\n   * type number\n   */\n  @Input()\n  get hideOn(): number | null {\n    return this.hideOnValue;\n  }\n  set hideOn(value: number | null) {\n    this.hideOnValue = !value && value !== 0\n      ? null\n      : parseInt(value as unknown as string, 10);\n  }\n\n  private showOnValue: number | null = null;\n  /**\n   * Amount of pixels of viewport at which column should be shown.\n   * type number\n   */\n  @Input()\n  get showOn(): number | null {\n    return this.showOnValue;\n  }\n  set showOn(value: number | null) {\n    this.showOnValue = !value && value !== 0\n      ? null\n      : parseInt(value as unknown as string, 10);\n  }\n\n  ngOnChanges() {\n    if (this.hideOn != null && this.showOn != null) {\n      throw new Error(`hideOn and showOn are mutually exclusive and can't be used simultaneously.`);\n    }\n  }\n\n  shouldHide(width: number): boolean {\n    return !this.shouldShow(width);\n  }\n\n  shouldShow(width: number): boolean {\n    if (this.hideOn == null && this.showOn == null) {\n      return true;\n    }\n\n    if (this.hideOn != null) {\n      return width > this.hideOn;\n    }\n\n    return width >= this.showOn;\n  }\n}\n"]}