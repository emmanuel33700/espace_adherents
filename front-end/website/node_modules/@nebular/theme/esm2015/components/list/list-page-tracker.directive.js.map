{"version":3,"file":"list-page-tracker.directive.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/list/list-page-tracker.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  ContentChildren,\n  QueryList,\n  Input,\n  ElementRef,\n  AfterViewInit,\n  OnDestroy,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport 'intersection-observer';\nimport { NbListItemComponent } from './list.component';\n\n/**\n * List pager directive\n *\n * Directive allows you to determine page of currently viewing items.\n *\n */\n@Directive({\n  selector: '[nbListPageTracker]',\n})\nexport class NbListPageTrackerDirective implements AfterViewInit, OnDestroy {\n\n  private destroy$ = new Subject<void>();\n\n  private observer: IntersectionObserver;\n  private currentPage: number;\n\n  /**\n   * Items per page.\n   */\n  @Input()\n  pageSize: number;\n\n  /**\n   * Page to start counting with.\n   */\n  @Input()\n  startPage: number = 1;\n\n  /**\n   * Emits when another page become visible.\n   */\n  @Output()\n  pageChange = new EventEmitter<number>();\n\n  @ContentChildren(NbListItemComponent, { read: ElementRef })\n  listItems: QueryList<ElementRef>;\n\n  constructor() {\n    this.observer = new IntersectionObserver(\n      entries => this.checkForPageChange(entries),\n      { threshold: 0.5 },\n    );\n  }\n\n  ngAfterViewInit() {\n    if (this.listItems && this.listItems.length) {\n      this.observeItems();\n    }\n\n    this.listItems.changes\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.observeItems());\n  }\n\n  ngOnDestroy() {\n    this.observer.disconnect && this.observer.disconnect();\n  }\n\n  private observeItems() {\n    this.listItems.forEach(i => this.observer.observe(i.nativeElement));\n  }\n\n  private checkForPageChange(entries: IntersectionObserverEntry[]) {\n    const mostVisiblePage = this.findMostVisiblePage(entries);\n\n    if (mostVisiblePage && this.currentPage !== mostVisiblePage) {\n      this.currentPage = mostVisiblePage;\n      this.pageChange.emit(this.currentPage);\n    }\n  }\n\n  private findMostVisiblePage(entries: IntersectionObserverEntry[]): number | null {\n    const intersectionRatioByPage = new Map<number, number>();\n\n    for (const entry of entries) {\n      if (entry.intersectionRatio < 0.5) {\n        continue;\n      }\n\n      const elementIndex = this.elementIndex(entry.target);\n      if (elementIndex === -1) {\n        continue;\n      }\n      const page = this.startPage + Math.floor(elementIndex / this.pageSize);\n\n      let ratio = entry.intersectionRatio;\n      if (intersectionRatioByPage.has(page)) {\n        ratio += intersectionRatioByPage.get(page);\n      }\n      intersectionRatioByPage.set(page, ratio);\n    }\n\n    let maxRatio = 0;\n    let mostVisiblePage;\n    intersectionRatioByPage.forEach((ratio, page) => {\n      if (ratio > maxRatio) {\n        maxRatio = ratio;\n        mostVisiblePage = page;\n      }\n    });\n\n    return mostVisiblePage;\n  }\n\n  private elementIndex(element: Element): number {\n    return element.parentElement && element.parentElement.children\n      ? Array.from(element.parentElement.children).indexOf(element)\n      : -1;\n  }\n}\n"]}