/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { EventEmitter, OnInit, Type } from '@angular/core';
import { NbCalendarYearModelService } from '../calendar-kit/services/calendar-year-model.service';
import { NbCalendarCell, NbCalendarSize, NbCalendarViewMode, NbCalendarSizeValues, NbCalendarViewModeValues } from '../calendar-kit/model';
import { NbDateService } from '../calendar-kit/services/date.service';
import { NbBooleanInput } from '../helpers';
/**
 * The basis for calendar and range calendar components.
 * Encapsulates common behavior - store calendar state and perform navigation
 * between pickers.
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbBaseCalendarComponent<D, T> implements OnInit {
    protected dateService: NbDateService<D>;
    protected yearModelService: NbCalendarYearModelService<D>;
    /**
     * Defines if we should render previous and next months
     * in the current month view.
     * */
    boundingMonth: boolean;
    /**
     * Defines active view for calendar.
     * */
    activeViewMode: NbCalendarViewMode;
    static ngAcceptInputType_activeViewMode: NbCalendarViewModeValues;
    /**
     * Minimum available date for selection.
     * */
    min: D;
    /**
     * Maximum available date for selection.
     * */
    max: D;
    /**
     * Predicate that decides which cells will be disabled.
     * */
    filter: (D: any) => boolean;
    /**
     * Custom day cell component. Have to implement `NbCalendarCell` interface.
     * */
    dayCellComponent: Type<NbCalendarCell<D, T>>;
    /**
     * Custom month cell component. Have to implement `NbCalendarCell` interface.
     * */
    monthCellComponent: Type<NbCalendarCell<D, T>>;
    /**
     * Custom year cell component. Have to implement `NbCalendarCell` interface.
     * */
    yearCellComponent: Type<NbCalendarCell<D, T>>;
    /**
     * Size of the calendar and entire components.
     * Can be 'medium' which is default or 'large'.
     * */
    size: NbCalendarSize;
    static ngAcceptInputType_size: NbCalendarSizeValues;
    visibleDate: D;
    /**
     * Determines whether we should show calendar navigation or not.
     * */
    showNavigation: boolean;
    /**
     * Value which will be rendered as selected.
     * */
    date: T;
    /**
     * Determines should we show week numbers column.
     * False by default.
     * */
    get showWeekNumber(): boolean;
    set showWeekNumber(value: boolean);
    protected _showWeekNumber: boolean;
    static ngAcceptInputType_showWeekNumber: NbBooleanInput;
    /**
     * Sets symbol used as a header for week numbers column
     * */
    weekNumberSymbol: string;
    /**
     * Emits date when selected.
     * */
    dateChange: EventEmitter<T>;
    constructor(dateService: NbDateService<D>, yearModelService: NbCalendarYearModelService<D>);
    ngOnInit(): void;
    get large(): boolean;
    ViewMode: typeof NbCalendarViewMode;
    setViewMode(viewMode: NbCalendarViewMode): void;
    setVisibleDate(visibleDate: D): void;
    prevMonth(): void;
    nextMonth(): void;
    prevYear(): void;
    nextYear(): void;
    prevYears(): void;
    nextYears(): void;
    navigatePrev(): void;
    navigateNext(): void;
    onChangeViewMode(): void;
    private changeVisibleMonth;
    private changeVisibleYear;
    private changeVisibleYears;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbBaseCalendarComponent<any, any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbBaseCalendarComponent<any, any>, "nb-base-calendar", never, { "boundingMonth": "boundingMonth"; "activeViewMode": "startView"; "size": "size"; "showNavigation": "showNavigation"; "showWeekNumber": "showWeekNumber"; "visibleDate": "visibleDate"; "min": "min"; "max": "max"; "filter": "filter"; "dayCellComponent": "dayCellComponent"; "monthCellComponent": "monthCellComponent"; "yearCellComponent": "yearCellComponent"; "date": "date"; "weekNumberSymbol": "weekNumberSymbol"; }, { "dateChange": "dateChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jYWxlbmRhci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYmFzZS1jYWxlbmRhci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0ZBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkluaXQsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5iQ2FsZW5kYXJZZWFyTW9kZWxTZXJ2aWNlIH0gZnJvbSAnLi4vY2FsZW5kYXIta2l0L3NlcnZpY2VzL2NhbGVuZGFyLXllYXItbW9kZWwuc2VydmljZSc7XG5pbXBvcnQgeyBOYkNhbGVuZGFyQ2VsbCwgTmJDYWxlbmRhclNpemUsIE5iQ2FsZW5kYXJWaWV3TW9kZSwgTmJDYWxlbmRhclNpemVWYWx1ZXMsIE5iQ2FsZW5kYXJWaWV3TW9kZVZhbHVlcyB9IGZyb20gJy4uL2NhbGVuZGFyLWtpdC9tb2RlbCc7XG5pbXBvcnQgeyBOYkRhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vY2FsZW5kYXIta2l0L3NlcnZpY2VzL2RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBOYkJvb2xlYW5JbnB1dCB9IGZyb20gJy4uL2hlbHBlcnMnO1xuLyoqXG4gKiBUaGUgYmFzaXMgZm9yIGNhbGVuZGFyIGFuZCByYW5nZSBjYWxlbmRhciBjb21wb25lbnRzLlxuICogRW5jYXBzdWxhdGVzIGNvbW1vbiBiZWhhdmlvciAtIHN0b3JlIGNhbGVuZGFyIHN0YXRlIGFuZCBwZXJmb3JtIG5hdmlnYXRpb25cbiAqIGJldHdlZW4gcGlja2Vycy5cbiAqICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkJhc2VDYWxlbmRhckNvbXBvbmVudDxELCBUPiBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJvdGVjdGVkIGRhdGVTZXJ2aWNlOiBOYkRhdGVTZXJ2aWNlPEQ+O1xuICAgIHByb3RlY3RlZCB5ZWFyTW9kZWxTZXJ2aWNlOiBOYkNhbGVuZGFyWWVhck1vZGVsU2VydmljZTxEPjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGlmIHdlIHNob3VsZCByZW5kZXIgcHJldmlvdXMgYW5kIG5leHQgbW9udGhzXG4gICAgICogaW4gdGhlIGN1cnJlbnQgbW9udGggdmlldy5cbiAgICAgKiAqL1xuICAgIGJvdW5kaW5nTW9udGg6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhY3RpdmUgdmlldyBmb3IgY2FsZW5kYXIuXG4gICAgICogKi9cbiAgICBhY3RpdmVWaWV3TW9kZTogTmJDYWxlbmRhclZpZXdNb2RlO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9hY3RpdmVWaWV3TW9kZTogTmJDYWxlbmRhclZpZXdNb2RlVmFsdWVzO1xuICAgIC8qKlxuICAgICAqIE1pbmltdW0gYXZhaWxhYmxlIGRhdGUgZm9yIHNlbGVjdGlvbi5cbiAgICAgKiAqL1xuICAgIG1pbjogRDtcbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIGF2YWlsYWJsZSBkYXRlIGZvciBzZWxlY3Rpb24uXG4gICAgICogKi9cbiAgICBtYXg6IEQ7XG4gICAgLyoqXG4gICAgICogUHJlZGljYXRlIHRoYXQgZGVjaWRlcyB3aGljaCBjZWxscyB3aWxsIGJlIGRpc2FibGVkLlxuICAgICAqICovXG4gICAgZmlsdGVyOiAoRDogYW55KSA9PiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEN1c3RvbSBkYXkgY2VsbCBjb21wb25lbnQuIEhhdmUgdG8gaW1wbGVtZW50IGBOYkNhbGVuZGFyQ2VsbGAgaW50ZXJmYWNlLlxuICAgICAqICovXG4gICAgZGF5Q2VsbENvbXBvbmVudDogVHlwZTxOYkNhbGVuZGFyQ2VsbDxELCBUPj47XG4gICAgLyoqXG4gICAgICogQ3VzdG9tIG1vbnRoIGNlbGwgY29tcG9uZW50LiBIYXZlIHRvIGltcGxlbWVudCBgTmJDYWxlbmRhckNlbGxgIGludGVyZmFjZS5cbiAgICAgKiAqL1xuICAgIG1vbnRoQ2VsbENvbXBvbmVudDogVHlwZTxOYkNhbGVuZGFyQ2VsbDxELCBUPj47XG4gICAgLyoqXG4gICAgICogQ3VzdG9tIHllYXIgY2VsbCBjb21wb25lbnQuIEhhdmUgdG8gaW1wbGVtZW50IGBOYkNhbGVuZGFyQ2VsbGAgaW50ZXJmYWNlLlxuICAgICAqICovXG4gICAgeWVhckNlbGxDb21wb25lbnQ6IFR5cGU8TmJDYWxlbmRhckNlbGw8RCwgVD4+O1xuICAgIC8qKlxuICAgICAqIFNpemUgb2YgdGhlIGNhbGVuZGFyIGFuZCBlbnRpcmUgY29tcG9uZW50cy5cbiAgICAgKiBDYW4gYmUgJ21lZGl1bScgd2hpY2ggaXMgZGVmYXVsdCBvciAnbGFyZ2UnLlxuICAgICAqICovXG4gICAgc2l6ZTogTmJDYWxlbmRhclNpemU7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX3NpemU6IE5iQ2FsZW5kYXJTaXplVmFsdWVzO1xuICAgIHZpc2libGVEYXRlOiBEO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB3ZSBzaG91bGQgc2hvdyBjYWxlbmRhciBuYXZpZ2F0aW9uIG9yIG5vdC5cbiAgICAgKiAqL1xuICAgIHNob3dOYXZpZ2F0aW9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFZhbHVlIHdoaWNoIHdpbGwgYmUgcmVuZGVyZWQgYXMgc2VsZWN0ZWQuXG4gICAgICogKi9cbiAgICBkYXRlOiBUO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgc2hvdWxkIHdlIHNob3cgd2VlayBudW1iZXJzIGNvbHVtbi5cbiAgICAgKiBGYWxzZSBieSBkZWZhdWx0LlxuICAgICAqICovXG4gICAgZ2V0IHNob3dXZWVrTnVtYmVyKCk6IGJvb2xlYW47XG4gICAgc2V0IHNob3dXZWVrTnVtYmVyKHZhbHVlOiBib29sZWFuKTtcbiAgICBwcm90ZWN0ZWQgX3Nob3dXZWVrTnVtYmVyOiBib29sZWFuO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9zaG93V2Vla051bWJlcjogTmJCb29sZWFuSW5wdXQ7XG4gICAgLyoqXG4gICAgICogU2V0cyBzeW1ib2wgdXNlZCBhcyBhIGhlYWRlciBmb3Igd2VlayBudW1iZXJzIGNvbHVtblxuICAgICAqICovXG4gICAgd2Vla051bWJlclN5bWJvbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEVtaXRzIGRhdGUgd2hlbiBzZWxlY3RlZC5cbiAgICAgKiAqL1xuICAgIGRhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxUPjtcbiAgICBjb25zdHJ1Y3RvcihkYXRlU2VydmljZTogTmJEYXRlU2VydmljZTxEPiwgeWVhck1vZGVsU2VydmljZTogTmJDYWxlbmRhclllYXJNb2RlbFNlcnZpY2U8RD4pO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgZ2V0IGxhcmdlKCk6IGJvb2xlYW47XG4gICAgVmlld01vZGU6IHR5cGVvZiBOYkNhbGVuZGFyVmlld01vZGU7XG4gICAgc2V0Vmlld01vZGUodmlld01vZGU6IE5iQ2FsZW5kYXJWaWV3TW9kZSk6IHZvaWQ7XG4gICAgc2V0VmlzaWJsZURhdGUodmlzaWJsZURhdGU6IEQpOiB2b2lkO1xuICAgIHByZXZNb250aCgpOiB2b2lkO1xuICAgIG5leHRNb250aCgpOiB2b2lkO1xuICAgIHByZXZZZWFyKCk6IHZvaWQ7XG4gICAgbmV4dFllYXIoKTogdm9pZDtcbiAgICBwcmV2WWVhcnMoKTogdm9pZDtcbiAgICBuZXh0WWVhcnMoKTogdm9pZDtcbiAgICBuYXZpZ2F0ZVByZXYoKTogdm9pZDtcbiAgICBuYXZpZ2F0ZU5leHQoKTogdm9pZDtcbiAgICBvbkNoYW5nZVZpZXdNb2RlKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGFuZ2VWaXNpYmxlTW9udGg7XG4gICAgcHJpdmF0ZSBjaGFuZ2VWaXNpYmxlWWVhcjtcbiAgICBwcml2YXRlIGNoYW5nZVZpc2libGVZZWFycztcbn1cbiJdfQ==