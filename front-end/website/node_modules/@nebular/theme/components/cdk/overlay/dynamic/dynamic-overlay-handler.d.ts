import { ElementRef, SimpleChange, Type } from '@angular/core';
import { NbTrigger, NbTriggerStrategy, NbTriggerStrategyBuilderService } from '../overlay-trigger';
import { NbAdjustableConnectedPositionStrategy, NbAdjustment, NbPosition, NbPositionBuilderService } from '../overlay-position';
import { NbRenderableContainer } from '../overlay-container';
import { NbOverlayContent } from '../overlay-service';
import { NbDynamicOverlay } from './dynamic-overlay';
import { NbOverlayConfig } from '../mapping';
import * as ɵngcc0 from '@angular/core';
export declare class NbDynamicOverlayChange extends SimpleChange {
    constructor(previousValue: any, currentValue: any, firstChange?: boolean);
    isChanged(): boolean;
}
export declare class NbDynamicOverlayHandler {
    private positionBuilder;
    private triggerStrategyBuilder;
    private dynamicOverlayService;
    protected _componentType: Type<NbRenderableContainer>;
    protected _host: ElementRef;
    protected _context: Object;
    protected _content: NbOverlayContent;
    protected _trigger: NbTrigger;
    protected _position: NbPosition;
    protected _adjustment: NbAdjustment;
    protected _offset: number;
    protected _overlayConfig: NbOverlayConfig;
    protected dynamicOverlay: NbDynamicOverlay;
    protected triggerStrategy: NbTriggerStrategy;
    protected positionStrategy: NbAdjustableConnectedPositionStrategy;
    protected changes: {
        [key: string]: NbDynamicOverlayChange;
    };
    constructor(positionBuilder: NbPositionBuilderService, triggerStrategyBuilder: NbTriggerStrategyBuilderService, dynamicOverlayService: NbDynamicOverlay);
    host(host: ElementRef): this;
    trigger(trigger: NbTrigger): this;
    position(position: NbPosition): this;
    adjustment(adjustment: NbAdjustment): this;
    componentType(componentType: Type<NbRenderableContainer>): this;
    content(content: NbOverlayContent): this;
    context(context: {}): this;
    offset(offset: number): this;
    overlayConfig(overlayConfig: NbOverlayConfig): this;
    build(): NbDynamicOverlay;
    rebuild(): NbDynamicOverlay;
    connect(): void;
    disconnect(): void;
    destroy(): void;
    protected createPositionStrategy(): NbAdjustableConnectedPositionStrategy;
    protected subscribeOnTriggers(dynamicOverlay: NbDynamicOverlay): void;
    protected isContainerRerenderRequired(): boolean;
    protected isPositionStrategyUpdateRequired(): boolean;
    protected isTriggerStrategyUpdateRequired(): boolean;
    protected isComponentTypeUpdateRequired(): boolean;
    private isOverlayConfigUpdateRequired;
    protected isComponentTypeUpdated(): boolean;
    protected isContentUpdated(): boolean;
    protected isContextUpdated(): boolean;
    protected isAdjustmentUpdated(): boolean;
    protected isPositionUpdated(): boolean;
    protected isHostUpdated(): boolean;
    protected isTriggerUpdated(): boolean;
    protected isOffsetUpdated(): boolean;
    protected isOverlayConfigUpdated(): boolean;
    protected clearChanges(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbDynamicOverlayHandler, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbDynamicOverlayHandler>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1vdmVybGF5LWhhbmRsZXIuZC50cyIsInNvdXJjZXMiOlsiZHluYW1pYy1vdmVybGF5LWhhbmRsZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdURBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgU2ltcGxlQ2hhbmdlLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYlRyaWdnZXIsIE5iVHJpZ2dlclN0cmF0ZWd5LCBOYlRyaWdnZXJTdHJhdGVneUJ1aWxkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vb3ZlcmxheS10cmlnZ2VyJztcbmltcG9ydCB7IE5iQWRqdXN0YWJsZUNvbm5lY3RlZFBvc2l0aW9uU3RyYXRlZ3ksIE5iQWRqdXN0bWVudCwgTmJQb3NpdGlvbiwgTmJQb3NpdGlvbkJ1aWxkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vb3ZlcmxheS1wb3NpdGlvbic7XG5pbXBvcnQgeyBOYlJlbmRlcmFibGVDb250YWluZXIgfSBmcm9tICcuLi9vdmVybGF5LWNvbnRhaW5lcic7XG5pbXBvcnQgeyBOYk92ZXJsYXlDb250ZW50IH0gZnJvbSAnLi4vb3ZlcmxheS1zZXJ2aWNlJztcbmltcG9ydCB7IE5iRHluYW1pY092ZXJsYXkgfSBmcm9tICcuL2R5bmFtaWMtb3ZlcmxheSc7XG5pbXBvcnQgeyBOYk92ZXJsYXlDb25maWcgfSBmcm9tICcuLi9tYXBwaW5nJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iRHluYW1pY092ZXJsYXlDaGFuZ2UgZXh0ZW5kcyBTaW1wbGVDaGFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHByZXZpb3VzVmFsdWU6IGFueSwgY3VycmVudFZhbHVlOiBhbnksIGZpcnN0Q2hhbmdlPzogYm9vbGVhbik7XG4gICAgaXNDaGFuZ2VkKCk6IGJvb2xlYW47XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkR5bmFtaWNPdmVybGF5SGFuZGxlciB7XG4gICAgcHJpdmF0ZSBwb3NpdGlvbkJ1aWxkZXI7XG4gICAgcHJpdmF0ZSB0cmlnZ2VyU3RyYXRlZ3lCdWlsZGVyO1xuICAgIHByaXZhdGUgZHluYW1pY092ZXJsYXlTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBfY29tcG9uZW50VHlwZTogVHlwZTxOYlJlbmRlcmFibGVDb250YWluZXI+O1xuICAgIHByb3RlY3RlZCBfaG9zdDogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgX2NvbnRleHQ6IE9iamVjdDtcbiAgICBwcm90ZWN0ZWQgX2NvbnRlbnQ6IE5iT3ZlcmxheUNvbnRlbnQ7XG4gICAgcHJvdGVjdGVkIF90cmlnZ2VyOiBOYlRyaWdnZXI7XG4gICAgcHJvdGVjdGVkIF9wb3NpdGlvbjogTmJQb3NpdGlvbjtcbiAgICBwcm90ZWN0ZWQgX2FkanVzdG1lbnQ6IE5iQWRqdXN0bWVudDtcbiAgICBwcm90ZWN0ZWQgX29mZnNldDogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBfb3ZlcmxheUNvbmZpZzogTmJPdmVybGF5Q29uZmlnO1xuICAgIHByb3RlY3RlZCBkeW5hbWljT3ZlcmxheTogTmJEeW5hbWljT3ZlcmxheTtcbiAgICBwcm90ZWN0ZWQgdHJpZ2dlclN0cmF0ZWd5OiBOYlRyaWdnZXJTdHJhdGVneTtcbiAgICBwcm90ZWN0ZWQgcG9zaXRpb25TdHJhdGVneTogTmJBZGp1c3RhYmxlQ29ubmVjdGVkUG9zaXRpb25TdHJhdGVneTtcbiAgICBwcm90ZWN0ZWQgY2hhbmdlczoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBOYkR5bmFtaWNPdmVybGF5Q2hhbmdlO1xuICAgIH07XG4gICAgY29uc3RydWN0b3IocG9zaXRpb25CdWlsZGVyOiBOYlBvc2l0aW9uQnVpbGRlclNlcnZpY2UsIHRyaWdnZXJTdHJhdGVneUJ1aWxkZXI6IE5iVHJpZ2dlclN0cmF0ZWd5QnVpbGRlclNlcnZpY2UsIGR5bmFtaWNPdmVybGF5U2VydmljZTogTmJEeW5hbWljT3ZlcmxheSk7XG4gICAgaG9zdChob3N0OiBFbGVtZW50UmVmKTogdGhpcztcbiAgICB0cmlnZ2VyKHRyaWdnZXI6IE5iVHJpZ2dlcik6IHRoaXM7XG4gICAgcG9zaXRpb24ocG9zaXRpb246IE5iUG9zaXRpb24pOiB0aGlzO1xuICAgIGFkanVzdG1lbnQoYWRqdXN0bWVudDogTmJBZGp1c3RtZW50KTogdGhpcztcbiAgICBjb21wb25lbnRUeXBlKGNvbXBvbmVudFR5cGU6IFR5cGU8TmJSZW5kZXJhYmxlQ29udGFpbmVyPik6IHRoaXM7XG4gICAgY29udGVudChjb250ZW50OiBOYk92ZXJsYXlDb250ZW50KTogdGhpcztcbiAgICBjb250ZXh0KGNvbnRleHQ6IHt9KTogdGhpcztcbiAgICBvZmZzZXQob2Zmc2V0OiBudW1iZXIpOiB0aGlzO1xuICAgIG92ZXJsYXlDb25maWcob3ZlcmxheUNvbmZpZzogTmJPdmVybGF5Q29uZmlnKTogdGhpcztcbiAgICBidWlsZCgpOiBOYkR5bmFtaWNPdmVybGF5O1xuICAgIHJlYnVpbGQoKTogTmJEeW5hbWljT3ZlcmxheTtcbiAgICBjb25uZWN0KCk6IHZvaWQ7XG4gICAgZGlzY29ubmVjdCgpOiB2b2lkO1xuICAgIGRlc3Ryb3koKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgY3JlYXRlUG9zaXRpb25TdHJhdGVneSgpOiBOYkFkanVzdGFibGVDb25uZWN0ZWRQb3NpdGlvblN0cmF0ZWd5O1xuICAgIHByb3RlY3RlZCBzdWJzY3JpYmVPblRyaWdnZXJzKGR5bmFtaWNPdmVybGF5OiBOYkR5bmFtaWNPdmVybGF5KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgaXNDb250YWluZXJSZXJlbmRlclJlcXVpcmVkKCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGlzUG9zaXRpb25TdHJhdGVneVVwZGF0ZVJlcXVpcmVkKCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGlzVHJpZ2dlclN0cmF0ZWd5VXBkYXRlUmVxdWlyZWQoKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNDb21wb25lbnRUeXBlVXBkYXRlUmVxdWlyZWQoKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGlzT3ZlcmxheUNvbmZpZ1VwZGF0ZVJlcXVpcmVkO1xuICAgIHByb3RlY3RlZCBpc0NvbXBvbmVudFR5cGVVcGRhdGVkKCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGlzQ29udGVudFVwZGF0ZWQoKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNDb250ZXh0VXBkYXRlZCgpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBpc0FkanVzdG1lbnRVcGRhdGVkKCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGlzUG9zaXRpb25VcGRhdGVkKCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGlzSG9zdFVwZGF0ZWQoKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNUcmlnZ2VyVXBkYXRlZCgpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBpc09mZnNldFVwZGF0ZWQoKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNPdmVybGF5Q29uZmlnVXBkYXRlZCgpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBjbGVhckNoYW5nZXMoKTogdm9pZDtcbn1cbiJdfQ==