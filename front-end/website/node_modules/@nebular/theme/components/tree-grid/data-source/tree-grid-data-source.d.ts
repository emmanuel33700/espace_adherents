import { Observable } from 'rxjs';
import { NbCollectionViewer } from '../../cdk/collections/collection-viewer';
import { NbDataSource } from '../../cdk/table/data-source';
import { NbSortable, NbSortRequest } from '../tree-grid-sort.component';
import { NbTreeGridDataService } from './tree-grid-data.service';
import { NbTreeGridFilterService } from './tree-grid-filter.service';
import { NbTreeGridSortService } from './tree-grid-sort.service';
import { NbGetters, NbTreeGridPresentationNode } from './tree-grid.model';
import { NbToggleOptions, NbTreeGridService } from './tree-grid.service';
import * as ɵngcc0 from '@angular/core';
export interface NbFilterable {
    filter(filterRequest: string): any;
}
export declare class NbTreeGridDataSource<T> extends NbDataSource<NbTreeGridPresentationNode<T>> implements NbSortable, NbFilterable {
    private sortService;
    private filterService;
    private treeGridService;
    private treeGridDataService;
    /** Stream that emits when a new data array is set on the data source. */
    private data;
    /** Stream emitting render data to the table (depends on ordered data changes). */
    private readonly renderData;
    private readonly filterRequest;
    private readonly sortRequest;
    constructor(sortService: NbTreeGridSortService<T>, filterService: NbTreeGridFilterService<T>, treeGridService: NbTreeGridService<T>, treeGridDataService: NbTreeGridDataService<T>);
    setData<N>(data: N[], customGetters?: NbGetters<N, T>): void;
    connect(collectionViewer: NbCollectionViewer): Observable<NbTreeGridPresentationNode<T>[] | ReadonlyArray<NbTreeGridPresentationNode<T>>>;
    disconnect(collectionViewer: NbCollectionViewer): void;
    expand(row: T): void;
    collapse(row: T): void;
    toggle(row: T, options?: NbToggleOptions): void;
    toggleByIndex(dataIndex: number, options?: NbToggleOptions): void;
    getLevel(rowIndex: number): number;
    sort(sortRequest: NbSortRequest): void;
    filter(searchQuery: string): void;
    protected updateChangeSubscription(): void;
    private filterData;
    private sortData;
}
export declare class NbTreeGridDataSourceBuilder<T> {
    private filterService;
    private sortService;
    private treeGridService;
    private treeGridDataService;
    constructor(filterService: NbTreeGridFilterService<T>, sortService: NbTreeGridSortService<T>, treeGridService: NbTreeGridService<T>, treeGridDataService: NbTreeGridDataService<T>);
    create<N>(data: N[], customGetters?: NbGetters<N, T>): NbTreeGridDataSource<T>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTreeGridDataSourceBuilder<any>, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbTreeGridDataSourceBuilder<any>>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ncmlkLWRhdGEtc291cmNlLmQudHMiLCJzb3VyY2VzIjpbInRyZWUtZ3JpZC1kYXRhLXNvdXJjZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0NBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmJDb2xsZWN0aW9uVmlld2VyIH0gZnJvbSAnLi4vLi4vY2RrL2NvbGxlY3Rpb25zL2NvbGxlY3Rpb24tdmlld2VyJztcbmltcG9ydCB7IE5iRGF0YVNvdXJjZSB9IGZyb20gJy4uLy4uL2Nkay90YWJsZS9kYXRhLXNvdXJjZSc7XG5pbXBvcnQgeyBOYlNvcnRhYmxlLCBOYlNvcnRSZXF1ZXN0IH0gZnJvbSAnLi4vdHJlZS1ncmlkLXNvcnQuY29tcG9uZW50JztcbmltcG9ydCB7IE5iVHJlZUdyaWREYXRhU2VydmljZSB9IGZyb20gJy4vdHJlZS1ncmlkLWRhdGEuc2VydmljZSc7XG5pbXBvcnQgeyBOYlRyZWVHcmlkRmlsdGVyU2VydmljZSB9IGZyb20gJy4vdHJlZS1ncmlkLWZpbHRlci5zZXJ2aWNlJztcbmltcG9ydCB7IE5iVHJlZUdyaWRTb3J0U2VydmljZSB9IGZyb20gJy4vdHJlZS1ncmlkLXNvcnQuc2VydmljZSc7XG5pbXBvcnQgeyBOYkdldHRlcnMsIE5iVHJlZUdyaWRQcmVzZW50YXRpb25Ob2RlIH0gZnJvbSAnLi90cmVlLWdyaWQubW9kZWwnO1xuaW1wb3J0IHsgTmJUb2dnbGVPcHRpb25zLCBOYlRyZWVHcmlkU2VydmljZSB9IGZyb20gJy4vdHJlZS1ncmlkLnNlcnZpY2UnO1xuZXhwb3J0IGludGVyZmFjZSBOYkZpbHRlcmFibGUge1xuICAgIGZpbHRlcihmaWx0ZXJSZXF1ZXN0OiBzdHJpbmcpOiBhbnk7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYlRyZWVHcmlkRGF0YVNvdXJjZTxUPiBleHRlbmRzIE5iRGF0YVNvdXJjZTxOYlRyZWVHcmlkUHJlc2VudGF0aW9uTm9kZTxUPj4gaW1wbGVtZW50cyBOYlNvcnRhYmxlLCBOYkZpbHRlcmFibGUge1xuICAgIHByaXZhdGUgc29ydFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBmaWx0ZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgdHJlZUdyaWRTZXJ2aWNlO1xuICAgIHByaXZhdGUgdHJlZUdyaWREYXRhU2VydmljZTtcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBhIG5ldyBkYXRhIGFycmF5IGlzIHNldCBvbiB0aGUgZGF0YSBzb3VyY2UuICovXG4gICAgcHJpdmF0ZSBkYXRhO1xuICAgIC8qKiBTdHJlYW0gZW1pdHRpbmcgcmVuZGVyIGRhdGEgdG8gdGhlIHRhYmxlIChkZXBlbmRzIG9uIG9yZGVyZWQgZGF0YSBjaGFuZ2VzKS4gKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlbmRlckRhdGE7XG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWx0ZXJSZXF1ZXN0O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc29ydFJlcXVlc3Q7XG4gICAgY29uc3RydWN0b3Ioc29ydFNlcnZpY2U6IE5iVHJlZUdyaWRTb3J0U2VydmljZTxUPiwgZmlsdGVyU2VydmljZTogTmJUcmVlR3JpZEZpbHRlclNlcnZpY2U8VD4sIHRyZWVHcmlkU2VydmljZTogTmJUcmVlR3JpZFNlcnZpY2U8VD4sIHRyZWVHcmlkRGF0YVNlcnZpY2U6IE5iVHJlZUdyaWREYXRhU2VydmljZTxUPik7XG4gICAgc2V0RGF0YTxOPihkYXRhOiBOW10sIGN1c3RvbUdldHRlcnM/OiBOYkdldHRlcnM8TiwgVD4pOiB2b2lkO1xuICAgIGNvbm5lY3QoY29sbGVjdGlvblZpZXdlcjogTmJDb2xsZWN0aW9uVmlld2VyKTogT2JzZXJ2YWJsZTxOYlRyZWVHcmlkUHJlc2VudGF0aW9uTm9kZTxUPltdIHwgUmVhZG9ubHlBcnJheTxOYlRyZWVHcmlkUHJlc2VudGF0aW9uTm9kZTxUPj4+O1xuICAgIGRpc2Nvbm5lY3QoY29sbGVjdGlvblZpZXdlcjogTmJDb2xsZWN0aW9uVmlld2VyKTogdm9pZDtcbiAgICBleHBhbmQocm93OiBUKTogdm9pZDtcbiAgICBjb2xsYXBzZShyb3c6IFQpOiB2b2lkO1xuICAgIHRvZ2dsZShyb3c6IFQsIG9wdGlvbnM/OiBOYlRvZ2dsZU9wdGlvbnMpOiB2b2lkO1xuICAgIHRvZ2dsZUJ5SW5kZXgoZGF0YUluZGV4OiBudW1iZXIsIG9wdGlvbnM/OiBOYlRvZ2dsZU9wdGlvbnMpOiB2b2lkO1xuICAgIGdldExldmVsKHJvd0luZGV4OiBudW1iZXIpOiBudW1iZXI7XG4gICAgc29ydChzb3J0UmVxdWVzdDogTmJTb3J0UmVxdWVzdCk6IHZvaWQ7XG4gICAgZmlsdGVyKHNlYXJjaFF1ZXJ5OiBzdHJpbmcpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVDaGFuZ2VTdWJzY3JpcHRpb24oKTogdm9pZDtcbiAgICBwcml2YXRlIGZpbHRlckRhdGE7XG4gICAgcHJpdmF0ZSBzb3J0RGF0YTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iVHJlZUdyaWREYXRhU291cmNlQnVpbGRlcjxUPiB7XG4gICAgcHJpdmF0ZSBmaWx0ZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgc29ydFNlcnZpY2U7XG4gICAgcHJpdmF0ZSB0cmVlR3JpZFNlcnZpY2U7XG4gICAgcHJpdmF0ZSB0cmVlR3JpZERhdGFTZXJ2aWNlO1xuICAgIGNvbnN0cnVjdG9yKGZpbHRlclNlcnZpY2U6IE5iVHJlZUdyaWRGaWx0ZXJTZXJ2aWNlPFQ+LCBzb3J0U2VydmljZTogTmJUcmVlR3JpZFNvcnRTZXJ2aWNlPFQ+LCB0cmVlR3JpZFNlcnZpY2U6IE5iVHJlZUdyaWRTZXJ2aWNlPFQ+LCB0cmVlR3JpZERhdGFTZXJ2aWNlOiBOYlRyZWVHcmlkRGF0YVNlcnZpY2U8VD4pO1xuICAgIGNyZWF0ZTxOPihkYXRhOiBOW10sIGN1c3RvbUdldHRlcnM/OiBOYkdldHRlcnM8TiwgVD4pOiBOYlRyZWVHcmlkRGF0YVNvdXJjZTxUPjtcbn1cbiJdfQ==