import { EventEmitter, TemplateRef } from '@angular/core';
import { NbBooleanInput, NbNullableInput } from '../helpers';
/** Column definition associated with a `NbSortHeaderDirective`. */
import * as ɵngcc0 from '@angular/core';
interface NbSortHeaderColumnDef {
    name: string;
}
export interface NbSortRequest {
    column: string;
    direction: NbSortDirection;
}
export interface NbSortable {
    sort(sortRequest: NbSortRequest): any;
}
export declare type NbSortDirectionValues = 'asc' | 'desc' | '';
export declare enum NbSortDirection {
    ASCENDING = "asc",
    DESCENDING = "desc",
    NONE = ""
}
/**
 * Directive triggers sort method of passed object when sort header changes direction
 */
export declare class NbSortDirective {
    sortable: NbSortable;
    static ngAcceptInputType_sortable: NbSortable | NbNullableInput;
    sort: EventEmitter<NbSortRequest>;
    emitSort(sortRequest: NbSortRequest): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbSortDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbSortDirective, "[nbSort]", never, { "sortable": "nbSort"; }, { "sort": "sort"; }, never>;
}
export interface NbSortHeaderIconDirectiveContext {
    $implicit: NbSortDirection;
    isAscending: boolean;
    isDescending: boolean;
    isNone: boolean;
}
/**
 * Directive for headers sort icons. Mark you icon implementation with this structural directive and
 * it'll set template's implicit context with current direction. Context also has `isAscending`,
 * `isDescending` and `isNone` properties.
 */
export declare class NbSortHeaderIconDirective {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbSortHeaderIconDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbSortHeaderIconDirective, "[nbSortHeaderIcon]", never, {}, {}, never>;
}
export declare class NbSortIconComponent {
    direction: NbSortDirection;
    isAscending(): boolean;
    isDescending(): boolean;
    isDirectionSet(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbSortIconComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbSortIconComponent, "nb-sort-icon", never, { "direction": "direction"; }, {}, never, never>;
}
/**
 * Marks header as sort header so it emitting sort event when clicked.
 */
export declare class NbSortHeaderComponent {
    private sort;
    private columnDef;
    sortIcon: TemplateRef<NbSortHeaderIconDirectiveContext>;
    /**
     * Current sort direction. Possible values: `asc`, `desc`, ``(none)
     * @type {NbSortDirection}
     */
    direction: NbSortDirection;
    static ngAcceptInputType_direction: NbSortDirectionValues;
    private disabledValue;
    /**
     * Disable sort header
     */
    set disabled(value: boolean);
    get disabled(): boolean;
    static ngAcceptInputType_disabled: NbBooleanInput;
    sortIfEnabled(): void;
    constructor(sort: NbSortDirective, columnDef: NbSortHeaderColumnDef);
    isAscending(): boolean;
    isDescending(): boolean;
    sortData(): void;
    getIconContext(): NbSortHeaderIconDirectiveContext;
    getDisabledAttributeValue(): '' | null;
    private createSortRequest;
    private getNextDirection;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbSortHeaderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbSortHeaderComponent, "[nbSortHeader]", never, { "disabled": "disabled"; "direction": "nbSortHeader"; }, {}, ["sortIcon"], ["*"]>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ncmlkLXNvcnQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRyZWUtZ3JpZC1zb3J0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBOzs7Ozs7Ozs7Ozs7Ozs7QUFhQTs7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4QkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYkJvb2xlYW5JbnB1dCwgTmJOdWxsYWJsZUlucHV0IH0gZnJvbSAnLi4vaGVscGVycyc7XG4vKiogQ29sdW1uIGRlZmluaXRpb24gYXNzb2NpYXRlZCB3aXRoIGEgYE5iU29ydEhlYWRlckRpcmVjdGl2ZWAuICovXG5pbnRlcmZhY2UgTmJTb3J0SGVhZGVyQ29sdW1uRGVmIHtcbiAgICBuYW1lOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIE5iU29ydFJlcXVlc3Qge1xuICAgIGNvbHVtbjogc3RyaW5nO1xuICAgIGRpcmVjdGlvbjogTmJTb3J0RGlyZWN0aW9uO1xufVxuZXhwb3J0IGludGVyZmFjZSBOYlNvcnRhYmxlIHtcbiAgICBzb3J0KHNvcnRSZXF1ZXN0OiBOYlNvcnRSZXF1ZXN0KTogYW55O1xufVxuZXhwb3J0IGRlY2xhcmUgdHlwZSBOYlNvcnREaXJlY3Rpb25WYWx1ZXMgPSAnYXNjJyB8ICdkZXNjJyB8ICcnO1xuZXhwb3J0IGRlY2xhcmUgZW51bSBOYlNvcnREaXJlY3Rpb24ge1xuICAgIEFTQ0VORElORyA9IFwiYXNjXCIsXG4gICAgREVTQ0VORElORyA9IFwiZGVzY1wiLFxuICAgIE5PTkUgPSBcIlwiXG59XG4vKipcbiAqIERpcmVjdGl2ZSB0cmlnZ2VycyBzb3J0IG1ldGhvZCBvZiBwYXNzZWQgb2JqZWN0IHdoZW4gc29ydCBoZWFkZXIgY2hhbmdlcyBkaXJlY3Rpb25cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJTb3J0RGlyZWN0aXZlIHtcbiAgICBzb3J0YWJsZTogTmJTb3J0YWJsZTtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfc29ydGFibGU6IE5iU29ydGFibGUgfCBOYk51bGxhYmxlSW5wdXQ7XG4gICAgc29ydDogRXZlbnRFbWl0dGVyPE5iU29ydFJlcXVlc3Q+O1xuICAgIGVtaXRTb3J0KHNvcnRSZXF1ZXN0OiBOYlNvcnRSZXF1ZXN0KTogdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTmJTb3J0SGVhZGVySWNvbkRpcmVjdGl2ZUNvbnRleHQge1xuICAgICRpbXBsaWNpdDogTmJTb3J0RGlyZWN0aW9uO1xuICAgIGlzQXNjZW5kaW5nOiBib29sZWFuO1xuICAgIGlzRGVzY2VuZGluZzogYm9vbGVhbjtcbiAgICBpc05vbmU6IGJvb2xlYW47XG59XG4vKipcbiAqIERpcmVjdGl2ZSBmb3IgaGVhZGVycyBzb3J0IGljb25zLiBNYXJrIHlvdSBpY29uIGltcGxlbWVudGF0aW9uIHdpdGggdGhpcyBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZSBhbmRcbiAqIGl0J2xsIHNldCB0ZW1wbGF0ZSdzIGltcGxpY2l0IGNvbnRleHQgd2l0aCBjdXJyZW50IGRpcmVjdGlvbi4gQ29udGV4dCBhbHNvIGhhcyBgaXNBc2NlbmRpbmdgLFxuICogYGlzRGVzY2VuZGluZ2AgYW5kIGBpc05vbmVgIHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iU29ydEhlYWRlckljb25EaXJlY3RpdmUge1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJTb3J0SWNvbkNvbXBvbmVudCB7XG4gICAgZGlyZWN0aW9uOiBOYlNvcnREaXJlY3Rpb247XG4gICAgaXNBc2NlbmRpbmcoKTogYm9vbGVhbjtcbiAgICBpc0Rlc2NlbmRpbmcoKTogYm9vbGVhbjtcbiAgICBpc0RpcmVjdGlvblNldCgpOiBib29sZWFuO1xufVxuLyoqXG4gKiBNYXJrcyBoZWFkZXIgYXMgc29ydCBoZWFkZXIgc28gaXQgZW1pdHRpbmcgc29ydCBldmVudCB3aGVuIGNsaWNrZWQuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iU29ydEhlYWRlckNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBzb3J0O1xuICAgIHByaXZhdGUgY29sdW1uRGVmO1xuICAgIHNvcnRJY29uOiBUZW1wbGF0ZVJlZjxOYlNvcnRIZWFkZXJJY29uRGlyZWN0aXZlQ29udGV4dD47XG4gICAgLyoqXG4gICAgICogQ3VycmVudCBzb3J0IGRpcmVjdGlvbi4gUG9zc2libGUgdmFsdWVzOiBgYXNjYCwgYGRlc2NgLCBgYChub25lKVxuICAgICAqIEB0eXBlIHtOYlNvcnREaXJlY3Rpb259XG4gICAgICovXG4gICAgZGlyZWN0aW9uOiBOYlNvcnREaXJlY3Rpb247XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX2RpcmVjdGlvbjogTmJTb3J0RGlyZWN0aW9uVmFsdWVzO1xuICAgIHByaXZhdGUgZGlzYWJsZWRWYWx1ZTtcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIHNvcnQgaGVhZGVyXG4gICAgICovXG4gICAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfZGlzYWJsZWQ6IE5iQm9vbGVhbklucHV0O1xuICAgIHNvcnRJZkVuYWJsZWQoKTogdm9pZDtcbiAgICBjb25zdHJ1Y3Rvcihzb3J0OiBOYlNvcnREaXJlY3RpdmUsIGNvbHVtbkRlZjogTmJTb3J0SGVhZGVyQ29sdW1uRGVmKTtcbiAgICBpc0FzY2VuZGluZygpOiBib29sZWFuO1xuICAgIGlzRGVzY2VuZGluZygpOiBib29sZWFuO1xuICAgIHNvcnREYXRhKCk6IHZvaWQ7XG4gICAgZ2V0SWNvbkNvbnRleHQoKTogTmJTb3J0SGVhZGVySWNvbkRpcmVjdGl2ZUNvbnRleHQ7XG4gICAgZ2V0RGlzYWJsZWRBdHRyaWJ1dGVWYWx1ZSgpOiAnJyB8IG51bGw7XG4gICAgcHJpdmF0ZSBjcmVhdGVTb3J0UmVxdWVzdDtcbiAgICBwcml2YXRlIGdldE5leHREaXJlY3Rpb247XG59XG5leHBvcnQge307XG4iXX0=