import { ChangeDetectorRef, ElementRef, OnInit, OnDestroy } from '@angular/core';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { NbLayoutDirectionService } from '../../services/direction.service';
import { NbCellDirective, NbFooterCellDirective, NbHeaderCellDirective } from '../cdk/table/cell';
import { NbTreeGridColumnDefDirective } from './tree-grid-column-def.directive';
import { NbColumnsService } from './tree-grid-columns.service';
import * as ɵngcc0 from '@angular/core';
export declare class NbTreeGridCellDirective extends NbCellDirective implements OnInit, OnDestroy {
    private platformId;
    private window;
    private sanitizer;
    private directionService;
    private columnService;
    private cd;
    private destroy$;
    private readonly tree;
    private readonly columnDef;
    private initialLeftPadding;
    private initialRightPadding;
    private latestWidth;
    elementRef: ElementRef<HTMLElement>;
    get columnWidth(): string;
    get leftPadding(): string | SafeStyle | null;
    get rightPadding(): string | SafeStyle | null;
    constructor(columnDef: NbTreeGridColumnDefDirective, elementRef: ElementRef<HTMLElement>, tree: any, platformId: any, window: any, sanitizer: DomSanitizer, directionService: NbLayoutDirectionService, columnService: NbColumnsService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    toggleRow(): void;
    private get initialStartPadding();
    private getStartPadding;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTreeGridCellDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbTreeGridCellDirective, "td[nbTreeGridCell]", never, {}, {}, never>;
}
export declare class NbTreeGridHeaderCellDirective extends NbHeaderCellDirective implements OnInit, OnDestroy {
    private columnService;
    private cd;
    private destroy$;
    private latestWidth;
    private readonly tree;
    get columnWidth(): string;
    constructor(columnDef: NbTreeGridColumnDefDirective, elementRef: ElementRef<HTMLElement>, tree: any, columnService: NbColumnsService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTreeGridHeaderCellDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbTreeGridHeaderCellDirective, "th[nbTreeGridHeaderCell]", never, {}, {}, never>;
}
export declare class NbTreeGridFooterCellDirective extends NbFooterCellDirective implements OnInit, OnDestroy {
    private columnService;
    private cd;
    private destroy$;
    private latestWidth;
    private readonly tree;
    get columnWidth(): string;
    constructor(columnDef: NbTreeGridColumnDefDirective, elementRef: ElementRef, tree: any, columnService: NbColumnsService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTreeGridFooterCellDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbTreeGridFooterCellDirective, "td[nbTreeGridFooterCell]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ncmlkLWNlbGwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRyZWUtZ3JpZC1jZWxsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7Ozs7Ozs7Ozs7Ozs7QUFXQTs7Ozs7Ozs7Ozs7OztBQVdBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIE9uSW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVTdHlsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgTmJMYXlvdXREaXJlY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZGlyZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmJDZWxsRGlyZWN0aXZlLCBOYkZvb3RlckNlbGxEaXJlY3RpdmUsIE5iSGVhZGVyQ2VsbERpcmVjdGl2ZSB9IGZyb20gJy4uL2Nkay90YWJsZS9jZWxsJztcbmltcG9ydCB7IE5iVHJlZUdyaWRDb2x1bW5EZWZEaXJlY3RpdmUgfSBmcm9tICcuL3RyZWUtZ3JpZC1jb2x1bW4tZGVmLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOYkNvbHVtbnNTZXJ2aWNlIH0gZnJvbSAnLi90cmVlLWdyaWQtY29sdW1ucy5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iVHJlZUdyaWRDZWxsRGlyZWN0aXZlIGV4dGVuZHMgTmJDZWxsRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcGxhdGZvcm1JZDtcbiAgICBwcml2YXRlIHdpbmRvdztcbiAgICBwcml2YXRlIHNhbml0aXplcjtcbiAgICBwcml2YXRlIGRpcmVjdGlvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjb2x1bW5TZXJ2aWNlO1xuICAgIHByaXZhdGUgY2Q7XG4gICAgcHJpdmF0ZSBkZXN0cm95JDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRyZWU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjb2x1bW5EZWY7XG4gICAgcHJpdmF0ZSBpbml0aWFsTGVmdFBhZGRpbmc7XG4gICAgcHJpdmF0ZSBpbml0aWFsUmlnaHRQYWRkaW5nO1xuICAgIHByaXZhdGUgbGF0ZXN0V2lkdGg7XG4gICAgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD47XG4gICAgZ2V0IGNvbHVtbldpZHRoKCk6IHN0cmluZztcbiAgICBnZXQgbGVmdFBhZGRpbmcoKTogc3RyaW5nIHwgU2FmZVN0eWxlIHwgbnVsbDtcbiAgICBnZXQgcmlnaHRQYWRkaW5nKCk6IHN0cmluZyB8IFNhZmVTdHlsZSB8IG51bGw7XG4gICAgY29uc3RydWN0b3IoY29sdW1uRGVmOiBOYlRyZWVHcmlkQ29sdW1uRGVmRGlyZWN0aXZlLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiwgdHJlZTogYW55LCBwbGF0Zm9ybUlkOiBhbnksIHdpbmRvdzogYW55LCBzYW5pdGl6ZXI6IERvbVNhbml0aXplciwgZGlyZWN0aW9uU2VydmljZTogTmJMYXlvdXREaXJlY3Rpb25TZXJ2aWNlLCBjb2x1bW5TZXJ2aWNlOiBOYkNvbHVtbnNTZXJ2aWNlLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICB0b2dnbGVSb3coKTogdm9pZDtcbiAgICBwcml2YXRlIGdldCBpbml0aWFsU3RhcnRQYWRkaW5nKCk7XG4gICAgcHJpdmF0ZSBnZXRTdGFydFBhZGRpbmc7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYlRyZWVHcmlkSGVhZGVyQ2VsbERpcmVjdGl2ZSBleHRlbmRzIE5iSGVhZGVyQ2VsbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGNvbHVtblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjZDtcbiAgICBwcml2YXRlIGRlc3Ryb3kkO1xuICAgIHByaXZhdGUgbGF0ZXN0V2lkdGg7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0cmVlO1xuICAgIGdldCBjb2x1bW5XaWR0aCgpOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoY29sdW1uRGVmOiBOYlRyZWVHcmlkQ29sdW1uRGVmRGlyZWN0aXZlLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiwgdHJlZTogYW55LCBjb2x1bW5TZXJ2aWNlOiBOYkNvbHVtbnNTZXJ2aWNlLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iVHJlZUdyaWRGb290ZXJDZWxsRGlyZWN0aXZlIGV4dGVuZHMgTmJGb290ZXJDZWxsRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY29sdW1uU2VydmljZTtcbiAgICBwcml2YXRlIGNkO1xuICAgIHByaXZhdGUgZGVzdHJveSQ7XG4gICAgcHJpdmF0ZSBsYXRlc3RXaWR0aDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRyZWU7XG4gICAgZ2V0IGNvbHVtbldpZHRoKCk6IHN0cmluZztcbiAgICBjb25zdHJ1Y3Rvcihjb2x1bW5EZWY6IE5iVHJlZUdyaWRDb2x1bW5EZWZEaXJlY3RpdmUsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHRyZWU6IGFueSwgY29sdW1uU2VydmljZTogTmJDb2x1bW5zU2VydmljZSwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=