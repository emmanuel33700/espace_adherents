import { AfterContentInit, EventEmitter, OnDestroy, QueryList, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Subject } from 'rxjs';
import { NbBooleanInput } from '../helpers';
import { NbRadioComponent } from './radio.component';
import { NbComponentStatus } from '../component-status';
/**
 * The `NbRadioGroupComponent` is the wrapper for `nb-radio` button.
 * It provides form bindings:
 *
 * ```html
 * <nb-radio-group [(ngModel)]="selectedOption">
 *   <nb-radio value="1">Option 1</nb-radio>
 *   <nb-radio value="2">Option 2</nb-radio>
 *   <nb-radio value="3">Option 3</nb-radio>
 * </nb-radio-group>
 * ```
 *
 * Also, you can use `value` and `valueChange` for binding without forms.
 *
 * ```html
 * <nb-radio-group [(value)]="selectedOption">
 *   <nb-radio value="1">Option 1</nb-radio>
 *   <nb-radio value="2">Option 2</nb-radio>
 *   <nb-radio value="3">Option 3</nb-radio>
 * </nb-radio-group>
 * ```
 *
 * Radio items name has to be provided through `name` input property of the radio group.
 *
 * ```html
 * <nb-radio-group name="my-radio-group">
 *   ...
 * </nb-radio-group>
 * ```
 *
 * You can change radio group status by setting `status` input.
 * @stacked-example(Statuses, radio/radio-statuses.component)
 *
 * Also, you can disable the whole group using `disabled` attribute.
 * @stacked-example(Disabled group, radio/radio-disabled-group.component)
 *
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbRadioGroupComponent implements AfterContentInit, OnDestroy, ControlValueAccessor {
    protected hostElement: ElementRef<HTMLElement>;
    protected platformId: any;
    protected document: any;
    protected destroy$: Subject<void>;
    protected onChange: (value: any) => void;
    protected onTouched: () => void;
    get value(): any;
    set value(value: any);
    protected _value: any;
    get name(): string;
    set name(name: string);
    protected _name: string;
    get disabled(): boolean;
    set disabled(disabled: boolean);
    protected _disabled: boolean;
    static ngAcceptInputType_disabled: NbBooleanInput;
    /**
     * Radio buttons status.
     * Possible values are `primary` (default), `success`, `warning`, `danger`, `info`.
     */
    get status(): NbComponentStatus;
    set status(value: NbComponentStatus);
    protected _status: NbComponentStatus;
    radios: QueryList<NbRadioComponent>;
    valueChange: EventEmitter<any>;
    constructor(hostElement: ElementRef<HTMLElement>, platformId: any, document: any);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    protected updateAndSubscribeToRadios(): void;
    protected updateNames(): void;
    protected updateValues(): void;
    protected updateDisabled(): void;
    protected subscribeOnRadiosValueChange(): void;
    protected propagateValue(value: any): void;
    protected subscribeOnRadiosBlur(): void;
    protected updateStatus(): void;
    protected updateAndMarkForCheckRadios(updateFn: (NbRadioComponent: any) => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbRadioGroupComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbRadioGroupComponent, "nb-radio-group", never, { "value": "value"; "name": "name"; "disabled": "disabled"; "status": "status"; }, { "valueChange": "valueChange"; }, ["radios"], ["nb-radio"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInJhZGlvLWdyb3VwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBRdWVyeUxpc3QsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmJCb29sZWFuSW5wdXQgfSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCB7IE5iUmFkaW9Db21wb25lbnQgfSBmcm9tICcuL3JhZGlvLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOYkNvbXBvbmVudFN0YXR1cyB9IGZyb20gJy4uL2NvbXBvbmVudC1zdGF0dXMnO1xuLyoqXG4gKiBUaGUgYE5iUmFkaW9Hcm91cENvbXBvbmVudGAgaXMgdGhlIHdyYXBwZXIgZm9yIGBuYi1yYWRpb2AgYnV0dG9uLlxuICogSXQgcHJvdmlkZXMgZm9ybSBiaW5kaW5nczpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmItcmFkaW8tZ3JvdXAgWyhuZ01vZGVsKV09XCJzZWxlY3RlZE9wdGlvblwiPlxuICogICA8bmItcmFkaW8gdmFsdWU9XCIxXCI+T3B0aW9uIDE8L25iLXJhZGlvPlxuICogICA8bmItcmFkaW8gdmFsdWU9XCIyXCI+T3B0aW9uIDI8L25iLXJhZGlvPlxuICogICA8bmItcmFkaW8gdmFsdWU9XCIzXCI+T3B0aW9uIDM8L25iLXJhZGlvPlxuICogPC9uYi1yYWRpby1ncm91cD5cbiAqIGBgYFxuICpcbiAqIEFsc28sIHlvdSBjYW4gdXNlIGB2YWx1ZWAgYW5kIGB2YWx1ZUNoYW5nZWAgZm9yIGJpbmRpbmcgd2l0aG91dCBmb3Jtcy5cbiAqXG4gKiBgYGBodG1sXG4gKiA8bmItcmFkaW8tZ3JvdXAgWyh2YWx1ZSldPVwic2VsZWN0ZWRPcHRpb25cIj5cbiAqICAgPG5iLXJhZGlvIHZhbHVlPVwiMVwiPk9wdGlvbiAxPC9uYi1yYWRpbz5cbiAqICAgPG5iLXJhZGlvIHZhbHVlPVwiMlwiPk9wdGlvbiAyPC9uYi1yYWRpbz5cbiAqICAgPG5iLXJhZGlvIHZhbHVlPVwiM1wiPk9wdGlvbiAzPC9uYi1yYWRpbz5cbiAqIDwvbmItcmFkaW8tZ3JvdXA+XG4gKiBgYGBcbiAqXG4gKiBSYWRpbyBpdGVtcyBuYW1lIGhhcyB0byBiZSBwcm92aWRlZCB0aHJvdWdoIGBuYW1lYCBpbnB1dCBwcm9wZXJ0eSBvZiB0aGUgcmFkaW8gZ3JvdXAuXG4gKlxuICogYGBgaHRtbFxuICogPG5iLXJhZGlvLWdyb3VwIG5hbWU9XCJteS1yYWRpby1ncm91cFwiPlxuICogICAuLi5cbiAqIDwvbmItcmFkaW8tZ3JvdXA+XG4gKiBgYGBcbiAqXG4gKiBZb3UgY2FuIGNoYW5nZSByYWRpbyBncm91cCBzdGF0dXMgYnkgc2V0dGluZyBgc3RhdHVzYCBpbnB1dC5cbiAqIEBzdGFja2VkLWV4YW1wbGUoU3RhdHVzZXMsIHJhZGlvL3JhZGlvLXN0YXR1c2VzLmNvbXBvbmVudClcbiAqXG4gKiBBbHNvLCB5b3UgY2FuIGRpc2FibGUgdGhlIHdob2xlIGdyb3VwIHVzaW5nIGBkaXNhYmxlZGAgYXR0cmlidXRlLlxuICogQHN0YWNrZWQtZXhhbXBsZShEaXNhYmxlZCBncm91cCwgcmFkaW8vcmFkaW8tZGlzYWJsZWQtZ3JvdXAuY29tcG9uZW50KVxuICpcbiAqICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYlJhZGlvR3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBwcm90ZWN0ZWQgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuICAgIHByb3RlY3RlZCBwbGF0Zm9ybUlkOiBhbnk7XG4gICAgcHJvdGVjdGVkIGRvY3VtZW50OiBhbnk7XG4gICAgcHJvdGVjdGVkIGRlc3Ryb3kkOiBTdWJqZWN0PHZvaWQ+O1xuICAgIHByb3RlY3RlZCBvbkNoYW5nZTogKHZhbHVlOiBhbnkpID0+IHZvaWQ7XG4gICAgcHJvdGVjdGVkIG9uVG91Y2hlZDogKCkgPT4gdm9pZDtcbiAgICBnZXQgdmFsdWUoKTogYW55O1xuICAgIHNldCB2YWx1ZSh2YWx1ZTogYW55KTtcbiAgICBwcm90ZWN0ZWQgX3ZhbHVlOiBhbnk7XG4gICAgZ2V0IG5hbWUoKTogc3RyaW5nO1xuICAgIHNldCBuYW1lKG5hbWU6IHN0cmluZyk7XG4gICAgcHJvdGVjdGVkIF9uYW1lOiBzdHJpbmc7XG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGRpc2FibGVkKGRpc2FibGVkOiBib29sZWFuKTtcbiAgICBwcm90ZWN0ZWQgX2Rpc2FibGVkOiBib29sZWFuO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9kaXNhYmxlZDogTmJCb29sZWFuSW5wdXQ7XG4gICAgLyoqXG4gICAgICogUmFkaW8gYnV0dG9ucyBzdGF0dXMuXG4gICAgICogUG9zc2libGUgdmFsdWVzIGFyZSBgcHJpbWFyeWAgKGRlZmF1bHQpLCBgc3VjY2Vzc2AsIGB3YXJuaW5nYCwgYGRhbmdlcmAsIGBpbmZvYC5cbiAgICAgKi9cbiAgICBnZXQgc3RhdHVzKCk6IE5iQ29tcG9uZW50U3RhdHVzO1xuICAgIHNldCBzdGF0dXModmFsdWU6IE5iQ29tcG9uZW50U3RhdHVzKTtcbiAgICBwcm90ZWN0ZWQgX3N0YXR1czogTmJDb21wb25lbnRTdGF0dXM7XG4gICAgcmFkaW9zOiBRdWVyeUxpc3Q8TmJSYWRpb0NvbXBvbmVudD47XG4gICAgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNvbnN0cnVjdG9yKGhvc3RFbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiwgcGxhdGZvcm1JZDogYW55LCBkb2N1bWVudDogYW55KTtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlQW5kU3Vic2NyaWJlVG9SYWRpb3MoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlTmFtZXMoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlVmFsdWVzKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZURpc2FibGVkKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHN1YnNjcmliZU9uUmFkaW9zVmFsdWVDaGFuZ2UoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgcHJvcGFnYXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHN1YnNjcmliZU9uUmFkaW9zQmx1cigpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVTdGF0dXMoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlQW5kTWFya0ZvckNoZWNrUmFkaW9zKHVwZGF0ZUZuOiAoTmJSYWRpb0NvbXBvbmVudDogYW55KSA9PiB2b2lkKTogdm9pZDtcbn1cbiJdfQ==