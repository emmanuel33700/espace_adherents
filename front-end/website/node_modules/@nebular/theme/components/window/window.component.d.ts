import { ElementRef, OnDestroy, OnInit, TemplateRef, Renderer2, ComponentFactoryResolver, AfterViewChecked } from '@angular/core';
import { NbFocusTrap, NbFocusTrapFactoryService } from '../cdk/a11y/focus-trap';
import { NbComponentType } from '../cdk/overlay/mapping';
import { NbOverlayContainerComponent } from '../cdk/overlay/overlay-container';
import { NbWindowConfig } from './window.options';
import { NbWindowRef } from './window-ref';
import * as ɵngcc0 from '@angular/core';
export declare class NbWindowComponent implements OnInit, AfterViewChecked, OnDestroy {
    content: TemplateRef<any> | NbComponentType;
    context: Object;
    windowRef: NbWindowRef;
    config: NbWindowConfig;
    protected focusTrapFactory: NbFocusTrapFactoryService;
    protected elementRef: ElementRef;
    protected renderer: Renderer2;
    cfr: ComponentFactoryResolver;
    get isFullScreen(): boolean;
    get maximized(): boolean;
    get minimized(): boolean;
    overlayContainer: NbOverlayContainerComponent;
    protected focusTrap: NbFocusTrap;
    constructor(content: TemplateRef<any> | NbComponentType, context: Object, windowRef: NbWindowRef, config: NbWindowConfig, focusTrapFactory: NbFocusTrapFactoryService, elementRef: ElementRef, renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    minimize(): void;
    maximize(): void;
    fullScreen(): void;
    maximizeOrFullScreen(): void;
    close(): void;
    protected attachTemplate(): void;
    protected attachComponent(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbWindowComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbWindowComponent, "nb-window", never, { "cfr": "cfr"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ3aW5kb3cuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25EZXN0cm95LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBSZW5kZXJlcjIsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQWZ0ZXJWaWV3Q2hlY2tlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmJGb2N1c1RyYXAsIE5iRm9jdXNUcmFwRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuLi9jZGsvYTExeS9mb2N1cy10cmFwJztcbmltcG9ydCB7IE5iQ29tcG9uZW50VHlwZSB9IGZyb20gJy4uL2Nkay9vdmVybGF5L21hcHBpbmcnO1xuaW1wb3J0IHsgTmJPdmVybGF5Q29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi4vY2RrL292ZXJsYXkvb3ZlcmxheS1jb250YWluZXInO1xuaW1wb3J0IHsgTmJXaW5kb3dDb25maWcgfSBmcm9tICcuL3dpbmRvdy5vcHRpb25zJztcbmltcG9ydCB7IE5iV2luZG93UmVmIH0gZnJvbSAnLi93aW5kb3ctcmVmJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iV2luZG93Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3kge1xuICAgIGNvbnRlbnQ6IFRlbXBsYXRlUmVmPGFueT4gfCBOYkNvbXBvbmVudFR5cGU7XG4gICAgY29udGV4dDogT2JqZWN0O1xuICAgIHdpbmRvd1JlZjogTmJXaW5kb3dSZWY7XG4gICAgY29uZmlnOiBOYldpbmRvd0NvbmZpZztcbiAgICBwcm90ZWN0ZWQgZm9jdXNUcmFwRmFjdG9yeTogTmJGb2N1c1RyYXBGYWN0b3J5U2VydmljZTtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbiAgICBnZXQgaXNGdWxsU2NyZWVuKCk6IGJvb2xlYW47XG4gICAgZ2V0IG1heGltaXplZCgpOiBib29sZWFuO1xuICAgIGdldCBtaW5pbWl6ZWQoKTogYm9vbGVhbjtcbiAgICBvdmVybGF5Q29udGFpbmVyOiBOYk92ZXJsYXlDb250YWluZXJDb21wb25lbnQ7XG4gICAgcHJvdGVjdGVkIGZvY3VzVHJhcDogTmJGb2N1c1RyYXA7XG4gICAgY29uc3RydWN0b3IoY29udGVudDogVGVtcGxhdGVSZWY8YW55PiB8IE5iQ29tcG9uZW50VHlwZSwgY29udGV4dDogT2JqZWN0LCB3aW5kb3dSZWY6IE5iV2luZG93UmVmLCBjb25maWc6IE5iV2luZG93Q29uZmlnLCBmb2N1c1RyYXBGYWN0b3J5OiBOYkZvY3VzVHJhcEZhY3RvcnlTZXJ2aWNlLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbWluaW1pemUoKTogdm9pZDtcbiAgICBtYXhpbWl6ZSgpOiB2b2lkO1xuICAgIGZ1bGxTY3JlZW4oKTogdm9pZDtcbiAgICBtYXhpbWl6ZU9yRnVsbFNjcmVlbigpOiB2b2lkO1xuICAgIGNsb3NlKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGF0dGFjaFRlbXBsYXRlKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGF0dGFjaENvbXBvbmVudCgpOiB2b2lkO1xufVxuIl19