import { AfterViewInit, ElementRef, OnChanges, OnDestroy, OnInit, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { NbComponentStatus } from '../component-status';
import { NbAdjustment, NbPosition, NbPositionValues } from '../cdk/overlay/overlay-position';
import { NbTrigger } from '../cdk/overlay/overlay-trigger';
import { NbDynamicOverlay } from '../cdk/overlay/dynamic/dynamic-overlay';
import { NbDynamicOverlayHandler } from '../cdk/overlay/dynamic/dynamic-overlay-handler';
import { NbTooltipComponent } from './tooltip.component';
import { NbIconConfig } from '../icon/icon.component';
/**
 *
 * Tooltip directive for small text/icon hints.
 *
 * ### Installation
 *
 * Import `NbTooltipModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbTooltipModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * @stacked-example(Showcase, tooltip/tooltip-showcase.component)
 *
 * Tooltip can accept a hint text and/or an icon:
 * @stacked-example(With Icon, tooltip/tooltip-with-icon.component)
 *
 * Same way as Popover, tooltip can accept placement position with `nbTooltipPlacement` property:
 * @stacked-example(Placements, tooltip/tooltip-placements.component)
 *
 * It is also possible to specify tooltip color using `nbTooltipStatus` property:
 * @stacked-example(Colored Tooltips, tooltip/tooltip-colors.component)
 *
 * Tooltip has a number of triggers which provides an ability to show and hide the component in different ways:
 *
 * - Click mode shows the component when a user clicks on the host element and hides when the user clicks
 * somewhere on the document outside the component.
 * - Hint provides capability to show the component when the user hovers over the host element
 * and hide when the user hovers out of the host.
 * - Hover works like hint mode with one exception - when the user moves mouse from host element to
 * the container element the component remains open, so that it is possible to interact with it content.
 * - Focus mode is applied when user focuses the element.
 * - Noop mode - the component won't react to the user interaction.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbTooltipDirective implements OnInit, OnChanges, AfterViewInit, OnDestroy {
    protected hostRef: ElementRef;
    protected dynamicOverlayHandler: NbDynamicOverlayHandler;
    protected destroy$: Subject<void>;
    protected tooltipComponent: typeof NbTooltipComponent;
    protected dynamicOverlay: NbDynamicOverlay;
    protected offset: number;
    context: Object;
    /**
     * Tooltip message
     */
    content: string;
    /**
     * Position will be calculated relatively host element based on the position.
     * Can be top, right, bottom, left, start or end.
     */
    position: NbPosition;
    static ngAcceptInputType_position: NbPositionValues;
    /**
     * Container position will change automatically based on this strategy if container can't fit view port.
     * Set this property to `noop` value if you want to disable automatic adjustment.
     * Available values: `clockwise` (default), `counterclockwise`, `vertical`, `horizontal`, `noop`.
     */
    get adjustment(): NbAdjustment;
    set adjustment(value: NbAdjustment);
    protected _adjustment: NbAdjustment;
    tooltipClass: string;
    /**
     * Accepts icon name or icon config object
     * @param {string | NbIconConfig} icon name or config object
     */
    set icon(icon: string | NbIconConfig);
    /**
     *
     * @param {string} status
     */
    set status(status: NbComponentStatus);
    /**
     * Describes when the container will be shown.
     * Available options: `click`, `hover`, `hint`, `focus` and `noop`
     * */
    trigger: NbTrigger;
    nbTooltipShowStateChange: EventEmitter<{
        isShown: boolean;
    }>;
    get isShown(): boolean;
    constructor(hostRef: ElementRef, dynamicOverlayHandler: NbDynamicOverlayHandler);
    ngOnInit(): void;
    ngOnChanges(): void;
    ngAfterViewInit(): void;
    rebuild(): void;
    show(): void;
    hide(): void;
    toggle(): void;
    ngOnDestroy(): void;
    protected configureDynamicOverlay(): NbDynamicOverlayHandler;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTooltipDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbTooltipDirective, "[nbTooltip]", ["nbTooltip"], { "position": "nbTooltipPlacement"; "tooltipClass": "nbTooltipClass"; "trigger": "nbTooltipTrigger"; "adjustment": "nbTooltipAdjustment"; "icon": "nbTooltipIcon"; "status": "nbTooltipStatus"; "content": "nbTooltip"; }, { "nbTooltipShowStateChange": "nbTooltipShowStateChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidG9vbHRpcC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpREE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5iQ29tcG9uZW50U3RhdHVzIH0gZnJvbSAnLi4vY29tcG9uZW50LXN0YXR1cyc7XG5pbXBvcnQgeyBOYkFkanVzdG1lbnQsIE5iUG9zaXRpb24sIE5iUG9zaXRpb25WYWx1ZXMgfSBmcm9tICcuLi9jZGsvb3ZlcmxheS9vdmVybGF5LXBvc2l0aW9uJztcbmltcG9ydCB7IE5iVHJpZ2dlciB9IGZyb20gJy4uL2Nkay9vdmVybGF5L292ZXJsYXktdHJpZ2dlcic7XG5pbXBvcnQgeyBOYkR5bmFtaWNPdmVybGF5IH0gZnJvbSAnLi4vY2RrL292ZXJsYXkvZHluYW1pYy9keW5hbWljLW92ZXJsYXknO1xuaW1wb3J0IHsgTmJEeW5hbWljT3ZlcmxheUhhbmRsZXIgfSBmcm9tICcuLi9jZGsvb3ZlcmxheS9keW5hbWljL2R5bmFtaWMtb3ZlcmxheS1oYW5kbGVyJztcbmltcG9ydCB7IE5iVG9vbHRpcENvbXBvbmVudCB9IGZyb20gJy4vdG9vbHRpcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmJJY29uQ29uZmlnIH0gZnJvbSAnLi4vaWNvbi9pY29uLmNvbXBvbmVudCc7XG4vKipcbiAqXG4gKiBUb29sdGlwIGRpcmVjdGl2ZSBmb3Igc21hbGwgdGV4dC9pY29uIGhpbnRzLlxuICpcbiAqICMjIyBJbnN0YWxsYXRpb25cbiAqXG4gKiBJbXBvcnQgYE5iVG9vbHRpcE1vZHVsZWAgdG8geW91ciBmZWF0dXJlIG1vZHVsZS5cbiAqIGBgYHRzXG4gKiBATmdNb2R1bGUoe1xuICogICBpbXBvcnRzOiBbXG4gKiAgICAgLy8gLi4uXG4gKiAgICAgTmJUb29sdGlwTW9kdWxlLFxuICogICBdLFxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBQYWdlTW9kdWxlIHsgfVxuICogYGBgXG4gKiAjIyMgVXNhZ2VcbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKFNob3djYXNlLCB0b29sdGlwL3Rvb2x0aXAtc2hvd2Nhc2UuY29tcG9uZW50KVxuICpcbiAqIFRvb2x0aXAgY2FuIGFjY2VwdCBhIGhpbnQgdGV4dCBhbmQvb3IgYW4gaWNvbjpcbiAqIEBzdGFja2VkLWV4YW1wbGUoV2l0aCBJY29uLCB0b29sdGlwL3Rvb2x0aXAtd2l0aC1pY29uLmNvbXBvbmVudClcbiAqXG4gKiBTYW1lIHdheSBhcyBQb3BvdmVyLCB0b29sdGlwIGNhbiBhY2NlcHQgcGxhY2VtZW50IHBvc2l0aW9uIHdpdGggYG5iVG9vbHRpcFBsYWNlbWVudGAgcHJvcGVydHk6XG4gKiBAc3RhY2tlZC1leGFtcGxlKFBsYWNlbWVudHMsIHRvb2x0aXAvdG9vbHRpcC1wbGFjZW1lbnRzLmNvbXBvbmVudClcbiAqXG4gKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIHNwZWNpZnkgdG9vbHRpcCBjb2xvciB1c2luZyBgbmJUb29sdGlwU3RhdHVzYCBwcm9wZXJ0eTpcbiAqIEBzdGFja2VkLWV4YW1wbGUoQ29sb3JlZCBUb29sdGlwcywgdG9vbHRpcC90b29sdGlwLWNvbG9ycy5jb21wb25lbnQpXG4gKlxuICogVG9vbHRpcCBoYXMgYSBudW1iZXIgb2YgdHJpZ2dlcnMgd2hpY2ggcHJvdmlkZXMgYW4gYWJpbGl0eSB0byBzaG93IGFuZCBoaWRlIHRoZSBjb21wb25lbnQgaW4gZGlmZmVyZW50IHdheXM6XG4gKlxuICogLSBDbGljayBtb2RlIHNob3dzIHRoZSBjb21wb25lbnQgd2hlbiBhIHVzZXIgY2xpY2tzIG9uIHRoZSBob3N0IGVsZW1lbnQgYW5kIGhpZGVzIHdoZW4gdGhlIHVzZXIgY2xpY2tzXG4gKiBzb21ld2hlcmUgb24gdGhlIGRvY3VtZW50IG91dHNpZGUgdGhlIGNvbXBvbmVudC5cbiAqIC0gSGludCBwcm92aWRlcyBjYXBhYmlsaXR5IHRvIHNob3cgdGhlIGNvbXBvbmVudCB3aGVuIHRoZSB1c2VyIGhvdmVycyBvdmVyIHRoZSBob3N0IGVsZW1lbnRcbiAqIGFuZCBoaWRlIHdoZW4gdGhlIHVzZXIgaG92ZXJzIG91dCBvZiB0aGUgaG9zdC5cbiAqIC0gSG92ZXIgd29ya3MgbGlrZSBoaW50IG1vZGUgd2l0aCBvbmUgZXhjZXB0aW9uIC0gd2hlbiB0aGUgdXNlciBtb3ZlcyBtb3VzZSBmcm9tIGhvc3QgZWxlbWVudCB0b1xuICogdGhlIGNvbnRhaW5lciBlbGVtZW50IHRoZSBjb21wb25lbnQgcmVtYWlucyBvcGVuLCBzbyB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIGludGVyYWN0IHdpdGggaXQgY29udGVudC5cbiAqIC0gRm9jdXMgbW9kZSBpcyBhcHBsaWVkIHdoZW4gdXNlciBmb2N1c2VzIHRoZSBlbGVtZW50LlxuICogLSBOb29wIG1vZGUgLSB0aGUgY29tcG9uZW50IHdvbid0IHJlYWN0IHRvIHRoZSB1c2VyIGludGVyYWN0aW9uLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYlRvb2x0aXBEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcm90ZWN0ZWQgaG9zdFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgZHluYW1pY092ZXJsYXlIYW5kbGVyOiBOYkR5bmFtaWNPdmVybGF5SGFuZGxlcjtcbiAgICBwcm90ZWN0ZWQgZGVzdHJveSQ6IFN1YmplY3Q8dm9pZD47XG4gICAgcHJvdGVjdGVkIHRvb2x0aXBDb21wb25lbnQ6IHR5cGVvZiBOYlRvb2x0aXBDb21wb25lbnQ7XG4gICAgcHJvdGVjdGVkIGR5bmFtaWNPdmVybGF5OiBOYkR5bmFtaWNPdmVybGF5O1xuICAgIHByb3RlY3RlZCBvZmZzZXQ6IG51bWJlcjtcbiAgICBjb250ZXh0OiBPYmplY3Q7XG4gICAgLyoqXG4gICAgICogVG9vbHRpcCBtZXNzYWdlXG4gICAgICovXG4gICAgY29udGVudDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFBvc2l0aW9uIHdpbGwgYmUgY2FsY3VsYXRlZCByZWxhdGl2ZWx5IGhvc3QgZWxlbWVudCBiYXNlZCBvbiB0aGUgcG9zaXRpb24uXG4gICAgICogQ2FuIGJlIHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc3RhcnQgb3IgZW5kLlxuICAgICAqL1xuICAgIHBvc2l0aW9uOiBOYlBvc2l0aW9uO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9wb3NpdGlvbjogTmJQb3NpdGlvblZhbHVlcztcbiAgICAvKipcbiAgICAgKiBDb250YWluZXIgcG9zaXRpb24gd2lsbCBjaGFuZ2UgYXV0b21hdGljYWxseSBiYXNlZCBvbiB0aGlzIHN0cmF0ZWd5IGlmIGNvbnRhaW5lciBjYW4ndCBmaXQgdmlldyBwb3J0LlxuICAgICAqIFNldCB0aGlzIHByb3BlcnR5IHRvIGBub29wYCB2YWx1ZSBpZiB5b3Ugd2FudCB0byBkaXNhYmxlIGF1dG9tYXRpYyBhZGp1c3RtZW50LlxuICAgICAqIEF2YWlsYWJsZSB2YWx1ZXM6IGBjbG9ja3dpc2VgIChkZWZhdWx0KSwgYGNvdW50ZXJjbG9ja3dpc2VgLCBgdmVydGljYWxgLCBgaG9yaXpvbnRhbGAsIGBub29wYC5cbiAgICAgKi9cbiAgICBnZXQgYWRqdXN0bWVudCgpOiBOYkFkanVzdG1lbnQ7XG4gICAgc2V0IGFkanVzdG1lbnQodmFsdWU6IE5iQWRqdXN0bWVudCk7XG4gICAgcHJvdGVjdGVkIF9hZGp1c3RtZW50OiBOYkFkanVzdG1lbnQ7XG4gICAgdG9vbHRpcENsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQWNjZXB0cyBpY29uIG5hbWUgb3IgaWNvbiBjb25maWcgb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBOYkljb25Db25maWd9IGljb24gbmFtZSBvciBjb25maWcgb2JqZWN0XG4gICAgICovXG4gICAgc2V0IGljb24oaWNvbjogc3RyaW5nIHwgTmJJY29uQ29uZmlnKTtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXNcbiAgICAgKi9cbiAgICBzZXQgc3RhdHVzKHN0YXR1czogTmJDb21wb25lbnRTdGF0dXMpO1xuICAgIC8qKlxuICAgICAqIERlc2NyaWJlcyB3aGVuIHRoZSBjb250YWluZXIgd2lsbCBiZSBzaG93bi5cbiAgICAgKiBBdmFpbGFibGUgb3B0aW9uczogYGNsaWNrYCwgYGhvdmVyYCwgYGhpbnRgLCBgZm9jdXNgIGFuZCBgbm9vcGBcbiAgICAgKiAqL1xuICAgIHRyaWdnZXI6IE5iVHJpZ2dlcjtcbiAgICBuYlRvb2x0aXBTaG93U3RhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGlzU2hvd246IGJvb2xlYW47XG4gICAgfT47XG4gICAgZ2V0IGlzU2hvd24oKTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3Rvcihob3N0UmVmOiBFbGVtZW50UmVmLCBkeW5hbWljT3ZlcmxheUhhbmRsZXI6IE5iRHluYW1pY092ZXJsYXlIYW5kbGVyKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgcmVidWlsZCgpOiB2b2lkO1xuICAgIHNob3coKTogdm9pZDtcbiAgICBoaWRlKCk6IHZvaWQ7XG4gICAgdG9nZ2xlKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgY29uZmlndXJlRHluYW1pY092ZXJsYXkoKTogTmJEeW5hbWljT3ZlcmxheUhhbmRsZXI7XG59XG4iXX0=