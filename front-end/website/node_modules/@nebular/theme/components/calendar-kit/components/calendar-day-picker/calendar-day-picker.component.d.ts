/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { EventEmitter, OnChanges, SimpleChanges, Type } from '@angular/core';
import { NbCalendarMonthModelService } from '../../services/calendar-month-model.service';
import { NbCalendarCell, NbCalendarSize, NbCalendarSizeValues } from '../../model';
import { NbBooleanInput } from '../../../helpers';
/**
 * Provides capability pick days.
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbCalendarDayPickerComponent<D, T> implements OnChanges {
    private monthModel;
    /**
     * Describes which month picker have to render.
     * */
    visibleDate: D;
    /**
     * Defines if we should render previous and next months
     * in the current month view.
     * */
    boundingMonths: boolean;
    /**
     * Minimum available date for selection.
     * */
    min: D;
    /**
     * Maximum available date for selection.
     * */
    max: D;
    /**
     * Predicate that decides which cells will be disabled.
     * */
    filter: (D: any) => boolean;
    /**
     * Custom day cell component. Have to implement `NbCalendarCell` interface.
     * */
    set setCellComponent(cellComponent: Type<NbCalendarCell<D, T>>);
    cellComponent: Type<NbCalendarCell<any, any>>;
    /**
     * Size of the component.
     * Can be 'medium' which is default or 'large'.
     * */
    size: NbCalendarSize;
    static ngAcceptInputType_size: NbCalendarSizeValues;
    /**
     * Already selected date.
     * */
    date: T;
    /**
     * Determines should we show week numbers column.
     * False by default.
     * */
    get showWeekNumber(): boolean;
    set showWeekNumber(value: boolean);
    protected _showWeekNumber: boolean;
    static ngAcceptInputType_showWeekNumber: NbBooleanInput;
    /**
     * Sets symbol used as a header for week numbers column
     * */
    weekNumberSymbol: string;
    /**
     * Fires newly selected date.
     * */
    dateChange: EventEmitter<D>;
    get large(): boolean;
    /**
     * Day picker model.
     * Provides all days in current month and if boundingMonth is true some days
     * from previous and next one.
     * */
    weeks: D[][];
    constructor(monthModel: NbCalendarMonthModelService<D>);
    ngOnChanges({ visibleDate }: SimpleChanges): void;
    onSelect(day: D): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbCalendarDayPickerComponent<any, any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbCalendarDayPickerComponent<any, any>, "nb-calendar-day-picker", never, { "boundingMonths": "boundingMonths"; "size": "size"; "setCellComponent": "cellComponent"; "showWeekNumber": "showWeekNumber"; "visibleDate": "visibleDate"; "min": "min"; "max": "max"; "filter": "filter"; "date": "date"; "weekNumberSymbol": "weekNumberSymbol"; }, { "dateChange": "dateChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItZGF5LXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2FsZW5kYXItZGF5LXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnRUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICovXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmJDYWxlbmRhck1vbnRoTW9kZWxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2FsZW5kYXItbW9udGgtbW9kZWwuc2VydmljZSc7XG5pbXBvcnQgeyBOYkNhbGVuZGFyQ2VsbCwgTmJDYWxlbmRhclNpemUsIE5iQ2FsZW5kYXJTaXplVmFsdWVzIH0gZnJvbSAnLi4vLi4vbW9kZWwnO1xuaW1wb3J0IHsgTmJCb29sZWFuSW5wdXQgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzJztcbi8qKlxuICogUHJvdmlkZXMgY2FwYWJpbGl0eSBwaWNrIGRheXMuXG4gKiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJDYWxlbmRhckRheVBpY2tlckNvbXBvbmVudDxELCBUPiBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBtb250aE1vZGVsO1xuICAgIC8qKlxuICAgICAqIERlc2NyaWJlcyB3aGljaCBtb250aCBwaWNrZXIgaGF2ZSB0byByZW5kZXIuXG4gICAgICogKi9cbiAgICB2aXNpYmxlRGF0ZTogRDtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGlmIHdlIHNob3VsZCByZW5kZXIgcHJldmlvdXMgYW5kIG5leHQgbW9udGhzXG4gICAgICogaW4gdGhlIGN1cnJlbnQgbW9udGggdmlldy5cbiAgICAgKiAqL1xuICAgIGJvdW5kaW5nTW9udGhzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE1pbmltdW0gYXZhaWxhYmxlIGRhdGUgZm9yIHNlbGVjdGlvbi5cbiAgICAgKiAqL1xuICAgIG1pbjogRDtcbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIGF2YWlsYWJsZSBkYXRlIGZvciBzZWxlY3Rpb24uXG4gICAgICogKi9cbiAgICBtYXg6IEQ7XG4gICAgLyoqXG4gICAgICogUHJlZGljYXRlIHRoYXQgZGVjaWRlcyB3aGljaCBjZWxscyB3aWxsIGJlIGRpc2FibGVkLlxuICAgICAqICovXG4gICAgZmlsdGVyOiAoRDogYW55KSA9PiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEN1c3RvbSBkYXkgY2VsbCBjb21wb25lbnQuIEhhdmUgdG8gaW1wbGVtZW50IGBOYkNhbGVuZGFyQ2VsbGAgaW50ZXJmYWNlLlxuICAgICAqICovXG4gICAgc2V0IHNldENlbGxDb21wb25lbnQoY2VsbENvbXBvbmVudDogVHlwZTxOYkNhbGVuZGFyQ2VsbDxELCBUPj4pO1xuICAgIGNlbGxDb21wb25lbnQ6IFR5cGU8TmJDYWxlbmRhckNlbGw8YW55LCBhbnk+PjtcbiAgICAvKipcbiAgICAgKiBTaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICogQ2FuIGJlICdtZWRpdW0nIHdoaWNoIGlzIGRlZmF1bHQgb3IgJ2xhcmdlJy5cbiAgICAgKiAqL1xuICAgIHNpemU6IE5iQ2FsZW5kYXJTaXplO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9zaXplOiBOYkNhbGVuZGFyU2l6ZVZhbHVlcztcbiAgICAvKipcbiAgICAgKiBBbHJlYWR5IHNlbGVjdGVkIGRhdGUuXG4gICAgICogKi9cbiAgICBkYXRlOiBUO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgc2hvdWxkIHdlIHNob3cgd2VlayBudW1iZXJzIGNvbHVtbi5cbiAgICAgKiBGYWxzZSBieSBkZWZhdWx0LlxuICAgICAqICovXG4gICAgZ2V0IHNob3dXZWVrTnVtYmVyKCk6IGJvb2xlYW47XG4gICAgc2V0IHNob3dXZWVrTnVtYmVyKHZhbHVlOiBib29sZWFuKTtcbiAgICBwcm90ZWN0ZWQgX3Nob3dXZWVrTnVtYmVyOiBib29sZWFuO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9zaG93V2Vla051bWJlcjogTmJCb29sZWFuSW5wdXQ7XG4gICAgLyoqXG4gICAgICogU2V0cyBzeW1ib2wgdXNlZCBhcyBhIGhlYWRlciBmb3Igd2VlayBudW1iZXJzIGNvbHVtblxuICAgICAqICovXG4gICAgd2Vla051bWJlclN5bWJvbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIG5ld2x5IHNlbGVjdGVkIGRhdGUuXG4gICAgICogKi9cbiAgICBkYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RD47XG4gICAgZ2V0IGxhcmdlKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGF5IHBpY2tlciBtb2RlbC5cbiAgICAgKiBQcm92aWRlcyBhbGwgZGF5cyBpbiBjdXJyZW50IG1vbnRoIGFuZCBpZiBib3VuZGluZ01vbnRoIGlzIHRydWUgc29tZSBkYXlzXG4gICAgICogZnJvbSBwcmV2aW91cyBhbmQgbmV4dCBvbmUuXG4gICAgICogKi9cbiAgICB3ZWVrczogRFtdW107XG4gICAgY29uc3RydWN0b3IobW9udGhNb2RlbDogTmJDYWxlbmRhck1vbnRoTW9kZWxTZXJ2aWNlPEQ+KTtcbiAgICBuZ09uQ2hhbmdlcyh7IHZpc2libGVEYXRlIH06IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG9uU2VsZWN0KGRheTogRCk6IHZvaWQ7XG59XG4iXX0=