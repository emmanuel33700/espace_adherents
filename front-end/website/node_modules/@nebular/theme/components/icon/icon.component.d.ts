/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { ElementRef, OnChanges, OnInit, Renderer2 } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { NbComponentStatus } from '../component-status';
import { NbIconLibraries } from './icon-libraries';
import * as ɵngcc0 from '@angular/core';
export interface NbIconConfig {
    icon: string;
    pack?: string;
    status?: NbComponentStatus;
    options?: {
        [name: string]: any;
    };
}
/**
 * Icon component. Allows to render both `svg` and `font` icons.
 * Starting from Nebular 4.0 uses [Eva Icons](https://akveo.github.io/eva-icons/) pack by default.
 *
 * Basic icon example:
 * @stacked-example(Showcase, icon/icon-showcase.component)
 *
 * Icon configuration:
 *
 * ```html
 * <nb-icon icon="star"></nb-icon>
 * ```
 * ### Installation
 *
 * By default Nebular comes without any pre-installed icon pack.
 * Starting with Nebular 4.0.0 we ship separate package called `@nebular/eva-icons`
 * which integrates SVG [Eva Icons](https://akveo.github.io/eva-icons/) pack to Nebular. To add it to your
 * project run:
 * ```sh
 * npm i @nebular/eva-icons
 * ```
 * This command will install Eva Icons pack. Then register `NbEvaIconsModule` into your app module:
 * ```ts
 * import { NbEvaIconsModule } from '@nebular/eva-icons';
 *
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbEvaIconsModule,
 *   ],
 * })
 * export class AppModule { }
 * ```
 * Last thing, import `NbIconModule` to your feature module where you need to show an icon:
 * ```ts
 * import { NbIconModule } from '@nebular/theme';
 *
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbIconModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Icon can be colored using `status` input:
 * ```html
 * <nb-icon icon="star" status="warning"></nb-icon>
 * ```
 *
 * Colored icons:
 * @stacked-example(Colored Icons, icon/icon-colors.component)
 *
 * In case you need to specify an icon from a specific icon pack, this could be done using `pack` input property:
 * ```html
 * <nb-icon icon="star" pack="font-awesome"></nb-icon>
 * ```
 * Additional icon settings (if available by the icon pack) could be passed using `options` input:
 *
 * ```html
 * <nb-icon icon="star" [options]="{ animation: { type: 'zoom' } }"></nb-icon>
 * ```
 *
 * @styles
 *
 * icon-font-size:
 * icon-line-height:
 * icon-width:
 * icon-height:
 * icon-svg-vertical-align:
 * icon-basic-color:
 * icon-primary-color:
 * icon-info-color:
 * icon-success-color:
 * icon-warning-color:
 * icon-danger-color:
 * icon-control-color:
 */
export declare class NbIconComponent implements NbIconConfig, OnChanges, OnInit {
    protected sanitizer: DomSanitizer;
    protected iconLibrary: NbIconLibraries;
    protected el: ElementRef;
    protected renderer: Renderer2;
    protected iconDef: any;
    protected prevClasses: any[];
    html: SafeHtml;
    get primary(): boolean;
    get info(): boolean;
    get success(): boolean;
    get warning(): boolean;
    get danger(): boolean;
    get basic(): boolean;
    get control(): boolean;
    /**
     * Icon name
     * @param {string} status
     */
    icon: string;
    /**
     * Icon pack name
     * @param {string} status
     */
    pack: string;
    /**
     * Additional icon settings
     * @param {[name: string]: any}
     */
    options: {
        [name: string]: any;
    };
    /**
     * Icon status (adds specific styles):
     * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`
     */
    status?: NbComponentStatus;
    /**
     * Sets all icon configurable properties via config object.
     * If passed value is a string set icon name.
     * @docs-private
     */
    get config(): string | NbIconConfig;
    set config(value: string | NbIconConfig);
    protected _config: string | NbIconConfig;
    constructor(sanitizer: DomSanitizer, iconLibrary: NbIconLibraries, el: ElementRef, renderer: Renderer2);
    ngOnInit(): void;
    ngOnChanges(): void;
    renderIcon(name: string, pack?: string, options?: {
        [name: string]: any;
    }): import("./icon-libraries").NbIconDefinition;
    protected assignClasses(classes: string[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbIconComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbIconComponent, "nb-icon", never, { "config": "config"; "icon": "icon"; "pack": "pack"; "status": "status"; "options": "options"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaWNvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNElBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgTmJDb21wb25lbnRTdGF0dXMgfSBmcm9tICcuLi9jb21wb25lbnQtc3RhdHVzJztcbmltcG9ydCB7IE5iSWNvbkxpYnJhcmllcyB9IGZyb20gJy4vaWNvbi1saWJyYXJpZXMnO1xuZXhwb3J0IGludGVyZmFjZSBOYkljb25Db25maWcge1xuICAgIGljb246IHN0cmluZztcbiAgICBwYWNrPzogc3RyaW5nO1xuICAgIHN0YXR1cz86IE5iQ29tcG9uZW50U3RhdHVzO1xuICAgIG9wdGlvbnM/OiB7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbn1cbi8qKlxuICogSWNvbiBjb21wb25lbnQuIEFsbG93cyB0byByZW5kZXIgYm90aCBgc3ZnYCBhbmQgYGZvbnRgIGljb25zLlxuICogU3RhcnRpbmcgZnJvbSBOZWJ1bGFyIDQuMCB1c2VzIFtFdmEgSWNvbnNdKGh0dHBzOi8vYWt2ZW8uZ2l0aHViLmlvL2V2YS1pY29ucy8pIHBhY2sgYnkgZGVmYXVsdC5cbiAqXG4gKiBCYXNpYyBpY29uIGV4YW1wbGU6XG4gKiBAc3RhY2tlZC1leGFtcGxlKFNob3djYXNlLCBpY29uL2ljb24tc2hvd2Nhc2UuY29tcG9uZW50KVxuICpcbiAqIEljb24gY29uZmlndXJhdGlvbjpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmItaWNvbiBpY29uPVwic3RhclwiPjwvbmItaWNvbj5cbiAqIGBgYFxuICogIyMjIEluc3RhbGxhdGlvblxuICpcbiAqIEJ5IGRlZmF1bHQgTmVidWxhciBjb21lcyB3aXRob3V0IGFueSBwcmUtaW5zdGFsbGVkIGljb24gcGFjay5cbiAqIFN0YXJ0aW5nIHdpdGggTmVidWxhciA0LjAuMCB3ZSBzaGlwIHNlcGFyYXRlIHBhY2thZ2UgY2FsbGVkIGBAbmVidWxhci9ldmEtaWNvbnNgXG4gKiB3aGljaCBpbnRlZ3JhdGVzIFNWRyBbRXZhIEljb25zXShodHRwczovL2FrdmVvLmdpdGh1Yi5pby9ldmEtaWNvbnMvKSBwYWNrIHRvIE5lYnVsYXIuIFRvIGFkZCBpdCB0byB5b3VyXG4gKiBwcm9qZWN0IHJ1bjpcbiAqIGBgYHNoXG4gKiBucG0gaSBAbmVidWxhci9ldmEtaWNvbnNcbiAqIGBgYFxuICogVGhpcyBjb21tYW5kIHdpbGwgaW5zdGFsbCBFdmEgSWNvbnMgcGFjay4gVGhlbiByZWdpc3RlciBgTmJFdmFJY29uc01vZHVsZWAgaW50byB5b3VyIGFwcCBtb2R1bGU6XG4gKiBgYGB0c1xuICogaW1wb3J0IHsgTmJFdmFJY29uc01vZHVsZSB9IGZyb20gJ0BuZWJ1bGFyL2V2YS1pY29ucyc7XG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIC8vIC4uLlxuICogICAgIE5iRXZhSWNvbnNNb2R1bGUsXG4gKiAgIF0sXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7IH1cbiAqIGBgYFxuICogTGFzdCB0aGluZywgaW1wb3J0IGBOYkljb25Nb2R1bGVgIHRvIHlvdXIgZmVhdHVyZSBtb2R1bGUgd2hlcmUgeW91IG5lZWQgdG8gc2hvdyBhbiBpY29uOlxuICogYGBgdHNcbiAqIGltcG9ydCB7IE5iSWNvbk1vZHVsZSB9IGZyb20gJ0BuZWJ1bGFyL3RoZW1lJztcbiAqXG4gKiBATmdNb2R1bGUoe1xuICogICBpbXBvcnRzOiBbXG4gKiAgICAgLy8gLi4uXG4gKiAgICAgTmJJY29uTW9kdWxlLFxuICogICBdLFxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBQYWdlTW9kdWxlIHsgfVxuICogYGBgXG4gKiAjIyMgVXNhZ2VcbiAqXG4gKiBJY29uIGNhbiBiZSBjb2xvcmVkIHVzaW5nIGBzdGF0dXNgIGlucHV0OlxuICogYGBgaHRtbFxuICogPG5iLWljb24gaWNvbj1cInN0YXJcIiBzdGF0dXM9XCJ3YXJuaW5nXCI+PC9uYi1pY29uPlxuICogYGBgXG4gKlxuICogQ29sb3JlZCBpY29uczpcbiAqIEBzdGFja2VkLWV4YW1wbGUoQ29sb3JlZCBJY29ucywgaWNvbi9pY29uLWNvbG9ycy5jb21wb25lbnQpXG4gKlxuICogSW4gY2FzZSB5b3UgbmVlZCB0byBzcGVjaWZ5IGFuIGljb24gZnJvbSBhIHNwZWNpZmljIGljb24gcGFjaywgdGhpcyBjb3VsZCBiZSBkb25lIHVzaW5nIGBwYWNrYCBpbnB1dCBwcm9wZXJ0eTpcbiAqIGBgYGh0bWxcbiAqIDxuYi1pY29uIGljb249XCJzdGFyXCIgcGFjaz1cImZvbnQtYXdlc29tZVwiPjwvbmItaWNvbj5cbiAqIGBgYFxuICogQWRkaXRpb25hbCBpY29uIHNldHRpbmdzIChpZiBhdmFpbGFibGUgYnkgdGhlIGljb24gcGFjaykgY291bGQgYmUgcGFzc2VkIHVzaW5nIGBvcHRpb25zYCBpbnB1dDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmItaWNvbiBpY29uPVwic3RhclwiIFtvcHRpb25zXT1cInsgYW5pbWF0aW9uOiB7IHR5cGU6ICd6b29tJyB9IH1cIj48L25iLWljb24+XG4gKiBgYGBcbiAqXG4gKiBAc3R5bGVzXG4gKlxuICogaWNvbi1mb250LXNpemU6XG4gKiBpY29uLWxpbmUtaGVpZ2h0OlxuICogaWNvbi13aWR0aDpcbiAqIGljb24taGVpZ2h0OlxuICogaWNvbi1zdmctdmVydGljYWwtYWxpZ246XG4gKiBpY29uLWJhc2ljLWNvbG9yOlxuICogaWNvbi1wcmltYXJ5LWNvbG9yOlxuICogaWNvbi1pbmZvLWNvbG9yOlxuICogaWNvbi1zdWNjZXNzLWNvbG9yOlxuICogaWNvbi13YXJuaW5nLWNvbG9yOlxuICogaWNvbi1kYW5nZXItY29sb3I6XG4gKiBpY29uLWNvbnRyb2wtY29sb3I6XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iSWNvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE5iSWNvbkNvbmZpZywgT25DaGFuZ2VzLCBPbkluaXQge1xuICAgIHByb3RlY3RlZCBzYW5pdGl6ZXI6IERvbVNhbml0aXplcjtcbiAgICBwcm90ZWN0ZWQgaWNvbkxpYnJhcnk6IE5iSWNvbkxpYnJhcmllcztcbiAgICBwcm90ZWN0ZWQgZWw6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgcHJvdGVjdGVkIGljb25EZWY6IGFueTtcbiAgICBwcm90ZWN0ZWQgcHJldkNsYXNzZXM6IGFueVtdO1xuICAgIGh0bWw6IFNhZmVIdG1sO1xuICAgIGdldCBwcmltYXJ5KCk6IGJvb2xlYW47XG4gICAgZ2V0IGluZm8oKTogYm9vbGVhbjtcbiAgICBnZXQgc3VjY2VzcygpOiBib29sZWFuO1xuICAgIGdldCB3YXJuaW5nKCk6IGJvb2xlYW47XG4gICAgZ2V0IGRhbmdlcigpOiBib29sZWFuO1xuICAgIGdldCBiYXNpYygpOiBib29sZWFuO1xuICAgIGdldCBjb250cm9sKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogSWNvbiBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXR1c1xuICAgICAqL1xuICAgIGljb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBJY29uIHBhY2sgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXNcbiAgICAgKi9cbiAgICBwYWNrOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQWRkaXRpb25hbCBpY29uIHNldHRpbmdzXG4gICAgICogQHBhcmFtIHtbbmFtZTogc3RyaW5nXTogYW55fVxuICAgICAqL1xuICAgIG9wdGlvbnM6IHtcbiAgICAgICAgW25hbWU6IHN0cmluZ106IGFueTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEljb24gc3RhdHVzIChhZGRzIHNwZWNpZmljIHN0eWxlcyk6XG4gICAgICogYGJhc2ljYCwgYHByaW1hcnlgLCBgaW5mb2AsIGBzdWNjZXNzYCwgYHdhcm5pbmdgLCBgZGFuZ2VyYCwgYGNvbnRyb2xgXG4gICAgICovXG4gICAgc3RhdHVzPzogTmJDb21wb25lbnRTdGF0dXM7XG4gICAgLyoqXG4gICAgICogU2V0cyBhbGwgaWNvbiBjb25maWd1cmFibGUgcHJvcGVydGllcyB2aWEgY29uZmlnIG9iamVjdC5cbiAgICAgKiBJZiBwYXNzZWQgdmFsdWUgaXMgYSBzdHJpbmcgc2V0IGljb24gbmFtZS5cbiAgICAgKiBAZG9jcy1wcml2YXRlXG4gICAgICovXG4gICAgZ2V0IGNvbmZpZygpOiBzdHJpbmcgfCBOYkljb25Db25maWc7XG4gICAgc2V0IGNvbmZpZyh2YWx1ZTogc3RyaW5nIHwgTmJJY29uQ29uZmlnKTtcbiAgICBwcm90ZWN0ZWQgX2NvbmZpZzogc3RyaW5nIHwgTmJJY29uQ29uZmlnO1xuICAgIGNvbnN0cnVjdG9yKHNhbml0aXplcjogRG9tU2FuaXRpemVyLCBpY29uTGlicmFyeTogTmJJY29uTGlicmFyaWVzLCBlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIHJlbmRlckljb24obmFtZTogc3RyaW5nLCBwYWNrPzogc3RyaW5nLCBvcHRpb25zPzoge1xuICAgICAgICBbbmFtZTogc3RyaW5nXTogYW55O1xuICAgIH0pOiBpbXBvcnQoXCIuL2ljb24tbGlicmFyaWVzXCIpLk5iSWNvbkRlZmluaXRpb247XG4gICAgcHJvdGVjdGVkIGFzc2lnbkNsYXNzZXMoY2xhc3Nlczogc3RyaW5nW10pOiB2b2lkO1xufVxuIl19