/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { ChangeDetectorRef, ElementRef, EventEmitter, QueryList, AfterContentInit, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { NbComponentSize } from '../component-size';
import { NbPosition } from '../cdk/overlay/overlay-position';
import { NbOptionComponent } from '../option/option.component';
import { NbPortalDirective } from '../cdk/overlay/mapping';
/**
 * The `NbAutocompleteComponent` overlay component.
 * Provides an `NbOptionList` overlay component.
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbAutocompleteComponent<T> implements AfterContentInit, OnDestroy {
    protected cd: ChangeDetectorRef;
    protected destroy$: Subject<void>;
    /**
     * HTML input reference to which autocomplete connected.
     * */
    hostRef: ElementRef;
    /**
     * Component scoped id for aria attributes.
     * */
    id: string;
    /**
     * @docs-private
     * Current overlay position because of we have to toggle overlayPosition
     * in [ngClass] direction.
     */
    _overlayPosition: NbPosition;
    get overlayPosition(): NbPosition;
    set overlayPosition(value: NbPosition);
    /**
     * Returns width of the input.
     * */
    get hostWidth(): number;
    /**
     * Function passed as input to process each string option value before render.
     * */
    handleDisplayFn: ((value: any) => string);
    /**
     * Autocomplete size, available sizes:
     * `tiny`, `small`, `medium` (default), `large`, `giant`
     */
    size: NbComponentSize;
    /**
     * Flag passed as input to always make first option active.
     * */
    activeFirst: boolean;
    /**
     * Will be emitted when selected value changes.
     * */
    selectedChange: EventEmitter<T>;
    /**
      * List of `NbOptionComponent`'s components passed as content.
    * */
    options: QueryList<NbOptionComponent<T>>;
    /**
     * NbOptionList with options content.
     * */
    portal: NbPortalDirective;
    constructor(cd: ChangeDetectorRef);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
     * Autocomplete knows nothing about host html input element.
     * So, attach method set input hostRef for styling.
     * */
    setHost(hostRef: ElementRef): void;
    /**
     * Propagate selected value.
     * */
    emitSelected(selected: T): void;
    get tiny(): boolean;
    get small(): boolean;
    get medium(): boolean;
    get large(): boolean;
    get giant(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbAutocompleteComponent<any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbAutocompleteComponent<any>, "nb-autocomplete", never, { "size": "size"; "activeFirst": "activeFirst"; "handleDisplayFn": "handleDisplayFn"; }, { "selectedChange": "selectedChange"; }, ["options"], ["nb-option, nb-option-group"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhdXRvY29tcGxldGUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlFQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYkNvbXBvbmVudFNpemUgfSBmcm9tICcuLi9jb21wb25lbnQtc2l6ZSc7XG5pbXBvcnQgeyBOYlBvc2l0aW9uIH0gZnJvbSAnLi4vY2RrL292ZXJsYXkvb3ZlcmxheS1wb3NpdGlvbic7XG5pbXBvcnQgeyBOYk9wdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uL29wdGlvbi9vcHRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IE5iUG9ydGFsRGlyZWN0aXZlIH0gZnJvbSAnLi4vY2RrL292ZXJsYXkvbWFwcGluZyc7XG4vKipcbiAqIFRoZSBgTmJBdXRvY29tcGxldGVDb21wb25lbnRgIG92ZXJsYXkgY29tcG9uZW50LlxuICogUHJvdmlkZXMgYW4gYE5iT3B0aW9uTGlzdGAgb3ZlcmxheSBjb21wb25lbnQuXG4gKiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJBdXRvY29tcGxldGVDb21wb25lbnQ8VD4gaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJvdGVjdGVkIGRlc3Ryb3kkOiBTdWJqZWN0PHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIEhUTUwgaW5wdXQgcmVmZXJlbmNlIHRvIHdoaWNoIGF1dG9jb21wbGV0ZSBjb25uZWN0ZWQuXG4gICAgICogKi9cbiAgICBob3N0UmVmOiBFbGVtZW50UmVmO1xuICAgIC8qKlxuICAgICAqIENvbXBvbmVudCBzY29wZWQgaWQgZm9yIGFyaWEgYXR0cmlidXRlcy5cbiAgICAgKiAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGRvY3MtcHJpdmF0ZVxuICAgICAqIEN1cnJlbnQgb3ZlcmxheSBwb3NpdGlvbiBiZWNhdXNlIG9mIHdlIGhhdmUgdG8gdG9nZ2xlIG92ZXJsYXlQb3NpdGlvblxuICAgICAqIGluIFtuZ0NsYXNzXSBkaXJlY3Rpb24uXG4gICAgICovXG4gICAgX292ZXJsYXlQb3NpdGlvbjogTmJQb3NpdGlvbjtcbiAgICBnZXQgb3ZlcmxheVBvc2l0aW9uKCk6IE5iUG9zaXRpb247XG4gICAgc2V0IG92ZXJsYXlQb3NpdGlvbih2YWx1ZTogTmJQb3NpdGlvbik7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aWR0aCBvZiB0aGUgaW5wdXQuXG4gICAgICogKi9cbiAgICBnZXQgaG9zdFdpZHRoKCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiBwYXNzZWQgYXMgaW5wdXQgdG8gcHJvY2VzcyBlYWNoIHN0cmluZyBvcHRpb24gdmFsdWUgYmVmb3JlIHJlbmRlci5cbiAgICAgKiAqL1xuICAgIGhhbmRsZURpc3BsYXlGbjogKCh2YWx1ZTogYW55KSA9PiBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIEF1dG9jb21wbGV0ZSBzaXplLCBhdmFpbGFibGUgc2l6ZXM6XG4gICAgICogYHRpbnlgLCBgc21hbGxgLCBgbWVkaXVtYCAoZGVmYXVsdCksIGBsYXJnZWAsIGBnaWFudGBcbiAgICAgKi9cbiAgICBzaXplOiBOYkNvbXBvbmVudFNpemU7XG4gICAgLyoqXG4gICAgICogRmxhZyBwYXNzZWQgYXMgaW5wdXQgdG8gYWx3YXlzIG1ha2UgZmlyc3Qgb3B0aW9uIGFjdGl2ZS5cbiAgICAgKiAqL1xuICAgIGFjdGl2ZUZpcnN0OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFdpbGwgYmUgZW1pdHRlZCB3aGVuIHNlbGVjdGVkIHZhbHVlIGNoYW5nZXMuXG4gICAgICogKi9cbiAgICBzZWxlY3RlZENoYW5nZTogRXZlbnRFbWl0dGVyPFQ+O1xuICAgIC8qKlxuICAgICAgKiBMaXN0IG9mIGBOYk9wdGlvbkNvbXBvbmVudGAncyBjb21wb25lbnRzIHBhc3NlZCBhcyBjb250ZW50LlxuICAgICogKi9cbiAgICBvcHRpb25zOiBRdWVyeUxpc3Q8TmJPcHRpb25Db21wb25lbnQ8VD4+O1xuICAgIC8qKlxuICAgICAqIE5iT3B0aW9uTGlzdCB3aXRoIG9wdGlvbnMgY29udGVudC5cbiAgICAgKiAqL1xuICAgIHBvcnRhbDogTmJQb3J0YWxEaXJlY3RpdmU7XG4gICAgY29uc3RydWN0b3IoY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEF1dG9jb21wbGV0ZSBrbm93cyBub3RoaW5nIGFib3V0IGhvc3QgaHRtbCBpbnB1dCBlbGVtZW50LlxuICAgICAqIFNvLCBhdHRhY2ggbWV0aG9kIHNldCBpbnB1dCBob3N0UmVmIGZvciBzdHlsaW5nLlxuICAgICAqICovXG4gICAgc2V0SG9zdChob3N0UmVmOiBFbGVtZW50UmVmKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBQcm9wYWdhdGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAgICogKi9cbiAgICBlbWl0U2VsZWN0ZWQoc2VsZWN0ZWQ6IFQpOiB2b2lkO1xuICAgIGdldCB0aW55KCk6IGJvb2xlYW47XG4gICAgZ2V0IHNtYWxsKCk6IGJvb2xlYW47XG4gICAgZ2V0IG1lZGl1bSgpOiBib29sZWFuO1xuICAgIGdldCBsYXJnZSgpOiBib29sZWFuO1xuICAgIGdldCBnaWFudCgpOiBib29sZWFuO1xufVxuIl19