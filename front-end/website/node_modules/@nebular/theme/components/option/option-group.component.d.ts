import { AfterContentInit, OnDestroy, QueryList } from '@angular/core';
import { Subject } from 'rxjs';
import { NbBooleanInput } from '../helpers';
import { NbOptionComponent } from './option.component';
/**
 * NbOptionGroupComponent
 *
 * @styles
 *
 * option-group-text-color:
 * option-group-tiny-start-padding:
 * option-group-small-start-padding:
 * option-group-medium-start-padding:
 * option-group-large-start-padding:
 * option-group-giant-start-padding:
 **/
import * as ɵngcc0 from '@angular/core';
export declare class NbOptionGroupComponent implements AfterContentInit, OnDestroy {
    protected destroy$: Subject<void>;
    title: string;
    get disabled(): boolean;
    set disabled(value: boolean);
    protected _disabled: boolean;
    static ngAcceptInputType_disabled: NbBooleanInput;
    get disabledAttribute(): '' | null;
    options: QueryList<NbOptionComponent<any>>;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
     * Sets disabled state for each option to current group disabled state.
     */
    protected updateOptionsDisabledState(): void;
    /**
     * Updates options disabled state after promise resolution.
     * This way change detection will be triggered after options state updated.
     * Use this method when updating options during change detection run (e.g. QueryList.changes, lifecycle hooks).
     */
    protected asyncUpdateOptionsDisabledState(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbOptionGroupComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbOptionGroupComponent, "nb-option-group", never, { "disabled": "disabled"; "title": "title"; }, {}, ["options"], ["nb-option, ng-container"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLWdyb3VwLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJvcHRpb24tZ3JvdXAuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYkJvb2xlYW5JbnB1dCB9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IHsgTmJPcHRpb25Db21wb25lbnQgfSBmcm9tICcuL29wdGlvbi5jb21wb25lbnQnO1xuLyoqXG4gKiBOYk9wdGlvbkdyb3VwQ29tcG9uZW50XG4gKlxuICogQHN0eWxlc1xuICpcbiAqIG9wdGlvbi1ncm91cC10ZXh0LWNvbG9yOlxuICogb3B0aW9uLWdyb3VwLXRpbnktc3RhcnQtcGFkZGluZzpcbiAqIG9wdGlvbi1ncm91cC1zbWFsbC1zdGFydC1wYWRkaW5nOlxuICogb3B0aW9uLWdyb3VwLW1lZGl1bS1zdGFydC1wYWRkaW5nOlxuICogb3B0aW9uLWdyb3VwLWxhcmdlLXN0YXJ0LXBhZGRpbmc6XG4gKiBvcHRpb24tZ3JvdXAtZ2lhbnQtc3RhcnQtcGFkZGluZzpcbiAqKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iT3B0aW9uR3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBkZXN0cm95JDogU3ViamVjdDx2b2lkPjtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbik7XG4gICAgcHJvdGVjdGVkIF9kaXNhYmxlZDogYm9vbGVhbjtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfZGlzYWJsZWQ6IE5iQm9vbGVhbklucHV0O1xuICAgIGdldCBkaXNhYmxlZEF0dHJpYnV0ZSgpOiAnJyB8IG51bGw7XG4gICAgb3B0aW9uczogUXVlcnlMaXN0PE5iT3B0aW9uQ29tcG9uZW50PGFueT4+O1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0cyBkaXNhYmxlZCBzdGF0ZSBmb3IgZWFjaCBvcHRpb24gdG8gY3VycmVudCBncm91cCBkaXNhYmxlZCBzdGF0ZS5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdXBkYXRlT3B0aW9uc0Rpc2FibGVkU3RhdGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIG9wdGlvbnMgZGlzYWJsZWQgc3RhdGUgYWZ0ZXIgcHJvbWlzZSByZXNvbHV0aW9uLlxuICAgICAqIFRoaXMgd2F5IGNoYW5nZSBkZXRlY3Rpb24gd2lsbCBiZSB0cmlnZ2VyZWQgYWZ0ZXIgb3B0aW9ucyBzdGF0ZSB1cGRhdGVkLlxuICAgICAqIFVzZSB0aGlzIG1ldGhvZCB3aGVuIHVwZGF0aW5nIG9wdGlvbnMgZHVyaW5nIGNoYW5nZSBkZXRlY3Rpb24gcnVuIChlLmcuIFF1ZXJ5TGlzdC5jaGFuZ2VzLCBsaWZlY3ljbGUgaG9va3MpLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBhc3luY1VwZGF0ZU9wdGlvbnNEaXNhYmxlZFN0YXRlKCk6IHZvaWQ7XG59XG4iXX0=