import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, AfterViewInit, NgZone, Renderer2 } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { NbBooleanInput } from '../helpers';
import { NbFocusableOption } from '../cdk/a11y/focus-key-manager';
import { NbHighlightableOption } from '../cdk/a11y/descendant-key-manager';
import { NbSelectComponent } from '../select/select.component';
/**
 * NbOptionComponent
 *
 * @styles
 *
 * option-background-color:
 * option-text-color:
 * option-text-font-family:
 * option-hover-background-color:
 * option-hover-text-color:
 * option-active-background-color:
 * option-active-text-color:
 * option-focus-background-color:
 * option-focus-text-color:
 * option-selected-background-color:
 * option-selected-text-color:
 * option-selected-hover-background-color:
 * option-selected-hover-text-color:
 * option-selected-active-background-color:
 * option-selected-active-text-color:
 * option-selected-focus-background-color:
 * option-selected-focus-text-color:
 * option-disabled-background-color:
 * option-disabled-text-color:
 * option-tiny-text-font-size:
 * option-tiny-text-font-weight:
 * option-tiny-text-line-height:
 * option-tiny-padding:
 * option-small-text-font-size:
 * option-small-text-font-weight:
 * option-small-text-line-height:
 * option-small-padding:
 * option-medium-text-font-size:
 * option-medium-text-font-weight:
 * option-medium-text-line-height:
 * option-medium-padding:
 * option-large-text-font-size:
 * option-large-text-font-weight:
 * option-large-text-line-height:
 * option-large-padding:
 * option-giant-text-font-size:
 * option-giant-text-font-weight:
 * option-giant-text-line-height:
 * option-giant-padding:
 **/
import * as ɵngcc0 from '@angular/core';
export declare class NbOptionComponent<T = any> implements OnDestroy, AfterViewInit, NbFocusableOption, NbHighlightableOption {
    protected elementRef: ElementRef;
    protected cd: ChangeDetectorRef;
    protected zone: NgZone;
    protected renderer: Renderer2;
    protected disabledByGroup: boolean;
    /**
     * Option value that will be fired on selection.
     * */
    value: T;
    get disabled(): boolean;
    set disabled(value: boolean);
    protected _disabled: boolean;
    static ngAcceptInputType_disabled: NbBooleanInput;
    /**
     * Fires value when option selection change.
     * */
    selectionChange: EventEmitter<NbOptionComponent<T>>;
    /**
     * Fires when option clicked
     */
    protected click$: Subject<NbOptionComponent<T>>;
    get click(): Observable<NbOptionComponent<T>>;
    selected: boolean;
    protected parent: NbSelectComponent;
    protected alive: boolean;
    /**
     * Component scoped id for aria attributes.
     * */
    id: string;
    constructor(parent: any, elementRef: ElementRef, cd: ChangeDetectorRef, zone: NgZone, renderer: Renderer2);
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    /**
     * Determines should we render checkbox.
     * */
    get withCheckbox(): boolean;
    get content(): any;
    get multiple(): boolean;
    get selectedClass(): boolean;
    get disabledAttribute(): '' | null;
    get tabindex(): string;
    get activeClass(): boolean;
    protected _active: boolean;
    onClick(event: any): void;
    select(): void;
    deselect(): void;
    /**
     * Sets disabled by group state and marks component for check.
     */
    setDisabledByGroupState(disabled: boolean): void;
    protected setSelection(selected: boolean): void;
    focus(): void;
    getLabel(): string;
    setActiveStyles(): void;
    setInactiveStyles(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbOptionComponent<any>, [{ optional: true; }, null, null, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbOptionComponent<any>, "nb-option", never, { "disabled": "disabled"; "value": "value"; }, { "selectionChange": "selectionChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJvcHRpb24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtREE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIE5nWm9uZSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYkJvb2xlYW5JbnB1dCB9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IHsgTmJGb2N1c2FibGVPcHRpb24gfSBmcm9tICcuLi9jZGsvYTExeS9mb2N1cy1rZXktbWFuYWdlcic7XG5pbXBvcnQgeyBOYkhpZ2hsaWdodGFibGVPcHRpb24gfSBmcm9tICcuLi9jZGsvYTExeS9kZXNjZW5kYW50LWtleS1tYW5hZ2VyJztcbmltcG9ydCB7IE5iU2VsZWN0Q29tcG9uZW50IH0gZnJvbSAnLi4vc2VsZWN0L3NlbGVjdC5jb21wb25lbnQnO1xuLyoqXG4gKiBOYk9wdGlvbkNvbXBvbmVudFxuICpcbiAqIEBzdHlsZXNcbiAqXG4gKiBvcHRpb24tYmFja2dyb3VuZC1jb2xvcjpcbiAqIG9wdGlvbi10ZXh0LWNvbG9yOlxuICogb3B0aW9uLXRleHQtZm9udC1mYW1pbHk6XG4gKiBvcHRpb24taG92ZXItYmFja2dyb3VuZC1jb2xvcjpcbiAqIG9wdGlvbi1ob3Zlci10ZXh0LWNvbG9yOlxuICogb3B0aW9uLWFjdGl2ZS1iYWNrZ3JvdW5kLWNvbG9yOlxuICogb3B0aW9uLWFjdGl2ZS10ZXh0LWNvbG9yOlxuICogb3B0aW9uLWZvY3VzLWJhY2tncm91bmQtY29sb3I6XG4gKiBvcHRpb24tZm9jdXMtdGV4dC1jb2xvcjpcbiAqIG9wdGlvbi1zZWxlY3RlZC1iYWNrZ3JvdW5kLWNvbG9yOlxuICogb3B0aW9uLXNlbGVjdGVkLXRleHQtY29sb3I6XG4gKiBvcHRpb24tc2VsZWN0ZWQtaG92ZXItYmFja2dyb3VuZC1jb2xvcjpcbiAqIG9wdGlvbi1zZWxlY3RlZC1ob3Zlci10ZXh0LWNvbG9yOlxuICogb3B0aW9uLXNlbGVjdGVkLWFjdGl2ZS1iYWNrZ3JvdW5kLWNvbG9yOlxuICogb3B0aW9uLXNlbGVjdGVkLWFjdGl2ZS10ZXh0LWNvbG9yOlxuICogb3B0aW9uLXNlbGVjdGVkLWZvY3VzLWJhY2tncm91bmQtY29sb3I6XG4gKiBvcHRpb24tc2VsZWN0ZWQtZm9jdXMtdGV4dC1jb2xvcjpcbiAqIG9wdGlvbi1kaXNhYmxlZC1iYWNrZ3JvdW5kLWNvbG9yOlxuICogb3B0aW9uLWRpc2FibGVkLXRleHQtY29sb3I6XG4gKiBvcHRpb24tdGlueS10ZXh0LWZvbnQtc2l6ZTpcbiAqIG9wdGlvbi10aW55LXRleHQtZm9udC13ZWlnaHQ6XG4gKiBvcHRpb24tdGlueS10ZXh0LWxpbmUtaGVpZ2h0OlxuICogb3B0aW9uLXRpbnktcGFkZGluZzpcbiAqIG9wdGlvbi1zbWFsbC10ZXh0LWZvbnQtc2l6ZTpcbiAqIG9wdGlvbi1zbWFsbC10ZXh0LWZvbnQtd2VpZ2h0OlxuICogb3B0aW9uLXNtYWxsLXRleHQtbGluZS1oZWlnaHQ6XG4gKiBvcHRpb24tc21hbGwtcGFkZGluZzpcbiAqIG9wdGlvbi1tZWRpdW0tdGV4dC1mb250LXNpemU6XG4gKiBvcHRpb24tbWVkaXVtLXRleHQtZm9udC13ZWlnaHQ6XG4gKiBvcHRpb24tbWVkaXVtLXRleHQtbGluZS1oZWlnaHQ6XG4gKiBvcHRpb24tbWVkaXVtLXBhZGRpbmc6XG4gKiBvcHRpb24tbGFyZ2UtdGV4dC1mb250LXNpemU6XG4gKiBvcHRpb24tbGFyZ2UtdGV4dC1mb250LXdlaWdodDpcbiAqIG9wdGlvbi1sYXJnZS10ZXh0LWxpbmUtaGVpZ2h0OlxuICogb3B0aW9uLWxhcmdlLXBhZGRpbmc6XG4gKiBvcHRpb24tZ2lhbnQtdGV4dC1mb250LXNpemU6XG4gKiBvcHRpb24tZ2lhbnQtdGV4dC1mb250LXdlaWdodDpcbiAqIG9wdGlvbi1naWFudC10ZXh0LWxpbmUtaGVpZ2h0OlxuICogb3B0aW9uLWdpYW50LXBhZGRpbmc6XG4gKiovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYk9wdGlvbkNvbXBvbmVudDxUID0gYW55PiBpbXBsZW1lbnRzIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCwgTmJGb2N1c2FibGVPcHRpb24sIE5iSGlnaGxpZ2h0YWJsZU9wdGlvbiB7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIGNkOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcm90ZWN0ZWQgem9uZTogTmdab25lO1xuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIHByb3RlY3RlZCBkaXNhYmxlZEJ5R3JvdXA6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogT3B0aW9uIHZhbHVlIHRoYXQgd2lsbCBiZSBmaXJlZCBvbiBzZWxlY3Rpb24uXG4gICAgICogKi9cbiAgICB2YWx1ZTogVDtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pO1xuICAgIHByb3RlY3RlZCBfZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX2Rpc2FibGVkOiBOYkJvb2xlYW5JbnB1dDtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB2YWx1ZSB3aGVuIG9wdGlvbiBzZWxlY3Rpb24gY2hhbmdlLlxuICAgICAqICovXG4gICAgc2VsZWN0aW9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8TmJPcHRpb25Db21wb25lbnQ8VD4+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gb3B0aW9uIGNsaWNrZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY2xpY2skOiBTdWJqZWN0PE5iT3B0aW9uQ29tcG9uZW50PFQ+PjtcbiAgICBnZXQgY2xpY2soKTogT2JzZXJ2YWJsZTxOYk9wdGlvbkNvbXBvbmVudDxUPj47XG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIHBhcmVudDogTmJTZWxlY3RDb21wb25lbnQ7XG4gICAgcHJvdGVjdGVkIGFsaXZlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENvbXBvbmVudCBzY29wZWQgaWQgZm9yIGFyaWEgYXR0cmlidXRlcy5cbiAgICAgKiAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IocGFyZW50OiBhbnksIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgem9uZTogTmdab25lLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgc2hvdWxkIHdlIHJlbmRlciBjaGVja2JveC5cbiAgICAgKiAqL1xuICAgIGdldCB3aXRoQ2hlY2tib3goKTogYm9vbGVhbjtcbiAgICBnZXQgY29udGVudCgpOiBhbnk7XG4gICAgZ2V0IG11bHRpcGxlKCk6IGJvb2xlYW47XG4gICAgZ2V0IHNlbGVjdGVkQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBnZXQgZGlzYWJsZWRBdHRyaWJ1dGUoKTogJycgfCBudWxsO1xuICAgIGdldCB0YWJpbmRleCgpOiBzdHJpbmc7XG4gICAgZ2V0IGFjdGl2ZUNsYXNzKCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIF9hY3RpdmU6IGJvb2xlYW47XG4gICAgb25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBzZWxlY3QoKTogdm9pZDtcbiAgICBkZXNlbGVjdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldHMgZGlzYWJsZWQgYnkgZ3JvdXAgc3RhdGUgYW5kIG1hcmtzIGNvbXBvbmVudCBmb3IgY2hlY2suXG4gICAgICovXG4gICAgc2V0RGlzYWJsZWRCeUdyb3VwU3RhdGUoZGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzZXRTZWxlY3Rpb24oc2VsZWN0ZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgZ2V0TGFiZWwoKTogc3RyaW5nO1xuICAgIHNldEFjdGl2ZVN0eWxlcygpOiB2b2lkO1xuICAgIHNldEluYWN0aXZlU3R5bGVzKCk6IHZvaWQ7XG59XG4iXX0=