/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { NbBooleanInput } from '../helpers';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { NbChatMessageFile } from './chat-message-file.component';
/**
 * Chat message component.
 *
 * Multiple message types are available through a `type` property, such as
 * - text - simple text message
 * - file - could be a file preview or a file icon
 * if multiple files are provided grouped files are shown
 * - quote - quotes a message with specific quote styles
 * - map - shows a google map picture by provided [latitude] and [longitude] properties
 *
 * @stacked-example(Available Types, chat/chat-message-types-showcase.component)
 *
 * Message with attached files:
 * ```html
 * <nb-chat-message
 *   type="file"
 *   [files]="[ { url: '...' } ]"
 *   message="Hello world!">
 * </nb-chat-message>
 * ```
 *
 * Map message:
 * ```html
 * <nb-chat-message
 *   type="map"
 *   [latitude]="53.914"
 *   [longitude]="27.59"
 *   message="Here I am">
 * </nb-chat-message>
 * ```
 *
 * @styles
 *
 * chat-message-background:
 * chat-message-text-color:
 * chat-message-reply-background-color:
 * chat-message-reply-text-color:
 * chat-message-avatar-background-color:
 * chat-message-sender-text-color:
 * chat-message-quote-background-color:
 * chat-message-quote-text-color:
 * chat-message-file-text-color:
 * chat-message-file-background-color:
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbChatMessageComponent {
    protected domSanitizer: DomSanitizer;
    get flyInOut(): boolean;
    get notReply(): boolean;
    avatarStyle: SafeStyle;
    /**
     * Determines if a message is a reply
     */
    get reply(): boolean;
    set reply(value: boolean);
    protected _reply: boolean;
    static ngAcceptInputType_reply: NbBooleanInput;
    /**
     * Message sender
     * @type {string}
     */
    message: string;
    /**
     * Message sender
     * @type {string}
     */
    sender: string;
    /**
     * Message send date
     * @type {Date}
     */
    date: Date;
    /**
     * Message send date format, default 'shortTime'
     * @type {string}
     */
    dateFormat: string;
    /**
     * Array of files `{ url: 'file url', icon: 'file icon class' }`
     */
    files: NbChatMessageFile[];
    /**
     * Quoted message text
     * @type {string}
     */
    quote: string;
    /**
     * Map latitude
     * @type {number}
     */
    latitude: number;
    /**
     * Map longitude
     * @type {number}
     */
    longitude: number;
    /**
     * Message send avatar
     * @type {string}
     */
    set avatar(value: string);
    /**
     * Message type, available options `text|file|map|quote`
     * @type {string}
     */
    type: string;
    constructor(domSanitizer: DomSanitizer);
    getInitials(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbChatMessageComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbChatMessageComponent, "nb-chat-message", never, { "reply": "reply"; "avatar": "avatar"; "message": "message"; "sender": "sender"; "date": "date"; "dateFormat": "dateFormat"; "files": "files"; "quote": "quote"; "latitude": "latitude"; "longitude": "longitude"; "type": "type"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC1tZXNzYWdlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjaGF0LW1lc3NhZ2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0RBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStEQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cbmltcG9ydCB7IE5iQm9vbGVhbklucHV0IH0gZnJvbSAnLi4vaGVscGVycyc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVTdHlsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgTmJDaGF0TWVzc2FnZUZpbGUgfSBmcm9tICcuL2NoYXQtbWVzc2FnZS1maWxlLmNvbXBvbmVudCc7XG4vKipcbiAqIENoYXQgbWVzc2FnZSBjb21wb25lbnQuXG4gKlxuICogTXVsdGlwbGUgbWVzc2FnZSB0eXBlcyBhcmUgYXZhaWxhYmxlIHRocm91Z2ggYSBgdHlwZWAgcHJvcGVydHksIHN1Y2ggYXNcbiAqIC0gdGV4dCAtIHNpbXBsZSB0ZXh0IG1lc3NhZ2VcbiAqIC0gZmlsZSAtIGNvdWxkIGJlIGEgZmlsZSBwcmV2aWV3IG9yIGEgZmlsZSBpY29uXG4gKiBpZiBtdWx0aXBsZSBmaWxlcyBhcmUgcHJvdmlkZWQgZ3JvdXBlZCBmaWxlcyBhcmUgc2hvd25cbiAqIC0gcXVvdGUgLSBxdW90ZXMgYSBtZXNzYWdlIHdpdGggc3BlY2lmaWMgcXVvdGUgc3R5bGVzXG4gKiAtIG1hcCAtIHNob3dzIGEgZ29vZ2xlIG1hcCBwaWN0dXJlIGJ5IHByb3ZpZGVkIFtsYXRpdHVkZV0gYW5kIFtsb25naXR1ZGVdIHByb3BlcnRpZXNcbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKEF2YWlsYWJsZSBUeXBlcywgY2hhdC9jaGF0LW1lc3NhZ2UtdHlwZXMtc2hvd2Nhc2UuY29tcG9uZW50KVxuICpcbiAqIE1lc3NhZ2Ugd2l0aCBhdHRhY2hlZCBmaWxlczpcbiAqIGBgYGh0bWxcbiAqIDxuYi1jaGF0LW1lc3NhZ2VcbiAqICAgdHlwZT1cImZpbGVcIlxuICogICBbZmlsZXNdPVwiWyB7IHVybDogJy4uLicgfSBdXCJcbiAqICAgbWVzc2FnZT1cIkhlbGxvIHdvcmxkIVwiPlxuICogPC9uYi1jaGF0LW1lc3NhZ2U+XG4gKiBgYGBcbiAqXG4gKiBNYXAgbWVzc2FnZTpcbiAqIGBgYGh0bWxcbiAqIDxuYi1jaGF0LW1lc3NhZ2VcbiAqICAgdHlwZT1cIm1hcFwiXG4gKiAgIFtsYXRpdHVkZV09XCI1My45MTRcIlxuICogICBbbG9uZ2l0dWRlXT1cIjI3LjU5XCJcbiAqICAgbWVzc2FnZT1cIkhlcmUgSSBhbVwiPlxuICogPC9uYi1jaGF0LW1lc3NhZ2U+XG4gKiBgYGBcbiAqXG4gKiBAc3R5bGVzXG4gKlxuICogY2hhdC1tZXNzYWdlLWJhY2tncm91bmQ6XG4gKiBjaGF0LW1lc3NhZ2UtdGV4dC1jb2xvcjpcbiAqIGNoYXQtbWVzc2FnZS1yZXBseS1iYWNrZ3JvdW5kLWNvbG9yOlxuICogY2hhdC1tZXNzYWdlLXJlcGx5LXRleHQtY29sb3I6XG4gKiBjaGF0LW1lc3NhZ2UtYXZhdGFyLWJhY2tncm91bmQtY29sb3I6XG4gKiBjaGF0LW1lc3NhZ2Utc2VuZGVyLXRleHQtY29sb3I6XG4gKiBjaGF0LW1lc3NhZ2UtcXVvdGUtYmFja2dyb3VuZC1jb2xvcjpcbiAqIGNoYXQtbWVzc2FnZS1xdW90ZS10ZXh0LWNvbG9yOlxuICogY2hhdC1tZXNzYWdlLWZpbGUtdGV4dC1jb2xvcjpcbiAqIGNoYXQtbWVzc2FnZS1maWxlLWJhY2tncm91bmQtY29sb3I6XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iQ2hhdE1lc3NhZ2VDb21wb25lbnQge1xuICAgIHByb3RlY3RlZCBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplcjtcbiAgICBnZXQgZmx5SW5PdXQoKTogYm9vbGVhbjtcbiAgICBnZXQgbm90UmVwbHkoKTogYm9vbGVhbjtcbiAgICBhdmF0YXJTdHlsZTogU2FmZVN0eWxlO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgYSBtZXNzYWdlIGlzIGEgcmVwbHlcbiAgICAgKi9cbiAgICBnZXQgcmVwbHkoKTogYm9vbGVhbjtcbiAgICBzZXQgcmVwbHkodmFsdWU6IGJvb2xlYW4pO1xuICAgIHByb3RlY3RlZCBfcmVwbHk6IGJvb2xlYW47XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX3JlcGx5OiBOYkJvb2xlYW5JbnB1dDtcbiAgICAvKipcbiAgICAgKiBNZXNzYWdlIHNlbmRlclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE1lc3NhZ2Ugc2VuZGVyXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBzZW5kZXI6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBNZXNzYWdlIHNlbmQgZGF0ZVxuICAgICAqIEB0eXBlIHtEYXRlfVxuICAgICAqL1xuICAgIGRhdGU6IERhdGU7XG4gICAgLyoqXG4gICAgICogTWVzc2FnZSBzZW5kIGRhdGUgZm9ybWF0LCBkZWZhdWx0ICdzaG9ydFRpbWUnXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBkYXRlRm9ybWF0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgZmlsZXMgYHsgdXJsOiAnZmlsZSB1cmwnLCBpY29uOiAnZmlsZSBpY29uIGNsYXNzJyB9YFxuICAgICAqL1xuICAgIGZpbGVzOiBOYkNoYXRNZXNzYWdlRmlsZVtdO1xuICAgIC8qKlxuICAgICAqIFF1b3RlZCBtZXNzYWdlIHRleHRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHF1b3RlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogTWFwIGxhdGl0dWRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIE1hcCBsb25naXR1ZGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIE1lc3NhZ2Ugc2VuZCBhdmF0YXJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHNldCBhdmF0YXIodmFsdWU6IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogTWVzc2FnZSB0eXBlLCBhdmFpbGFibGUgb3B0aW9ucyBgdGV4dHxmaWxlfG1hcHxxdW90ZWBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3Rvcihkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplcik7XG4gICAgZ2V0SW5pdGlhbHMoKTogc3RyaW5nO1xufVxuIl19