/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { ComponentFactoryResolver, ComponentFactory, ComponentRef, ElementRef, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { NbComponentSize } from '../component-size';
import { NbComponentStatus } from '../component-status';
import { NbSpinnerComponent } from './spinner.component';
/**
 * Styled spinner directive
 *
 * @stacked-example(Spinner Showcase, spinner/spinner-card.component)
 *
 *
 * ```ts
 * <nb-card [nbSpinner]="loading" nbSpinnerStatus="danger">
 *   <nb-card-body>Card Content</nb-card-body>
 * </nb-card>
 * ```
 *
 * ### Installation
 *
 * Import `NbSpinnerModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbSpinnerModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Could be colored using `status` property
 *
 * @stacked-example(Spinner Colors, spinner/spinner-colors.component)
 *
 * Available in different sizes with `size` property:
 *
 * @stacked-example(Spinner Sizes, spinner/spinner-sizes.component)
 *
 * It is also possible to place it into the button:
 * @stacked-example(Buttons with spinner, spinner/spinner-button.component)
 *
 * Or tabs:
 * @stacked-example(Spinner in tabs, spinner/spinner-tabs.component)
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbSpinnerDirective implements OnInit {
    private directiveView;
    private componentFactoryResolver;
    private renderer;
    private directiveElement;
    private shouldShow;
    spinner: ComponentRef<NbSpinnerComponent>;
    componentFactory: ComponentFactory<NbSpinnerComponent>;
    /**
     * Spinner message shown next to the icon
     * @type {string}
     */
    spinnerMessage: string;
    /**
     * Spinner status color
     * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`.
     */
    spinnerStatus: NbComponentStatus;
    /**
     * Spinner size. Possible values: `tiny`, `small`, `medium` (default), `large`, `giant`
     */
    spinnerSize: NbComponentSize;
    /**
     * Directive value - show or hide spinner
     * @param {boolean} val
     */
    set nbSpinner(val: boolean);
    isSpinnerExist: boolean;
    constructor(directiveView: ViewContainerRef, componentFactoryResolver: ComponentFactoryResolver, renderer: Renderer2, directiveElement: ElementRef);
    ngOnInit(): void;
    hide(): void;
    show(): void;
    setInstanceInputs(instance: NbSpinnerComponent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbSpinnerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbSpinnerDirective, "[nbSpinner]", never, { "spinnerStatus": "nbSpinnerStatus"; "spinnerSize": "nbSpinnerSize"; "nbSpinner": "nbSpinner"; "spinnerMessage": "nbSpinnerMessage"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsic3Bpbm5lci5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpREE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDb21wb25lbnRGYWN0b3J5LCBDb21wb25lbnRSZWYsIEVsZW1lbnRSZWYsIE9uSW5pdCwgUmVuZGVyZXIyLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYkNvbXBvbmVudFNpemUgfSBmcm9tICcuLi9jb21wb25lbnQtc2l6ZSc7XG5pbXBvcnQgeyBOYkNvbXBvbmVudFN0YXR1cyB9IGZyb20gJy4uL2NvbXBvbmVudC1zdGF0dXMnO1xuaW1wb3J0IHsgTmJTcGlubmVyQ29tcG9uZW50IH0gZnJvbSAnLi9zcGlubmVyLmNvbXBvbmVudCc7XG4vKipcbiAqIFN0eWxlZCBzcGlubmVyIGRpcmVjdGl2ZVxuICpcbiAqIEBzdGFja2VkLWV4YW1wbGUoU3Bpbm5lciBTaG93Y2FzZSwgc3Bpbm5lci9zcGlubmVyLWNhcmQuY29tcG9uZW50KVxuICpcbiAqXG4gKiBgYGB0c1xuICogPG5iLWNhcmQgW25iU3Bpbm5lcl09XCJsb2FkaW5nXCIgbmJTcGlubmVyU3RhdHVzPVwiZGFuZ2VyXCI+XG4gKiAgIDxuYi1jYXJkLWJvZHk+Q2FyZCBDb250ZW50PC9uYi1jYXJkLWJvZHk+XG4gKiA8L25iLWNhcmQ+XG4gKiBgYGBcbiAqXG4gKiAjIyMgSW5zdGFsbGF0aW9uXG4gKlxuICogSW1wb3J0IGBOYlNwaW5uZXJNb2R1bGVgIHRvIHlvdXIgZmVhdHVyZSBtb2R1bGUuXG4gKiBgYGB0c1xuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIC8vIC4uLlxuICogICAgIE5iU3Bpbm5lck1vZHVsZSxcbiAqICAgXSxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgUGFnZU1vZHVsZSB7IH1cbiAqIGBgYFxuICogIyMjIFVzYWdlXG4gKlxuICogQ291bGQgYmUgY29sb3JlZCB1c2luZyBgc3RhdHVzYCBwcm9wZXJ0eVxuICpcbiAqIEBzdGFja2VkLWV4YW1wbGUoU3Bpbm5lciBDb2xvcnMsIHNwaW5uZXIvc3Bpbm5lci1jb2xvcnMuY29tcG9uZW50KVxuICpcbiAqIEF2YWlsYWJsZSBpbiBkaWZmZXJlbnQgc2l6ZXMgd2l0aCBgc2l6ZWAgcHJvcGVydHk6XG4gKlxuICogQHN0YWNrZWQtZXhhbXBsZShTcGlubmVyIFNpemVzLCBzcGlubmVyL3NwaW5uZXItc2l6ZXMuY29tcG9uZW50KVxuICpcbiAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gcGxhY2UgaXQgaW50byB0aGUgYnV0dG9uOlxuICogQHN0YWNrZWQtZXhhbXBsZShCdXR0b25zIHdpdGggc3Bpbm5lciwgc3Bpbm5lci9zcGlubmVyLWJ1dHRvbi5jb21wb25lbnQpXG4gKlxuICogT3IgdGFiczpcbiAqIEBzdGFja2VkLWV4YW1wbGUoU3Bpbm5lciBpbiB0YWJzLCBzcGlubmVyL3NwaW5uZXItdGFicy5jb21wb25lbnQpXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iU3Bpbm5lckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBkaXJlY3RpdmVWaWV3O1xuICAgIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBkaXJlY3RpdmVFbGVtZW50O1xuICAgIHByaXZhdGUgc2hvdWxkU2hvdztcbiAgICBzcGlubmVyOiBDb21wb25lbnRSZWY8TmJTcGlubmVyQ29tcG9uZW50PjtcbiAgICBjb21wb25lbnRGYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PE5iU3Bpbm5lckNvbXBvbmVudD47XG4gICAgLyoqXG4gICAgICogU3Bpbm5lciBtZXNzYWdlIHNob3duIG5leHQgdG8gdGhlIGljb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHNwaW5uZXJNZXNzYWdlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3Bpbm5lciBzdGF0dXMgY29sb3JcbiAgICAgKiBgYmFzaWNgLCBgcHJpbWFyeWAsIGBpbmZvYCwgYHN1Y2Nlc3NgLCBgd2FybmluZ2AsIGBkYW5nZXJgLCBgY29udHJvbGAuXG4gICAgICovXG4gICAgc3Bpbm5lclN0YXR1czogTmJDb21wb25lbnRTdGF0dXM7XG4gICAgLyoqXG4gICAgICogU3Bpbm5lciBzaXplLiBQb3NzaWJsZSB2YWx1ZXM6IGB0aW55YCwgYHNtYWxsYCwgYG1lZGl1bWAgKGRlZmF1bHQpLCBgbGFyZ2VgLCBgZ2lhbnRgXG4gICAgICovXG4gICAgc3Bpbm5lclNpemU6IE5iQ29tcG9uZW50U2l6ZTtcbiAgICAvKipcbiAgICAgKiBEaXJlY3RpdmUgdmFsdWUgLSBzaG93IG9yIGhpZGUgc3Bpbm5lclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsXG4gICAgICovXG4gICAgc2V0IG5iU3Bpbm5lcih2YWw6IGJvb2xlYW4pO1xuICAgIGlzU3Bpbm5lckV4aXN0OiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGRpcmVjdGl2ZVZpZXc6IFZpZXdDb250YWluZXJSZWYsIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCByZW5kZXJlcjogUmVuZGVyZXIyLCBkaXJlY3RpdmVFbGVtZW50OiBFbGVtZW50UmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIGhpZGUoKTogdm9pZDtcbiAgICBzaG93KCk6IHZvaWQ7XG4gICAgc2V0SW5zdGFuY2VJbnB1dHMoaW5zdGFuY2U6IE5iU3Bpbm5lckNvbXBvbmVudCk6IHZvaWQ7XG59XG4iXX0=