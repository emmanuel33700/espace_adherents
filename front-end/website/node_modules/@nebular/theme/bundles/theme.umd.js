(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('tslib'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('@angular/forms'), require('@angular/router'), require('@angular/cdk/a11y'), require('@angular/cdk/portal'), require('@angular/cdk/overlay'), require('@angular/cdk/platform'), require('@angular/platform-browser'), require('@angular/animations'), require('intersection-observer'), require('@angular/cdk/bidi'), require('@angular/cdk/table'), require('@angular/cdk/keycodes')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'tslib', '@angular/common', 'rxjs', 'rxjs/operators', '@angular/forms', '@angular/router', '@angular/cdk/a11y', '@angular/cdk/portal', '@angular/cdk/overlay', '@angular/cdk/platform', '@angular/platform-browser', '@angular/animations', 'intersection-observer', '@angular/cdk/bidi', '@angular/cdk/table', '@angular/cdk/keycodes'], factory) :
	(factory((global.nb = global.nb || {}, global.nb.theme = global.nb.theme || {}),global.ng.core,global.tslib,global.ng.common,global.Rx,global.Rx.operators,global.ng.forms,global.ng.router,global.ng.cdk.a11y,global.ng.cdk.portal,global.ng.cdk.overlay,global.ng.cdk.platform,global.ng.platformBrowser,global.ng.animations,global['intersection-observer'],global.ng.cdk.bidi,global.ng.cdk.table,global.ng.cdk.keycodes));
}(this, (function (exports,i0,tslib,_angular_common,rxjs,rxjs_operators,_angular_forms,_angular_router,_angular_cdk_a11y,_angular_cdk_portal,_angular_cdk_overlay,i1,_angular_platformBrowser,_angular_animations,intersectionObserver,_angular_cdk_bidi,_angular_cdk_table,_angular_cdk_keycodes) { 'use strict';

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_THEME_OPTIONS = new i0.InjectionToken('Nebular Theme Options');
var NB_MEDIA_BREAKPOINTS = new i0.InjectionToken('Nebular Media Breakpoints');
var NB_BUILT_IN_JS_THEMES = new i0.InjectionToken('Nebular Built-in JS Themes');
var NB_JS_THEMES = new i0.InjectionToken('Nebular JS Themes');
/**
 * We're providing browser apis with tokens to improve testing capabilities.
 * */
var NB_WINDOW = new i0.InjectionToken('Window');
var NB_DOCUMENT = new i0.InjectionToken('Document');

var palette = {
    primary: '#3366ff',
    success: '#00d68f',
    info: '#0095ff',
    warning: '#ffaa00',
    danger: '#ff3d71',
};
var DEFAULT_THEME = {
    name: 'default',
    variables: {
        fontMain: 'Open Sans, sans-serif',
        fontSecondary: 'Raleway, sans-serif',
        bg: '#ffffff',
        bg2: '#f7f9fc',
        bg3: '#edf1f7',
        bg4: '#e4e9f2',
        border: '#ffffff',
        border2: '#f7f9fc',
        border3: '#edf1f7',
        border4: '#e4e9f2',
        border5: '#c5cee0',
        fg: '#8f9bb3',
        fgHeading: '#1a2138',
        fgText: '#1a2138',
        fgHighlight: palette.primary,
        layoutBg: '#f7f9fc',
        separator: '#edf1f7',
        primary: palette.primary,
        success: palette.success,
        info: palette.info,
        warning: palette.warning,
        danger: palette.danger,
        primaryLight: '#598bff',
        successLight: '#2ce69b',
        infoLight: '#42aaff',
        warningLight: '#ffc94d',
        dangerLight: '#ff708d',
    },
};

var palette$1 = {
    primary: '#a16eff',
    success: '#00d68f',
    info: '#0095ff',
    warning: '#ffaa00',
    danger: '#ff3d71',
};
var COSMIC_THEME = {
    name: 'cosmic',
    variables: {
        fontMain: 'Open Sans, sans-serif',
        fontSecondary: 'Raleway, sans-serif',
        bg: '#323259',
        bg2: '#252547',
        bg3: '#1b1b38',
        bg4: '#13132b',
        border: '#323259',
        border2: '#252547',
        border3: '#1b1b38',
        border4: '#13132b',
        border5: '#13132b',
        fg: '#b4b4db',
        fgHeading: '#ffffff',
        fgText: '#ffffff',
        fgHighlight: palette$1.primary,
        layoutBg: '#151a30',
        separator: '#151a30',
        primary: palette$1.primary,
        success: palette$1.success,
        info: palette$1.info,
        warning: palette$1.warning,
        danger: palette$1.danger,
        primaryLight: '#b18aff',
        successLight: '#2ce69b',
        infoLight: '#42aaff',
        warningLight: '#ffc94d',
        dangerLight: '#ff708d',
    },
};

var palette$2 = {
    primary: '#73a1ff',
    success: '#5dcfe3',
    info: '#ba7fec',
    warning: '#ffa36b',
    danger: '#ff6b83',
};
var CORPORATE_THEME = {
    name: 'corporate',
    base: 'default',
    variables: {
        fontMain: 'Open Sans, sans-serif',
        fontSecondary: 'Raleway, sans-serif',
        bg: '#ffffff',
        bg2: '#f7f9fc',
        bg3: '#edf1f7',
        bg4: '#e4e9f2',
        border: '#ffffff',
        border2: '#f7f9fc',
        border3: '#edf1f7',
        border4: '#e4e9f2',
        border5: '#c5cee0',
        fg: '#8f9bb3',
        fgHeading: '#1a2138',
        fgText: '#1a2138',
        fgHighlight: palette$2.primary,
        layoutBg: '#f7f9fc',
        separator: '#edf1f7',
        primary: palette$2.primary,
        success: palette$2.success,
        info: palette$2.info,
        warning: palette$2.warning,
        danger: palette$2.danger,
        primaryLight: '#598bff',
        successLight: '#2ce69b',
        infoLight: '#42aaff',
        warningLight: '#ffc94d',
        dangerLight: '#ff708d',
    },
};

var palette$3 = {
    primary: '#3366ff',
    success: '#00d68f',
    info: '#0095ff',
    warning: '#ffaa00',
    danger: '#ff3d71',
};
var DARK_THEME = {
    name: 'dark',
    variables: {
        fontMain: 'Open Sans, sans-serif',
        fontSecondary: 'Raleway, sans-serif',
        bg: '#222b45',
        bg2: '#1a2138',
        bg3: '#151a30',
        bg4: '#101426',
        border: '#222b45',
        border2: '#1a2138',
        border3: '#151a30',
        border4: '#101426',
        border5: '#101426',
        fg: '#8f9bb3',
        fgHeading: '#ffffff',
        fgText: '#ffffff',
        fgHighlight: palette$3.primary,
        layoutBg: '#1b1b38',
        separator: '#1b1b38',
        primary: palette$3.primary,
        success: palette$3.success,
        info: palette$3.info,
        warning: palette$3.warning,
        danger: palette$3.danger,
        primaryLight: '#598bff',
        successLight: '#2ce69b',
        infoLight: '#42aaff',
        warningLight: '#ffc94d',
        dangerLight: '#ff708d',
    },
};

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var BUILT_IN_THEMES = [
    DEFAULT_THEME,
    COSMIC_THEME,
    CORPORATE_THEME,
    DARK_THEME,
];
/**
 * Js Themes registry - provides access to the JS themes' variables.
 * Usually shouldn't be used directly, but through the NbThemeService class methods (getJsTheme).
 */
var NbJSThemesRegistry = /** @class */ (function () {
    function NbJSThemesRegistry(builtInThemes, newThemes) {
        var _this = this;
        if (newThemes === void 0) { newThemes = []; }
        this.themes = {};
        var themes = this.combineByNames(newThemes, builtInThemes);
        themes.forEach(function (theme) {
            _this.register(theme, theme.name, theme.base);
        });
    }
    /**
     * Registers a new JS theme
     * @param config any
     * @param themeName string
     * @param baseTheme string
     */
    NbJSThemesRegistry.prototype.register = function (config, themeName, baseTheme) {
        var base = this.has(baseTheme) ? this.get(baseTheme) : {};
        this.themes[themeName] = this.mergeDeep({}, base, config);
    };
    /**
     * Checks whether the theme is registered
     * @param themeName
     * @returns boolean
     */
    NbJSThemesRegistry.prototype.has = function (themeName) {
        return !!this.themes[themeName];
    };
    /**
     * Return a theme
     * @param themeName
     * @returns NbJSThemeOptions
     */
    NbJSThemesRegistry.prototype.get = function (themeName) {
        if (!this.themes[themeName]) {
            throw Error("NbThemeConfig: no theme '" + themeName + "' found registered.");
        }
        return JSON.parse(JSON.stringify(this.themes[themeName]));
    };
    NbJSThemesRegistry.prototype.combineByNames = function (newThemes, oldThemes) {
        var _this = this;
        if (newThemes) {
            var mergedThemes_1 = [];
            newThemes.forEach(function (theme) {
                var sameOld = oldThemes.find(function (tm) { return tm.name === theme.name; })
                    || {};
                var mergedTheme = _this.mergeDeep({}, sameOld, theme);
                mergedThemes_1.push(mergedTheme);
            });
            oldThemes.forEach(function (theme) {
                if (!mergedThemes_1.find(function (tm) { return tm.name === theme.name; })) {
                    mergedThemes_1.push(theme);
                }
            });
            return mergedThemes_1;
        }
        return oldThemes;
    };
    NbJSThemesRegistry.prototype.isObject = function (item) {
        return item && typeof item === 'object' && !Array.isArray(item);
    };
    // TODO: move to helpers
    NbJSThemesRegistry.prototype.mergeDeep = function (target) {
        var _a, _b;
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (!sources.length) {
            return target;
        }
        var source = sources.shift();
        if (this.isObject(target) && this.isObject(source)) {
            for (var key in source) {
                if (this.isObject(source[key])) {
                    if (!target[key]) {
                        Object.assign(target, (_a = {}, _a[key] = {}, _a));
                    }
                    this.mergeDeep(target[key], source[key]);
                }
                else {
                    Object.assign(target, (_b = {}, _b[key] = source[key], _b));
                }
            }
        }
        return this.mergeDeep.apply(this, tslib.__spreadArrays([target], sources));
    };
    NbJSThemesRegistry = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(0, i0.Inject(NB_BUILT_IN_JS_THEMES)),
        tslib.__param(1, i0.Inject(NB_JS_THEMES)),
        tslib.__metadata("design:paramtypes", [Array, Array])
    ], NbJSThemesRegistry);
    return NbJSThemesRegistry;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var DEFAULT_MEDIA_BREAKPOINTS = [
    {
        name: 'xs',
        width: 0,
    },
    {
        name: 'is',
        width: 400,
    },
    {
        name: 'sm',
        width: 576,
    },
    {
        name: 'md',
        width: 768,
    },
    {
        name: 'lg',
        width: 992,
    },
    {
        name: 'xl',
        width: 1200,
    },
    {
        name: 'xxl',
        width: 1400,
    },
    {
        name: 'xxxl',
        width: 1600,
    },
];
/**
 * Manages media breakpoints
 *
 * Provides access to available media breakpoints to convert window width to a configured breakpoint,
 * e.g. 200px - *xs* breakpoint
 */
var NbMediaBreakpointsService = /** @class */ (function () {
    function NbMediaBreakpointsService(breakpoints) {
        this.breakpoints = breakpoints;
        this.breakpointsMap = this.breakpoints.reduce(function (res, b) {
            res[b.name] = b.width;
            return res;
        }, {});
    }
    /**
     * Returns a configured breakpoint by width
     * @param width number
     * @returns {Z|{name: string, width: number}}
     */
    NbMediaBreakpointsService.prototype.getByWidth = function (width) {
        var unknown = { name: 'unknown', width: width };
        var breakpoints = this.getBreakpoints();
        return breakpoints
            .find(function (point, index) {
            var next = breakpoints[index + 1];
            return width >= point.width && (!next || width < next.width);
        }) || unknown;
    };
    /**
     * Returns a configured breakpoint by name
     * @param name string
     * @returns NbMediaBreakpoint
     */
    NbMediaBreakpointsService.prototype.getByName = function (name) {
        var unknown = { name: 'unknown', width: NaN };
        var breakpoints = this.getBreakpoints();
        return breakpoints.find(function (point) { return name === point.name; }) || unknown;
    };
    /**
     * Returns a list of configured breakpoints for the theme
     * @returns NbMediaBreakpoint[]
     */
    NbMediaBreakpointsService.prototype.getBreakpoints = function () {
        return this.breakpoints;
    };
    /**
     * Returns a map of configured breakpoints for the theme
     * @returns {[p: string]: number}
     */
    NbMediaBreakpointsService.prototype.getBreakpointsMap = function () {
        return this.breakpointsMap;
    };
    NbMediaBreakpointsService = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(0, i0.Inject(NB_MEDIA_BREAKPOINTS)),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbMediaBreakpointsService);
    return NbMediaBreakpointsService;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Main Nebular service. Includes various helper methods.
 */
var NbThemeService = /** @class */ (function () {
    function NbThemeService(options, breakpointService, jsThemesRegistry) {
        this.options = options;
        this.breakpointService = breakpointService;
        this.jsThemesRegistry = jsThemesRegistry;
        this.themeChanges$ = new rxjs.ReplaySubject(1);
        this.appendLayoutClass$ = new rxjs.Subject();
        this.removeLayoutClass$ = new rxjs.Subject();
        this.changeWindowWidth$ = new rxjs.ReplaySubject(2);
        if (options && options.name) {
            this.changeTheme(options.name);
        }
    }
    /**
     * Change current application theme
     * @param {string} name
     */
    NbThemeService.prototype.changeTheme = function (name) {
        this.themeChanges$.next({ name: name, previous: this.currentTheme });
        this.currentTheme = name;
    };
    NbThemeService.prototype.changeWindowWidth = function (width) {
        this.changeWindowWidth$.next(width);
    };
    /**
     * Returns a theme object with variables (color/paddings/etc) on a theme change.
     * Once subscribed - returns current theme.
     *
     * @returns {Observable<NbJSThemeOptions>}
     */
    NbThemeService.prototype.getJsTheme = function () {
        var _this = this;
        return this.onThemeChange().pipe(rxjs_operators.map(function (theme) {
            return _this.jsThemesRegistry.get(theme.name);
        }));
    };
    /**
     * Triggers media query breakpoint change
     * Returns a pair where the first item is previous media breakpoint and the second item is current breakpoit.
     * ```ts
     *  [{ name: 'xs', width: 0 }, { name: 'md', width: 768 }] // change from `xs` to `md`
     * ```
     * @returns {Observable<[NbMediaBreakpoint, NbMediaBreakpoint]>}
     */
    NbThemeService.prototype.onMediaQueryChange = function () {
        var _this = this;
        return this.changeWindowWidth$
            .pipe(rxjs_operators.startWith(undefined), rxjs_operators.pairwise(), rxjs_operators.map(function (_a) {
            var prevWidth = _a[0], width = _a[1];
            return [
                _this.breakpointService.getByWidth(prevWidth),
                _this.breakpointService.getByWidth(width),
            ];
        }), rxjs_operators.filter(function (_a) {
            var prevPoint = _a[0], point = _a[1];
            return prevPoint.name !== point.name;
        }), rxjs_operators.distinctUntilChanged(null, function (params) { return params[0].name + params[1].name; }), rxjs_operators.share());
    };
    /**
     * Triggered when current theme is changed
     * @returns {Observable<any>}
     */
    NbThemeService.prototype.onThemeChange = function () {
        return this.themeChanges$.pipe(rxjs_operators.share());
    };
    /**
     * Append a class to nb-layout
     * @param {string} className
     */
    NbThemeService.prototype.appendLayoutClass = function (className) {
        this.appendLayoutClass$.next(className);
    };
    /**
     * Triggered when a new class is added to nb-layout through `appendLayoutClass` method
     * @returns {Observable<any>}
     */
    NbThemeService.prototype.onAppendLayoutClass = function () {
        return this.appendLayoutClass$.pipe(rxjs_operators.share());
    };
    /**
     * Removes a class from nb-layout
     * @param {string} className
     */
    NbThemeService.prototype.removeLayoutClass = function (className) {
        this.removeLayoutClass$.next(className);
    };
    /**
     * Triggered when a class is removed from nb-layout through `removeLayoutClass` method
     * @returns {Observable<any>}
     */
    NbThemeService.prototype.onRemoveLayoutClass = function () {
        return this.removeLayoutClass$.pipe(rxjs_operators.share());
    };
    NbThemeService = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(0, i0.Inject(NB_THEME_OPTIONS)),
        tslib.__metadata("design:paramtypes", [Object, NbMediaBreakpointsService,
            NbJSThemesRegistry])
    ], NbThemeService);
    return NbThemeService;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Service to control the global page spinner.
 */
var NbSpinnerService = /** @class */ (function () {
    function NbSpinnerService(document) {
        this.document = document;
        this.loaders = [];
        this.selector = 'nb-global-spinner';
    }
    /**
     * Appends new loader to the list of loader to be completed before
     * spinner will be hidden
     * @param method Promise<any>
     */
    NbSpinnerService.prototype.registerLoader = function (method) {
        this.loaders.push(method);
    };
    /**
     * Clears the list of loader
     */
    NbSpinnerService.prototype.clear = function () {
        this.loaders = [];
    };
    /**
     * Start the loader process, show spinnder and execute loaders
     */
    NbSpinnerService.prototype.load = function () {
        this.showSpinner();
        this.executeAll();
    };
    NbSpinnerService.prototype.executeAll = function (done) {
        var _this = this;
        if (done === void 0) { done = function () { }; }
        Promise.all(this.loaders).then(function (values) {
            _this.hideSpinner();
            done.call(null, values);
        })
            .catch(function (error) {
            // TODO: Promise.reject
            console.error(error);
        });
    };
    // TODO is there any better way of doing this?
    NbSpinnerService.prototype.showSpinner = function () {
        var el = this.getSpinnerElement();
        if (el) {
            el.style['display'] = 'block';
        }
    };
    NbSpinnerService.prototype.hideSpinner = function () {
        var el = this.getSpinnerElement();
        if (el) {
            el.style['display'] = 'none';
        }
    };
    NbSpinnerService.prototype.getSpinnerElement = function () {
        return this.document.getElementById(this.selector);
    };
    NbSpinnerService = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(0, i0.Inject(NB_DOCUMENT)),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbSpinnerService);
    return NbSpinnerService;
}());

/**
 * Layout direction.
 * */

(function (NbLayoutDirection) {
    NbLayoutDirection["LTR"] = "ltr";
    NbLayoutDirection["RTL"] = "rtl";
})(exports.NbLayoutDirection || (exports.NbLayoutDirection = {}));

/**
 * Layout direction setting injection token.
 * */
var NB_LAYOUT_DIRECTION = new i0.InjectionToken('Layout direction');
/**
 * Layout Direction Service.
 * Allows to set or get layout direction and listen to its changes
 */
var NbLayoutDirectionService = /** @class */ (function () {
    function NbLayoutDirectionService(direction) {
        if (direction === void 0) { direction = exports.NbLayoutDirection.LTR; }
        this.direction = direction;
        this.$directionChange = new rxjs.ReplaySubject(1);
        this.setDirection(direction);
    }
    /**
     * Returns true if layout direction set to left to right.
     * @returns boolean.
     * */
    NbLayoutDirectionService.prototype.isLtr = function () {
        return this.direction === exports.NbLayoutDirection.LTR;
    };
    /**
     * Returns true if layout direction set to right to left.
     * @returns boolean.
     * */
    NbLayoutDirectionService.prototype.isRtl = function () {
        return this.direction === exports.NbLayoutDirection.RTL;
    };
    /**
     * Returns current layout direction.
     * @returns NbLayoutDirection.
     * */
    NbLayoutDirectionService.prototype.getDirection = function () {
        return this.direction;
    };
    /**
     * Sets layout direction
     * @param {NbLayoutDirection} direction
     */
    NbLayoutDirectionService.prototype.setDirection = function (direction) {
        this.direction = direction;
        this.$directionChange.next(direction);
    };
    /**
     * Triggered when direction was changed.
     * @returns Observable<NbLayoutDirection>.
     */
    NbLayoutDirectionService.prototype.onDirectionChange = function () {
        return this.$directionChange.pipe(rxjs_operators.share());
    };
    NbLayoutDirectionService = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(0, i0.Optional()), tslib.__param(0, i0.Inject(NB_LAYOUT_DIRECTION)),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbLayoutDirectionService);
    return NbLayoutDirectionService;
}());

/**
 * Layout scroll service. Provides information about current scroll position,
 * as well as methods to update position of the scroll.
 *
 * The reason we added this service is that in Nebular there are two scroll modes:
 * - the default mode when scroll is on body
 * - and the `withScroll` mode, when scroll is removed from the body and moved to an element inside of the
 * `nb-layout` component
 */
var NbLayoutScrollService = /** @class */ (function () {
    function NbLayoutScrollService() {
        this.scrollPositionReq$ = new rxjs.Subject();
        this.manualScroll$ = new rxjs.Subject();
        this.scroll$ = new rxjs.Subject();
        this.scrollable$ = new rxjs.Subject();
    }
    /**
     * Returns scroll position
     *
     * @returns {Observable<NbScrollPosition>}
     */
    NbLayoutScrollService.prototype.getPosition = function () {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            var listener = new rxjs.Subject();
            listener.subscribe(observer);
            _this.scrollPositionReq$.next({ listener: listener });
            return function () { return listener.complete(); };
        });
    };
    /**
     * Sets scroll position
     *
     * @param {number} x
     * @param {number} y
     */
    NbLayoutScrollService.prototype.scrollTo = function (x, y) {
        if (x === void 0) { x = null; }
        if (y === void 0) { y = null; }
        this.manualScroll$.next({ x: x, y: y });
    };
    /**
     * Returns a stream of scroll events
     *
     * @returns {Observable<any>}
     */
    NbLayoutScrollService.prototype.onScroll = function () {
        return this.scroll$.pipe(rxjs_operators.share());
    };
    /**
     * @private
     * @returns Observable<NbScrollPosition>.
     */
    NbLayoutScrollService.prototype.onManualScroll = function () {
        return this.manualScroll$.pipe(rxjs_operators.share());
    };
    /**
     * @private
     * @returns {Subject<any>}
     */
    NbLayoutScrollService.prototype.onGetPosition = function () {
        return this.scrollPositionReq$;
    };
    NbLayoutScrollService.prototype.onScrollableChange = function () {
        return this.scrollable$.pipe(rxjs_operators.share());
    };
    /**
     * @private
     * @param {any} event
     */
    NbLayoutScrollService.prototype.fireScrollChange = function (event) {
        this.scroll$.next(event);
    };
    NbLayoutScrollService.prototype.scrollable = function (scrollable) {
        this.scrollable$.next(scrollable);
    };
    NbLayoutScrollService = tslib.__decorate([
        i0.Injectable()
    ], NbLayoutScrollService);
    return NbLayoutScrollService;
}());

/**
 * Simple helper service to return Layout dimensions
 * Depending of current Layout scroll mode (default or `withScroll` when scroll is moved to an element
 * inside of the layout) corresponding dimensions will be returns  - of `documentElement` in first case and
 * `.scrollable-container` in the second.
 */
var NbLayoutRulerService = /** @class */ (function () {
    function NbLayoutRulerService() {
        this.contentDimensionsReq$ = new rxjs.Subject();
    }
    /**
     * Content dimensions
     * @returns {Observable<NbLayoutDimensions>}
     */
    NbLayoutRulerService.prototype.getDimensions = function () {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            var listener = new rxjs.Subject();
            listener.subscribe(observer);
            _this.contentDimensionsReq$.next({ listener: listener });
            return function () { return listener.complete(); };
        });
    };
    /**
     * @private
     * @returns {Subject<any>}
     */
    NbLayoutRulerService.prototype.onGetDimensions = function () {
        return this.contentDimensionsReq$;
    };
    NbLayoutRulerService = tslib.__decorate([
        i0.Injectable()
    ], NbLayoutRulerService);
    return NbLayoutRulerService;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbSharedModule = /** @class */ (function () {
    function NbSharedModule() {
    }
    NbSharedModule = tslib.__decorate([
        i0.NgModule({
            exports: [
                _angular_common.CommonModule,
                // TODO: probably we don't need FormsModule in SharedModule
                _angular_forms.FormsModule,
                _angular_router.RouterModule,
            ],
        })
    ], NbSharedModule);
    return NbSharedModule;
}());

/**
 * Overrides angular cdk focus trap to keep restore functionality inside trap.
 * */
var NbFocusTrap = /** @class */ (function (_super) {
    tslib.__extends(NbFocusTrap, _super);
    function NbFocusTrap(element, checker, ngZone, document, deferAnchors) {
        var _this = _super.call(this, element, checker, ngZone, document, deferAnchors) || this;
        _this.element = element;
        _this.checker = checker;
        _this.ngZone = ngZone;
        _this.document = document;
        _this.savePreviouslyFocusedElement();
        return _this;
    }
    NbFocusTrap.prototype.restoreFocus = function () {
        this.previouslyFocusedElement.focus();
        this.destroy();
    };
    NbFocusTrap.prototype.blurPreviouslyFocusedElement = function () {
        this.previouslyFocusedElement.blur();
    };
    NbFocusTrap.prototype.savePreviouslyFocusedElement = function () {
        this.previouslyFocusedElement = this.document.activeElement;
    };
    return NbFocusTrap;
}(_angular_cdk_a11y.FocusTrap));
var NbFocusTrapFactoryService = /** @class */ (function (_super) {
    tslib.__extends(NbFocusTrapFactoryService, _super);
    function NbFocusTrapFactoryService(checker, ngZone, document) {
        var _this = _super.call(this, checker, ngZone, document) || this;
        _this.checker = checker;
        _this.ngZone = ngZone;
        _this.document = document;
        return _this;
    }
    NbFocusTrapFactoryService.prototype.create = function (element, deferCaptureElements) {
        return new NbFocusTrap(element, this.checker, this.ngZone, this.document, deferCaptureElements);
    };
    NbFocusTrapFactoryService = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(2, i0.Inject(NB_DOCUMENT)),
        tslib.__metadata("design:paramtypes", [_angular_cdk_a11y.InteractivityChecker,
            i0.NgZone, Object])
    ], NbFocusTrapFactoryService);
    return NbFocusTrapFactoryService;
}(_angular_cdk_a11y.FocusTrapFactory));

var NbFocusKeyManager = /** @class */ (function (_super) {
    tslib.__extends(NbFocusKeyManager, _super);
    function NbFocusKeyManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NbFocusKeyManager;
}(_angular_cdk_a11y.FocusKeyManager));
var NbFocusKeyManagerFactoryService = /** @class */ (function () {
    function NbFocusKeyManagerFactoryService() {
    }
    NbFocusKeyManagerFactoryService.prototype.create = function (items) {
        return new NbFocusKeyManager(items);
    };
    return NbFocusKeyManagerFactoryService;
}());

var NbActiveDescendantKeyManager = /** @class */ (function (_super) {
    tslib.__extends(NbActiveDescendantKeyManager, _super);
    function NbActiveDescendantKeyManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NbActiveDescendantKeyManager;
}(_angular_cdk_a11y.ActiveDescendantKeyManager));
var NbActiveDescendantKeyManagerFactoryService = /** @class */ (function () {
    function NbActiveDescendantKeyManagerFactoryService() {
    }
    NbActiveDescendantKeyManagerFactoryService.prototype.create = function (items) {
        return new NbActiveDescendantKeyManager(items);
    };
    return NbActiveDescendantKeyManagerFactoryService;
}());
var NbKeyManagerActiveItemMode;
(function (NbKeyManagerActiveItemMode) {
    NbKeyManagerActiveItemMode[NbKeyManagerActiveItemMode["RESET_ACTIVE"] = -1] = "RESET_ACTIVE";
    NbKeyManagerActiveItemMode[NbKeyManagerActiveItemMode["FIRST_ACTIVE"] = 0] = "FIRST_ACTIVE";
})(NbKeyManagerActiveItemMode || (NbKeyManagerActiveItemMode = {}));

var NbFocusMonitor = /** @class */ (function (_super) {
    tslib.__extends(NbFocusMonitor, _super);
    function NbFocusMonitor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbFocusMonitor = tslib.__decorate([
        i0.Injectable()
    ], NbFocusMonitor);
    return NbFocusMonitor;
}(_angular_cdk_a11y.FocusMonitor));
var NbA11yModule = /** @class */ (function () {
    function NbA11yModule() {
    }
    NbA11yModule_1 = NbA11yModule;
    NbA11yModule.forRoot = function () {
        return {
            ngModule: NbA11yModule_1,
            providers: [
                NbFocusTrapFactoryService,
                NbFocusKeyManagerFactoryService,
                NbActiveDescendantKeyManagerFactoryService,
                { provide: NbFocusMonitor, useClass: _angular_cdk_a11y.FocusMonitor },
            ],
        };
    };
    var NbA11yModule_1;
    NbA11yModule = NbA11yModule_1 = tslib.__decorate([
        i0.NgModule({})
    ], NbA11yModule);
    return NbA11yModule;
}());

var NbPortalDirective = /** @class */ (function (_super) {
    tslib.__extends(NbPortalDirective, _super);
    function NbPortalDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbPortalDirective = tslib.__decorate([
        i0.Directive({ selector: '[nbPortal]' })
    ], NbPortalDirective);
    return NbPortalDirective;
}(_angular_cdk_portal.CdkPortal));
var NbPortalOutletDirective = /** @class */ (function (_super) {
    tslib.__extends(NbPortalOutletDirective, _super);
    function NbPortalOutletDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbPortalOutletDirective = tslib.__decorate([
        i0.Directive({ selector: '[nbPortalOutlet]' })
    ], NbPortalOutletDirective);
    return NbPortalOutletDirective;
}(_angular_cdk_portal.CdkPortalOutlet));
var NbComponentPortal = /** @class */ (function (_super) {
    tslib.__extends(NbComponentPortal, _super);
    function NbComponentPortal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NbComponentPortal;
}(_angular_cdk_portal.ComponentPortal));
var NbOverlay = /** @class */ (function (_super) {
    tslib.__extends(NbOverlay, _super);
    function NbOverlay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbOverlay = tslib.__decorate([
        i0.Injectable()
    ], NbOverlay);
    return NbOverlay;
}(_angular_cdk_overlay.Overlay));
var NbOverlayPositionBuilder = /** @class */ (function (_super) {
    tslib.__extends(NbOverlayPositionBuilder, _super);
    function NbOverlayPositionBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbOverlayPositionBuilder = tslib.__decorate([
        i0.Injectable()
    ], NbOverlayPositionBuilder);
    return NbOverlayPositionBuilder;
}(_angular_cdk_overlay.OverlayPositionBuilder));
var NbTemplatePortal = /** @class */ (function (_super) {
    tslib.__extends(NbTemplatePortal, _super);
    function NbTemplatePortal(template, viewContainerRef, context) {
        return _super.call(this, template, viewContainerRef, context) || this;
    }
    return NbTemplatePortal;
}(_angular_cdk_portal.TemplatePortal));
var NbOverlayContainer = /** @class */ (function (_super) {
    tslib.__extends(NbOverlayContainer, _super);
    function NbOverlayContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbOverlayContainer = tslib.__decorate([
        i0.Injectable()
    ], NbOverlayContainer);
    return NbOverlayContainer;
}(_angular_cdk_overlay.OverlayContainer));
var NbFlexibleConnectedPositionStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbFlexibleConnectedPositionStrategy, _super);
    function NbFlexibleConnectedPositionStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NbFlexibleConnectedPositionStrategy;
}(_angular_cdk_overlay.FlexibleConnectedPositionStrategy));
var NbPortalInjector = /** @class */ (function (_super) {
    tslib.__extends(NbPortalInjector, _super);
    function NbPortalInjector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NbPortalInjector;
}(_angular_cdk_portal.PortalInjector));
var CDK_MODULES = [_angular_cdk_overlay.OverlayModule, _angular_cdk_portal.PortalModule];
/**
 * This module helps us to keep all angular/cdk deps inside our cdk module via providing aliases.
 * Approach will help us move cdk in separate npm package and refactor nebular/theme code.
 * */
var NbCdkMappingModule = /** @class */ (function () {
    function NbCdkMappingModule() {
    }
    NbCdkMappingModule_1 = NbCdkMappingModule;
    NbCdkMappingModule.forRoot = function () {
        return {
            ngModule: NbCdkMappingModule_1,
            providers: [
                NbOverlay,
                NbOverlayPositionBuilder,
            ],
        };
    };
    var NbCdkMappingModule_1;
    NbCdkMappingModule = NbCdkMappingModule_1 = tslib.__decorate([
        i0.NgModule({
            imports: tslib.__spreadArrays(CDK_MODULES),
            exports: tslib.__spreadArrays(CDK_MODULES, [
                NbPortalDirective,
                NbPortalOutletDirective,
            ]),
            declarations: [NbPortalDirective, NbPortalOutletDirective],
        })
    ], NbCdkMappingModule);
    return NbCdkMappingModule;
}());

var NbPlatform = /** @class */ (function (_super) {
    tslib.__extends(NbPlatform, _super);
    function NbPlatform() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbPlatform.ɵprov = i0.ɵɵdefineInjectable({ factory: function NbPlatform_Factory() { return new i1.Platform(i0.ɵɵinject(i0.PLATFORM_ID, 8)); }, token: NbPlatform, providedIn: "root" });
    NbPlatform = tslib.__decorate([
        i0.Injectable({
            providedIn: 'root',
            useClass: i1.Platform,
        })
    ], NbPlatform);
    return NbPlatform;
}(i1.Platform));

/**
 * Provides nb-layout as overlay container.
 * Container has to be cleared when layout destroys.
 * Another way previous version of the container will be used
 * but it isn't inserted in DOM and exists in memory only.
 * This case important only if you switch between multiple layouts.
 * */
var NbOverlayContainerAdapter = /** @class */ (function (_super) {
    tslib.__extends(NbOverlayContainerAdapter, _super);
    function NbOverlayContainerAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbOverlayContainerAdapter.prototype.setContainer = function (container) {
        this.container = container;
    };
    NbOverlayContainerAdapter.prototype.clearContainer = function () {
        this.container = null;
        this._containerElement = null;
    };
    NbOverlayContainerAdapter.prototype._createContainer = function () {
        var container = this._document.createElement('div');
        container.classList.add('cdk-overlay-container');
        this.container.appendChild(container);
        this._containerElement = container;
    };
    NbOverlayContainerAdapter = tslib.__decorate([
        i0.Injectable()
    ], NbOverlayContainerAdapter);
    return NbOverlayContainerAdapter;
}(NbOverlayContainer));

var NbViewportRulerAdapter = /** @class */ (function (_super) {
    tslib.__extends(NbViewportRulerAdapter, _super);
    function NbViewportRulerAdapter(platform, ngZone, ruler, scroll) {
        var _this = _super.call(this, platform, ngZone) || this;
        _this.ruler = ruler;
        _this.scroll = scroll;
        return _this;
    }
    NbViewportRulerAdapter.prototype.getViewportSize = function () {
        var res;
        /*
        * getDimensions call is really synchronous operation.
        * And we have to conform with the interface of the original service.
        * */
        this.ruler.getDimensions()
            .pipe(rxjs_operators.map(function (dimensions) { return ({ width: dimensions.clientWidth, height: dimensions.clientHeight }); }))
            .subscribe(function (rect) { return res = rect; });
        return res;
    };
    NbViewportRulerAdapter.prototype.getViewportScrollPosition = function () {
        var res;
        /*
        * getPosition call is really synchronous operation.
        * And we have to conform with the interface of the original service.
        * */
        this.scroll.getPosition()
            .pipe(rxjs_operators.map(function (position) { return ({ top: position.y, left: position.x }); }))
            .subscribe(function (position) { return res = position; });
        return res;
    };
    NbViewportRulerAdapter = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [NbPlatform, i0.NgZone,
            NbLayoutRulerService,
            NbLayoutScrollService])
    ], NbViewportRulerAdapter);
    return NbViewportRulerAdapter;
}(_angular_cdk_overlay.ViewportRuler));

(function (NbGlobalLogicalPosition) {
    NbGlobalLogicalPosition["TOP_START"] = "top-start";
    NbGlobalLogicalPosition["TOP_END"] = "top-end";
    NbGlobalLogicalPosition["BOTTOM_START"] = "bottom-start";
    NbGlobalLogicalPosition["BOTTOM_END"] = "bottom-end";
})(exports.NbGlobalLogicalPosition || (exports.NbGlobalLogicalPosition = {}));

(function (NbGlobalPhysicalPosition) {
    NbGlobalPhysicalPosition["TOP_RIGHT"] = "top-right";
    NbGlobalPhysicalPosition["TOP_LEFT"] = "top-left";
    NbGlobalPhysicalPosition["BOTTOM_RIGHT"] = "bottom-right";
    NbGlobalPhysicalPosition["BOTTOM_LEFT"] = "bottom-left";
})(exports.NbGlobalPhysicalPosition || (exports.NbGlobalPhysicalPosition = {}));
var NbPositionHelper = /** @class */ (function () {
    function NbPositionHelper(layoutDirection) {
        this.layoutDirection = layoutDirection;
    }
    NbPositionHelper.prototype.toLogicalPosition = function (position) {
        if (Object.values(exports.NbGlobalLogicalPosition).includes(position)) {
            return position;
        }
        if (this.layoutDirection.isLtr()) {
            return this.toLogicalPositionWhenLtr(position);
        }
        else {
            return this.toLogicalPositionWhenRtl(position);
        }
    };
    NbPositionHelper.prototype.toPhysicalPosition = function (position) {
        if (Object.values(exports.NbGlobalPhysicalPosition).includes(position)) {
            return position;
        }
        if (this.layoutDirection.isLtr()) {
            return this.toPhysicalPositionWhenLtr(position);
        }
        else {
            return this.toPhysicalPositionWhenRtl(position);
        }
    };
    NbPositionHelper.prototype.isTopPosition = function (position) {
        var logicalPosition = this.toLogicalPosition(position);
        return logicalPosition === exports.NbGlobalLogicalPosition.TOP_END
            || logicalPosition === exports.NbGlobalLogicalPosition.TOP_START;
    };
    NbPositionHelper.prototype.isRightPosition = function (position) {
        var physicalPosition = this.toPhysicalPosition(position);
        return physicalPosition === exports.NbGlobalPhysicalPosition.TOP_RIGHT
            || physicalPosition === exports.NbGlobalPhysicalPosition.BOTTOM_RIGHT;
    };
    NbPositionHelper.prototype.toLogicalPositionWhenLtr = function (position) {
        switch (position) {
            case exports.NbGlobalPhysicalPosition.TOP_RIGHT:
                return exports.NbGlobalLogicalPosition.TOP_END;
            case exports.NbGlobalPhysicalPosition.TOP_LEFT:
                return exports.NbGlobalLogicalPosition.TOP_START;
            case exports.NbGlobalPhysicalPosition.BOTTOM_RIGHT:
                return exports.NbGlobalLogicalPosition.BOTTOM_END;
            case exports.NbGlobalPhysicalPosition.BOTTOM_LEFT:
                return exports.NbGlobalLogicalPosition.BOTTOM_START;
        }
    };
    NbPositionHelper.prototype.toLogicalPositionWhenRtl = function (position) {
        switch (position) {
            case exports.NbGlobalPhysicalPosition.TOP_RIGHT:
                return exports.NbGlobalLogicalPosition.TOP_START;
            case exports.NbGlobalPhysicalPosition.TOP_LEFT:
                return exports.NbGlobalLogicalPosition.TOP_END;
            case exports.NbGlobalPhysicalPosition.BOTTOM_RIGHT:
                return exports.NbGlobalLogicalPosition.BOTTOM_START;
            case exports.NbGlobalPhysicalPosition.BOTTOM_LEFT:
                return exports.NbGlobalLogicalPosition.BOTTOM_END;
        }
    };
    NbPositionHelper.prototype.toPhysicalPositionWhenLtr = function (position) {
        switch (position) {
            case exports.NbGlobalLogicalPosition.TOP_START:
                return exports.NbGlobalPhysicalPosition.TOP_LEFT;
            case exports.NbGlobalLogicalPosition.TOP_END:
                return exports.NbGlobalPhysicalPosition.TOP_RIGHT;
            case exports.NbGlobalLogicalPosition.BOTTOM_START:
                return exports.NbGlobalPhysicalPosition.BOTTOM_LEFT;
            case exports.NbGlobalLogicalPosition.BOTTOM_END:
                return exports.NbGlobalPhysicalPosition.BOTTOM_RIGHT;
        }
    };
    NbPositionHelper.prototype.toPhysicalPositionWhenRtl = function (position) {
        switch (position) {
            case exports.NbGlobalLogicalPosition.TOP_START:
                return exports.NbGlobalPhysicalPosition.TOP_RIGHT;
            case exports.NbGlobalLogicalPosition.TOP_END:
                return exports.NbGlobalPhysicalPosition.TOP_LEFT;
            case exports.NbGlobalLogicalPosition.BOTTOM_START:
                return exports.NbGlobalPhysicalPosition.BOTTOM_RIGHT;
            case exports.NbGlobalLogicalPosition.BOTTOM_END:
                return exports.NbGlobalPhysicalPosition.BOTTOM_LEFT;
        }
    };
    NbPositionHelper = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [NbLayoutDirectionService])
    ], NbPositionHelper);
    return NbPositionHelper;
}());

var _a;

(function (NbAdjustment) {
    NbAdjustment["NOOP"] = "noop";
    NbAdjustment["CLOCKWISE"] = "clockwise";
    NbAdjustment["COUNTERCLOCKWISE"] = "counterclockwise";
    NbAdjustment["VERTICAL"] = "vertical";
    NbAdjustment["HORIZONTAL"] = "horizontal";
})(exports.NbAdjustment || (exports.NbAdjustment = {}));

(function (NbPosition) {
    NbPosition["TOP"] = "top";
    NbPosition["BOTTOM"] = "bottom";
    NbPosition["LEFT"] = "left";
    NbPosition["RIGHT"] = "right";
    NbPosition["START"] = "start";
    NbPosition["END"] = "end";
    NbPosition["TOP_END"] = "top-end";
    NbPosition["TOP_START"] = "top-start";
    NbPosition["BOTTOM_END"] = "bottom-end";
    NbPosition["BOTTOM_START"] = "bottom-start";
    NbPosition["END_TOP"] = "end-top";
    NbPosition["END_BOTTOM"] = "end-bottom";
    NbPosition["START_TOP"] = "start-top";
    NbPosition["START_BOTTOM"] = "start-bottom";
})(exports.NbPosition || (exports.NbPosition = {}));
var POSITIONS = (_a = {},
    _a[exports.NbPosition.RIGHT] = function (offset) {
        return { originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center', offsetX: offset };
    },
    _a[exports.NbPosition.BOTTOM] = function (offset) {
        return { originX: 'center', originY: 'bottom', overlayX: 'center', overlayY: 'top', offsetY: offset };
    },
    _a[exports.NbPosition.LEFT] = function (offset) {
        return { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center', offsetX: -offset };
    },
    _a[exports.NbPosition.TOP] = function (offset) {
        return { originX: 'center', originY: 'top', overlayX: 'center', overlayY: 'bottom', offsetY: -offset };
    },
    _a[exports.NbPosition.START] = function (offset) {
        return this[exports.NbPosition.LEFT](offset);
    },
    _a[exports.NbPosition.END] = function (offset) {
        return this[exports.NbPosition.RIGHT](offset);
    },
    _a[exports.NbPosition.END_TOP] = function (offset) {
        return { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom', offsetX: offset };
    },
    _a[exports.NbPosition.END_BOTTOM] = function (offset) {
        return { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top', offsetX: offset };
    },
    _a[exports.NbPosition.BOTTOM_START] = function (offset) {
        return { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top', offsetY: offset };
    },
    _a[exports.NbPosition.BOTTOM_END] = function (offset) {
        return { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top', offsetY: offset };
    },
    _a[exports.NbPosition.START_TOP] = function (offset) {
        return { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom', offsetX: -offset };
    },
    _a[exports.NbPosition.START_BOTTOM] = function (offset) {
        return { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top', offsetX: -offset };
    },
    _a[exports.NbPosition.TOP_START] = function (offset) {
        return { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', offsetY: -offset };
    },
    _a[exports.NbPosition.TOP_END] = function (offset) {
        return { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', offsetY: -offset };
    },
    _a);
var COUNTER_CLOCKWISE_POSITIONS = [
    exports.NbPosition.TOP,
    exports.NbPosition.TOP_END,
    exports.NbPosition.TOP_START,
    exports.NbPosition.START,
    exports.NbPosition.START_TOP,
    exports.NbPosition.START_BOTTOM,
    exports.NbPosition.BOTTOM,
    exports.NbPosition.BOTTOM_START,
    exports.NbPosition.BOTTOM_END,
    exports.NbPosition.END,
    exports.NbPosition.END_BOTTOM,
    exports.NbPosition.END_TOP,
];
var CLOCKWISE_POSITIONS = [
    exports.NbPosition.TOP,
    exports.NbPosition.TOP_START,
    exports.NbPosition.TOP_END,
    exports.NbPosition.END,
    exports.NbPosition.END_TOP,
    exports.NbPosition.END_BOTTOM,
    exports.NbPosition.BOTTOM,
    exports.NbPosition.BOTTOM_END,
    exports.NbPosition.BOTTOM_START,
    exports.NbPosition.START,
    exports.NbPosition.START_BOTTOM,
    exports.NbPosition.START_TOP,
];
var VERTICAL_POSITIONS = [exports.NbPosition.BOTTOM, exports.NbPosition.TOP];
var HORIZONTAL_POSITIONS = [exports.NbPosition.START, exports.NbPosition.END];
function comparePositions(p1, p2) {
    return p1.originX === p2.originX
        && p1.originY === p2.originY
        && p1.overlayX === p2.overlayX
        && p1.overlayY === p2.overlayY;
}
/**
 * The main idea of the adjustable connected strategy is to provide predefined set of positions for your overlay.
 * You have to provide adjustment and appropriate strategy will be chosen in runtime.
 * */
var NbAdjustableConnectedPositionStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbAdjustableConnectedPositionStrategy, _super);
    function NbAdjustableConnectedPositionStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._offset = 15;
        _this.positionChange = _this.positionChanges.pipe(rxjs_operators.map(function (positionChange) { return positionChange.connectionPair; }), rxjs_operators.map(function (connectionPair) {
            return _this.appliedPositions.find(function (_a) {
                var connectedPosition = _a.connectedPosition;
                return comparePositions(connectedPosition, connectionPair);
            }).key;
        }));
        return _this;
    }
    NbAdjustableConnectedPositionStrategy.prototype.attach = function (overlayRef) {
        /**
         * We have to apply positions before attach because super.attach() validates positions and crashes app
         * if no positions provided.
         * */
        this.applyPositions();
        _super.prototype.attach.call(this, overlayRef);
    };
    NbAdjustableConnectedPositionStrategy.prototype.apply = function () {
        this.applyPositions();
        _super.prototype.apply.call(this);
    };
    NbAdjustableConnectedPositionStrategy.prototype.position = function (position) {
        this._position = position;
        return this;
    };
    NbAdjustableConnectedPositionStrategy.prototype.adjustment = function (adjustment) {
        this._adjustment = adjustment;
        return this;
    };
    NbAdjustableConnectedPositionStrategy.prototype.offset = function (offset) {
        this._offset = offset;
        return this;
    };
    NbAdjustableConnectedPositionStrategy.prototype.applyPositions = function () {
        var positions = this.createPositions();
        this.persistChosenPositions(positions);
        this.withPositions(this.appliedPositions.map(function (_a) {
            var connectedPosition = _a.connectedPosition;
            return connectedPosition;
        }));
    };
    NbAdjustableConnectedPositionStrategy.prototype.createPositions = function () {
        switch (this._adjustment) {
            case exports.NbAdjustment.NOOP:
                return [this._position];
            case exports.NbAdjustment.CLOCKWISE:
                return this.reorderPreferredPositions(CLOCKWISE_POSITIONS);
            case exports.NbAdjustment.COUNTERCLOCKWISE:
                return this.reorderPreferredPositions(COUNTER_CLOCKWISE_POSITIONS);
            case exports.NbAdjustment.HORIZONTAL:
                return this.reorderPreferredPositions(HORIZONTAL_POSITIONS);
            case exports.NbAdjustment.VERTICAL:
                return this.reorderPreferredPositions(VERTICAL_POSITIONS);
        }
    };
    NbAdjustableConnectedPositionStrategy.prototype.persistChosenPositions = function (positions) {
        var _this = this;
        this.appliedPositions = positions.map(function (position) { return ({
            key: position,
            connectedPosition: POSITIONS[position](_this._offset),
        }); });
    };
    NbAdjustableConnectedPositionStrategy.prototype.reorderPreferredPositions = function (positions) {
        // Physical positions should be mapped to logical as adjustments use logical positions.
        var startPositionIndex = positions.indexOf(this.mapToLogicalPosition(this._position));
        var firstPart = positions.slice(startPositionIndex);
        var secondPart = positions.slice(0, startPositionIndex);
        return firstPart.concat(secondPart);
    };
    NbAdjustableConnectedPositionStrategy.prototype.mapToLogicalPosition = function (position) {
        if (position === exports.NbPosition.LEFT) {
            return exports.NbPosition.START;
        }
        if (position === exports.NbPosition.RIGHT) {
            return exports.NbPosition.END;
        }
        return position;
    };
    return NbAdjustableConnectedPositionStrategy;
}(NbFlexibleConnectedPositionStrategy));
var NbGlobalPositionStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbGlobalPositionStrategy, _super);
    function NbGlobalPositionStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbGlobalPositionStrategy.prototype.position = function (position) {
        switch (position) {
            case exports.NbGlobalLogicalPosition.TOP_START:
                return this.top().left();
            case exports.NbGlobalLogicalPosition.TOP_END:
                return this.top().right();
            case exports.NbGlobalLogicalPosition.BOTTOM_START:
                return this.bottom().left();
            case exports.NbGlobalLogicalPosition.BOTTOM_END:
                return this.bottom().right();
        }
    };
    return NbGlobalPositionStrategy;
}(_angular_cdk_overlay.GlobalPositionStrategy));
var NbPositionBuilderService = /** @class */ (function () {
    function NbPositionBuilderService(document, viewportRuler, platform, positionBuilder, overlayContainer) {
        this.document = document;
        this.viewportRuler = viewportRuler;
        this.platform = platform;
        this.positionBuilder = positionBuilder;
        this.overlayContainer = overlayContainer;
    }
    NbPositionBuilderService.prototype.global = function () {
        return new NbGlobalPositionStrategy();
    };
    NbPositionBuilderService.prototype.connectedTo = function (elementRef) {
        return new NbAdjustableConnectedPositionStrategy(elementRef, this.viewportRuler, this.document, this.platform, this.overlayContainer)
            .withFlexibleDimensions(false)
            .withPush(false);
    };
    NbPositionBuilderService = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(0, i0.Inject(NB_DOCUMENT)),
        tslib.__metadata("design:paramtypes", [Object, NbViewportRulerAdapter,
            NbPlatform,
            NbOverlayPositionBuilder,
            NbOverlayContainerAdapter])
    ], NbPositionBuilderService);
    return NbPositionBuilderService;
}());

var NbPositionedContainer = /** @class */ (function () {
    // @breaking-change @5.0.0 Rename to NbPositionedContainerComponent and enable ts lint
    // tslint:disable-next-line
    function NbPositionedContainer() {
    }
    Object.defineProperty(NbPositionedContainer.prototype, "top", {
        get: function () {
            return this.position === exports.NbPosition.TOP;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbPositionedContainer.prototype, "topStart", {
        get: function () {
            return this.position === exports.NbPosition.TOP_START;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbPositionedContainer.prototype, "topEnd", {
        get: function () {
            return this.position === exports.NbPosition.TOP_END;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbPositionedContainer.prototype, "right", {
        get: function () {
            return this.position === exports.NbPosition.RIGHT || this.position === exports.NbPosition.END;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbPositionedContainer.prototype, "endTop", {
        get: function () {
            return this.position === exports.NbPosition.END_TOP;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbPositionedContainer.prototype, "endBottom", {
        get: function () {
            return this.position === exports.NbPosition.END_BOTTOM;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbPositionedContainer.prototype, "bottom", {
        get: function () {
            return this.position === exports.NbPosition.BOTTOM;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbPositionedContainer.prototype, "bottomStart", {
        get: function () {
            return this.position === exports.NbPosition.BOTTOM_START;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbPositionedContainer.prototype, "bottomEnd", {
        get: function () {
            return this.position === exports.NbPosition.BOTTOM_END;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbPositionedContainer.prototype, "left", {
        get: function () {
            return this.position === exports.NbPosition.LEFT || this.position === exports.NbPosition.START;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbPositionedContainer.prototype, "startTop", {
        get: function () {
            return this.position === exports.NbPosition.START_TOP;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbPositionedContainer.prototype, "startBottom", {
        get: function () {
            return this.position === exports.NbPosition.START_BOTTOM;
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbPositionedContainer.prototype, "position", void 0);
    tslib.__decorate([
        i0.HostBinding('class.nb-overlay-top'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbPositionedContainer.prototype, "top", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-overlay-top-start'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbPositionedContainer.prototype, "topStart", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-overlay-top-end'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbPositionedContainer.prototype, "topEnd", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-overlay-right'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbPositionedContainer.prototype, "right", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-overlay-end-top'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbPositionedContainer.prototype, "endTop", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-overlay-end-bottom'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbPositionedContainer.prototype, "endBottom", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-overlay-bottom'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbPositionedContainer.prototype, "bottom", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-overlay-bottom-start'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbPositionedContainer.prototype, "bottomStart", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-overlay-bottom-end'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbPositionedContainer.prototype, "bottomEnd", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-overlay-left'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbPositionedContainer.prototype, "left", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-overlay-start-top'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbPositionedContainer.prototype, "startTop", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-overlay-start-bottom'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbPositionedContainer.prototype, "startBottom", null);
    NbPositionedContainer = tslib.__decorate([
        i0.Component({
            template: ''
        })
        // @breaking-change @5.0.0 Rename to NbPositionedContainerComponent and enable ts lint
        // tslint:disable-next-line
    ], NbPositionedContainer);
    return NbPositionedContainer;
}());
var NbOverlayContainerComponent = /** @class */ (function () {
    function NbOverlayContainerComponent(vcr, injector, changeDetectorRef) {
        this.vcr = vcr;
        this.injector = injector;
        this.changeDetectorRef = changeDetectorRef;
        this.isAttached = false;
    }
    Object.defineProperty(NbOverlayContainerComponent.prototype, "isStringContent", {
        get: function () {
            return !!this.content;
        },
        enumerable: true,
        configurable: true
    });
    NbOverlayContainerComponent.prototype.attachComponentPortal = function (portal, context) {
        portal.injector = this.createChildInjector(portal.componentFactoryResolver);
        var componentRef = this.portalOutlet.attachComponentPortal(portal);
        if (context) {
            Object.assign(componentRef.instance, context);
        }
        componentRef.changeDetectorRef.markForCheck();
        componentRef.changeDetectorRef.detectChanges();
        this.isAttached = true;
        return componentRef;
    };
    NbOverlayContainerComponent.prototype.attachTemplatePortal = function (portal) {
        var templateRef = this.portalOutlet.attachTemplatePortal(portal);
        templateRef.detectChanges();
        this.isAttached = true;
        return templateRef;
    };
    NbOverlayContainerComponent.prototype.attachStringContent = function (content) {
        this.content = content;
        this.changeDetectorRef.markForCheck();
        this.changeDetectorRef.detectChanges();
        this.isAttached = true;
    };
    NbOverlayContainerComponent.prototype.detach = function () {
        if (this.portalOutlet.hasAttached()) {
            this.portalOutlet.detach();
        }
        this.attachStringContent(null);
        this.isAttached = false;
    };
    NbOverlayContainerComponent.prototype.createChildInjector = function (cfr) {
        return new NbPortalInjector(this.injector, new WeakMap([
            [i0.ComponentFactoryResolver, cfr],
        ]));
    };
    tslib.__decorate([
        i0.ViewChild(NbPortalOutletDirective, { static: true }),
        tslib.__metadata("design:type", NbPortalOutletDirective)
    ], NbOverlayContainerComponent.prototype, "portalOutlet", void 0);
    NbOverlayContainerComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-overlay-container',
            template: "\n    <div *ngIf=\"isStringContent\" class=\"primitive-overlay\">{{ content }}</div>\n    <ng-template nbPortalOutlet></ng-template>\n  "
        }),
        tslib.__metadata("design:paramtypes", [i0.ViewContainerRef,
            i0.Injector, i0.ChangeDetectorRef])
    ], NbOverlayContainerComponent);
    return NbOverlayContainerComponent;
}());

function patch(container, containerContext) {
    Object.assign(container.instance, containerContext);
    container.changeDetectorRef.detectChanges();
    return container;
}
function createContainer(ref, container, context, componentFactoryResolver) {
    var containerRef = ref.attach(new NbComponentPortal(container, null, null, componentFactoryResolver));
    patch(containerRef, context);
    return containerRef;
}
var NbOverlayService = /** @class */ (function () {
    function NbOverlayService(overlay, layoutDirection) {
        this.overlay = overlay;
        this.layoutDirection = layoutDirection;
    }
    Object.defineProperty(NbOverlayService.prototype, "scrollStrategies", {
        get: function () {
            return this.overlay.scrollStrategies;
        },
        enumerable: true,
        configurable: true
    });
    NbOverlayService.prototype.create = function (config) {
        var overlayRef = this.overlay.create(config);
        this.layoutDirection.onDirectionChange()
            .subscribe(function (dir) { return overlayRef.setDirection(dir); });
        return overlayRef;
    };
    NbOverlayService = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [NbOverlay, NbLayoutDirectionService])
    ], NbOverlayService);
    return NbOverlayService;
}());

var NbScrollDispatcherAdapter = /** @class */ (function (_super) {
    tslib.__extends(NbScrollDispatcherAdapter, _super);
    function NbScrollDispatcherAdapter(ngZone, platform, scrollService) {
        var _this = _super.call(this, ngZone, platform) || this;
        _this.scrollService = scrollService;
        return _this;
    }
    NbScrollDispatcherAdapter.prototype.scrolled = function (auditTimeInMs) {
        return this.scrollService.onScroll();
    };
    NbScrollDispatcherAdapter = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [i0.NgZone, NbPlatform, NbLayoutScrollService])
    ], NbScrollDispatcherAdapter);
    return NbScrollDispatcherAdapter;
}(_angular_cdk_overlay.ScrollDispatcher));

/**
 * Overrides default block scroll strategy because default strategy blocks scrolling on the body only.
 * But Nebular has its own scrollable container - nb-layout. So, we need to block scrolling in it to.
 * */
var NbBlockScrollStrategyAdapter = /** @class */ (function (_super) {
    tslib.__extends(NbBlockScrollStrategyAdapter, _super);
    function NbBlockScrollStrategyAdapter(document, viewportRuler, scrollService) {
        var _this = _super.call(this, viewportRuler, document) || this;
        _this.scrollService = scrollService;
        return _this;
    }
    NbBlockScrollStrategyAdapter.prototype.enable = function () {
        _super.prototype.enable.call(this);
        this.scrollService.scrollable(false);
    };
    NbBlockScrollStrategyAdapter.prototype.disable = function () {
        _super.prototype.disable.call(this);
        this.scrollService.scrollable(true);
    };
    NbBlockScrollStrategyAdapter = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(0, i0.Inject(NB_DOCUMENT)),
        tslib.__metadata("design:paramtypes", [Object, NbViewportRulerAdapter,
            NbLayoutScrollService])
    ], NbBlockScrollStrategyAdapter);
    return NbBlockScrollStrategyAdapter;
}(_angular_cdk_overlay.BlockScrollStrategy));
var NbScrollStrategyOptions = /** @class */ (function (_super) {
    tslib.__extends(NbScrollStrategyOptions, _super);
    function NbScrollStrategyOptions(scrollService, scrollDispatcher, viewportRuler, ngZone, document) {
        var _this = _super.call(this, scrollDispatcher, viewportRuler, ngZone, document) || this;
        _this.scrollService = scrollService;
        _this.scrollDispatcher = scrollDispatcher;
        _this.viewportRuler = viewportRuler;
        _this.ngZone = ngZone;
        _this.document = document;
        _this.block = function () { return new NbBlockScrollStrategyAdapter(_this.document, _this.viewportRuler, _this.scrollService); };
        return _this;
    }
    NbScrollStrategyOptions = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(4, i0.Inject(NB_DOCUMENT)),
        tslib.__metadata("design:paramtypes", [NbLayoutScrollService,
            _angular_cdk_overlay.ScrollDispatcher,
            NbViewportRulerAdapter,
            i0.NgZone, Object])
    ], NbScrollStrategyOptions);
    return NbScrollStrategyOptions;
}(_angular_cdk_overlay.ScrollStrategyOptions));

var NbCdkAdapterModule = /** @class */ (function () {
    function NbCdkAdapterModule() {
    }
    NbCdkAdapterModule_1 = NbCdkAdapterModule;
    NbCdkAdapterModule.forRoot = function () {
        return {
            ngModule: NbCdkAdapterModule_1,
            providers: [
                NbViewportRulerAdapter,
                NbOverlayContainerAdapter,
                NbBlockScrollStrategyAdapter,
                NbScrollDispatcherAdapter,
                NbScrollStrategyOptions,
                { provide: _angular_cdk_overlay.OverlayContainer, useExisting: NbOverlayContainerAdapter },
                { provide: NbOverlayContainer, useExisting: NbOverlayContainerAdapter },
                { provide: _angular_cdk_overlay.ScrollDispatcher, useExisting: NbScrollDispatcherAdapter },
                { provide: _angular_cdk_overlay.ScrollStrategyOptions, useExisting: NbScrollStrategyOptions },
            ],
        };
    };
    var NbCdkAdapterModule_1;
    NbCdkAdapterModule = NbCdkAdapterModule_1 = tslib.__decorate([
        i0.NgModule({})
    ], NbCdkAdapterModule);
    return NbCdkAdapterModule;
}());

(function (NbTrigger) {
    NbTrigger["NOOP"] = "noop";
    NbTrigger["CLICK"] = "click";
    NbTrigger["HOVER"] = "hover";
    NbTrigger["HINT"] = "hint";
    NbTrigger["FOCUS"] = "focus";
})(exports.NbTrigger || (exports.NbTrigger = {}));
/**
 * TODO maybe we have to use renderer.listen instead of observableFromEvent?
 * Renderer provides capability use it in service worker, ssr and so on.
 * */
var NbTriggerStrategyBase = /** @class */ (function () {
    function NbTriggerStrategyBase(document, host, container) {
        this.document = document;
        this.host = host;
        this.container = container;
        this.destroyed$ = new rxjs.Subject();
    }
    NbTriggerStrategyBase.prototype.destroy = function () {
        this.destroyed$.next();
    };
    NbTriggerStrategyBase.prototype.isNotOnHostOrContainer = function (event) {
        return !this.isOnHost(event) && !this.isOnContainer(event);
    };
    NbTriggerStrategyBase.prototype.isOnHostOrContainer = function (event) {
        return this.isOnHost(event) || this.isOnContainer(event);
    };
    NbTriggerStrategyBase.prototype.isOnHost = function (_a) {
        var target = _a.target;
        return this.host.contains(target);
    };
    NbTriggerStrategyBase.prototype.isOnContainer = function (_a) {
        var target = _a.target;
        return this.container() && this.container().location.nativeElement.contains(target);
    };
    return NbTriggerStrategyBase;
}());
/**
 * Creates show and hide event streams.
 * Fires toggle event when the click was performed on the host element.
 * Fires close event when the click was performed on the document but
 * not on the host or container.
 * */
var NbClickTriggerStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbClickTriggerStrategy, _super);
    function NbClickTriggerStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // since we should track click for both SHOW and HIDE event we firstly need to track the click and the state
        // of the container and then later on decide should we hide it or show
        // if we track the click & state separately this will case a behavior when the container is getting shown
        // and then hidden right away
        _this.click$ = rxjs.fromEvent(_this.document, 'click')
            .pipe(rxjs_operators.map(function (event) { return [!_this.container() && _this.isOnHost(event), event]; }), rxjs_operators.share(), rxjs_operators.takeUntil(_this.destroyed$));
        _this.show$ = _this.click$
            .pipe(rxjs_operators.filter(function (_a) {
            var shouldShow = _a[0];
            return shouldShow;
        }), rxjs_operators.map(function (_a) {
            var event = _a[1];
            return event;
        }), rxjs_operators.takeUntil(_this.destroyed$));
        _this.hide$ = _this.click$
            .pipe(rxjs_operators.filter(function (_a) {
            var shouldShow = _a[0], event = _a[1];
            return !shouldShow && !_this.isOnContainer(event);
        }), rxjs_operators.map(function (_a) {
            var event = _a[1];
            return event;
        }), rxjs_operators.takeUntil(_this.destroyed$));
        return _this;
    }
    return NbClickTriggerStrategy;
}(NbTriggerStrategyBase));
/**
 * Creates show and hide event streams.
 * Fires open event when a mouse hovers over the host element and stay over at least 100 milliseconds.
 * Fires close event when the mouse leaves the host element and stops out of the host and popover container.
 * */
var NbHoverTriggerStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbHoverTriggerStrategy, _super);
    function NbHoverTriggerStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.show$ = rxjs.fromEvent(_this.host, 'mouseenter')
            .pipe(rxjs_operators.filter(function () { return !_this.container(); }), 
        // this `delay & takeUntil & repeat` operators combination is a synonym for `conditional debounce`
        // meaning that if one event occurs in some time after the initial one we won't react to it
        rxjs_operators.delay(100), 
        // tslint:disable-next-line:rxjs-no-unsafe-takeuntil
        rxjs_operators.takeUntil(rxjs.fromEvent(_this.host, 'mouseleave')), rxjs_operators.repeat(), rxjs_operators.takeUntil(_this.destroyed$));
        _this.hide$ = rxjs.fromEvent(_this.host, 'mouseleave')
            .pipe(rxjs_operators.switchMap(function () { return rxjs.fromEvent(_this.document, 'mousemove')
            .pipe(rxjs_operators.debounceTime(100), rxjs_operators.takeWhile(function () { return !!_this.container(); }), rxjs_operators.filter(function (event) { return _this.isNotOnHostOrContainer(event); })); }), rxjs_operators.takeUntil(_this.destroyed$));
        return _this;
    }
    return NbHoverTriggerStrategy;
}(NbTriggerStrategyBase));
/**
 * Creates show and hide event streams.
 * Fires open event when a mouse hovers over the host element and stay over at least 100 milliseconds.
 * Fires close event when the mouse leaves the host element.
 * */
var NbHintTriggerStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbHintTriggerStrategy, _super);
    function NbHintTriggerStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.show$ = rxjs.fromEvent(_this.host, 'mouseenter')
            .pipe(
        // this `delay & takeUntil & repeat` operators combination is a synonym for `conditional debounce`
        // meaning that if one event occurs in some time after the initial one we won't react to it
        rxjs_operators.delay(100), 
        // tslint:disable-next-line:rxjs-no-unsafe-takeuntil
        rxjs_operators.takeUntil(rxjs.fromEvent(_this.host, 'mouseleave')), rxjs_operators.repeat(), rxjs_operators.takeUntil(_this.destroyed$));
        _this.hide$ = rxjs.fromEvent(_this.host, 'mouseleave')
            .pipe(rxjs_operators.takeUntil(_this.destroyed$));
        return _this;
    }
    return NbHintTriggerStrategy;
}(NbTriggerStrategyBase));
/**
 * Creates show and hide event streams.
 * Fires open event when a focus is on the host element and stay over at least 100 milliseconds.
 * Fires close event when the focus leaves the host element.
 * */
var NbFocusTriggerStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbFocusTriggerStrategy, _super);
    function NbFocusTriggerStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.focusOut$ = rxjs.fromEvent(_this.host, 'focusout')
            .pipe(rxjs_operators.switchMap(function () { return rxjs.fromEvent(_this.document, 'focusin')
            .pipe(rxjs_operators.takeWhile(function () { return !!_this.container(); }), rxjs_operators.filter(function (event) { return _this.isNotOnHostOrContainer(event); })); }), rxjs_operators.takeUntil(_this.destroyed$));
        _this.clickIn$ = rxjs.fromEvent(_this.host, 'click')
            .pipe(rxjs_operators.filter(function () { return !_this.container(); }), rxjs_operators.takeUntil(_this.destroyed$));
        _this.clickOut$ = rxjs.fromEvent(_this.document, 'click')
            .pipe(rxjs_operators.filter(function () { return !!_this.container(); }), rxjs_operators.filter(function (event) { return _this.isNotOnHostOrContainer(event); }), rxjs_operators.takeUntil(_this.destroyed$));
        _this.tabKeyPress$ = rxjs.fromEvent(_this.document, 'keydown')
            .pipe(rxjs_operators.filter(function (event) { return event.keyCode === 9; }), rxjs_operators.filter(function () { return !!_this.container(); }), rxjs_operators.takeUntil(_this.destroyed$));
        _this.show$ = rxjs.merge(rxjs.fromEvent(_this.host, 'focusin'), _this.clickIn$)
            .pipe(rxjs_operators.filter(function () { return !_this.container(); }), rxjs_operators.debounceTime(100), 
        // tslint:disable-next-line:rxjs-no-unsafe-takeuntil
        rxjs_operators.takeUntil(rxjs.fromEvent(_this.host, 'focusout')), rxjs_operators.repeat(), rxjs_operators.takeUntil(_this.destroyed$));
        _this.hide$ = rxjs.merge(_this.focusOut$, _this.tabKeyPress$, _this.clickOut$)
            .pipe(rxjs_operators.takeUntil(_this.destroyed$));
        return _this;
    }
    return NbFocusTriggerStrategy;
}(NbTriggerStrategyBase));
/**
 * Creates empty show and hide event streams.
 * */
var NbNoopTriggerStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbNoopTriggerStrategy, _super);
    function NbNoopTriggerStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.show$ = rxjs.EMPTY;
        _this.hide$ = rxjs.EMPTY;
        return _this;
    }
    return NbNoopTriggerStrategy;
}(NbTriggerStrategyBase));
var NbTriggerStrategyBuilderService = /** @class */ (function () {
    function NbTriggerStrategyBuilderService(_document) {
        this._document = _document;
    }
    NbTriggerStrategyBuilderService.prototype.trigger = function (trigger$$1) {
        this._trigger = trigger$$1;
        return this;
    };
    NbTriggerStrategyBuilderService.prototype.host = function (host) {
        this._host = host;
        return this;
    };
    NbTriggerStrategyBuilderService.prototype.container = function (container) {
        this._container = container;
        return this;
    };
    NbTriggerStrategyBuilderService.prototype.build = function () {
        switch (this._trigger) {
            case exports.NbTrigger.CLICK:
                return new NbClickTriggerStrategy(this._document, this._host, this._container);
            case exports.NbTrigger.HINT:
                return new NbHintTriggerStrategy(this._document, this._host, this._container);
            case exports.NbTrigger.HOVER:
                return new NbHoverTriggerStrategy(this._document, this._host, this._container);
            case exports.NbTrigger.FOCUS:
                return new NbFocusTriggerStrategy(this._document, this._host, this._container);
            case exports.NbTrigger.NOOP:
                return new NbNoopTriggerStrategy(this._document, this._host, this._container);
            default:
                throw new Error('Trigger have to be provided');
        }
    };
    NbTriggerStrategyBuilderService = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(0, i0.Inject(NB_DOCUMENT)),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbTriggerStrategyBuilderService);
    return NbTriggerStrategyBuilderService;
}());

var NbOverlayModule = /** @class */ (function () {
    function NbOverlayModule() {
    }
    NbOverlayModule_1 = NbOverlayModule;
    NbOverlayModule.forRoot = function () {
        return {
            ngModule: NbOverlayModule_1,
            providers: tslib.__spreadArrays([
                NbPositionBuilderService,
                NbTriggerStrategyBuilderService,
                NbOverlayService,
                NbPositionHelper
            ], NbCdkMappingModule.forRoot().providers, NbCdkAdapterModule.forRoot().providers, NbA11yModule.forRoot().providers),
        };
    };
    var NbOverlayModule_1;
    NbOverlayModule = NbOverlayModule_1 = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbCdkMappingModule,
                NbSharedModule,
            ],
            declarations: [
                NbPositionedContainer,
                NbOverlayContainerComponent,
            ],
            exports: [
                NbCdkMappingModule,
                NbCdkAdapterModule,
                NbOverlayContainerComponent,
            ],
        })
    ], NbOverlayModule);
    return NbOverlayModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
function windowFactory(platformId) {
    if (_angular_common.isPlatformBrowser(platformId)) {
        return window;
    }
    // Provide undefined to get the error when trying to access the window as it
    // shouldn't be used outside the browser. Those who need to provide something
    // instead of window (e.g. domino window when running in node) could override
    // NB_WINDOW token.
    return undefined;
}
var NbThemeModule = /** @class */ (function () {
    function NbThemeModule() {
    }
    NbThemeModule_1 = NbThemeModule;
    // TODO: check the options (throw exception?)
    /**
     * Main Theme Module
     *
     * @param nbThemeOptions {NbThemeOptions} Main theme options
     * @param nbJSThemes {NbJSThemeOptions[]} List of JS Themes, will be merged with default themes
     * @param nbMediaBreakpoints {NbMediaBreakpoint} Available media breakpoints
     * @param layoutDirection {NbLayoutDirection} Layout direction
     *
     * @returns {ModuleWithProviders}
     */
    NbThemeModule.forRoot = function (nbThemeOptions, nbJSThemes, nbMediaBreakpoints, layoutDirection) {
        if (nbThemeOptions === void 0) { nbThemeOptions = { name: 'default' }; }
        return {
            ngModule: NbThemeModule_1,
            providers: tslib.__spreadArrays([
                { provide: NB_THEME_OPTIONS, useValue: nbThemeOptions || {} },
                { provide: NB_BUILT_IN_JS_THEMES, useValue: BUILT_IN_THEMES },
                { provide: NB_JS_THEMES, useValue: nbJSThemes || [] },
                { provide: NB_MEDIA_BREAKPOINTS, useValue: nbMediaBreakpoints || DEFAULT_MEDIA_BREAKPOINTS },
                { provide: NB_DOCUMENT, useExisting: _angular_common.DOCUMENT },
                { provide: NB_WINDOW, useFactory: windowFactory, deps: [i0.PLATFORM_ID] },
                NbJSThemesRegistry,
                NbThemeService,
                NbMediaBreakpointsService,
                NbSpinnerService,
                { provide: NB_LAYOUT_DIRECTION, useValue: layoutDirection || exports.NbLayoutDirection.LTR },
                NbLayoutDirectionService,
                NbLayoutScrollService,
                NbLayoutRulerService
            ], NbOverlayModule.forRoot().providers),
        };
    };
    var NbThemeModule_1;
    NbThemeModule = NbThemeModule_1 = tslib.__decorate([
        i0.NgModule({
            imports: [
                _angular_common.CommonModule,
            ],
            exports: [],
        })
    ], NbThemeModule);
    return NbThemeModule;
}());

var NbColorHelper = /** @class */ (function () {
    function NbColorHelper() {
    }
    NbColorHelper.shade = function (color, weight) {
        return NbColorHelper.mix('#000000', color, weight);
    };
    NbColorHelper.tint = function (color, weight) {
        return NbColorHelper.mix('#ffffff', color, weight);
    };
    NbColorHelper.mix = function (color1, color2, weight) {
        var d2h = function (d) { return d.toString(16); };
        var h2d = function (h) { return parseInt(h, 16); };
        var result = '#';
        for (var i = 1; i < 7; i += 2) {
            var firstPart = h2d(color1.substr(i, 2));
            var secondPart = h2d(color2.substr(i, 2));
            var resultPart = d2h(Math.floor(secondPart + (firstPart - secondPart) * (weight / 100.0)));
            result += ('0' + resultPart).slice(-2);
        }
        return result;
    };
    NbColorHelper.hexToRgbA = function (hex, alpha) {
        var c;
        if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {
            c = hex.substring(1).split('');
            if (c.length === 3) {
                c = [c[0], c[0], c[1], c[1], c[2], c[2]];
            }
            c = '0x' + c.join('');
            return 'rgba(' + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + ',' + alpha + ')';
        }
        throw new Error('Bad Hex');
    };
    return NbColorHelper;
}());

(function (NbIconPackType) {
    NbIconPackType["SVG"] = "svg";
    NbIconPackType["FONT"] = "font";
})(exports.NbIconPackType || (exports.NbIconPackType = {}));

var NbFontIcon = /** @class */ (function () {
    function NbFontIcon(name, content, params) {
        if (params === void 0) { params = {}; }
        this.name = name;
        this.content = content;
        this.params = params;
    }
    NbFontIcon.prototype.getClasses = function (options) {
        var classes = [];
        if (this.params.packClass) {
            classes.push(this.params.packClass);
        }
        var name = this.params.iconClassPrefix ? this.params.iconClassPrefix + "-" + this.name : this.name;
        classes.push(name);
        return classes;
    };
    NbFontIcon.prototype.getContent = function (options) {
        return this.content;
    };
    return NbFontIcon;
}());
var NbSvgIcon = /** @class */ (function () {
    function NbSvgIcon(name, content, params) {
        if (params === void 0) { params = {}; }
        this.name = name;
        this.content = content;
        this.params = params;
    }
    NbSvgIcon.prototype.getClasses = function (options) {
        var classes = [];
        if (this.params.packClass) {
            classes.push(this.params.packClass);
        }
        return classes;
    };
    NbSvgIcon.prototype.getContent = function (options) {
        return this.content;
    };
    return NbSvgIcon;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbIconDefinition = /** @class */ (function () {
    function NbIconDefinition() {
    }
    return NbIconDefinition;
}());
function throwPackNotFoundError(name) {
    throw Error("Icon Pack '" + name + "' is not registered");
}
function throwNoDefaultPackError() {
    throw Error('Default pack is not registered.');
}
function throwIconNotFoundError(name, pack) {
    throw Error("Icon '" + name + "' is not registered in pack '" + pack + "'. Check icon name or consider switching icon pack.");
}
function throwWrongPackTypeError(name, type, desiredType) {
    throw Error("Pack '" + name + "' is not an '" + desiredType + "' Pack and its type is '" + type + "'");
}
/**
 * This service allows to register multiple icon packs to use them later within `<nb-icon></nb-icon>` component.
 */
var NbIconLibraries = /** @class */ (function () {
    function NbIconLibraries() {
        this.packs = new Map();
    }
    /**
     * Registers new Svg icon pack
     * @param {string} name
     * @param {NbIcon} icons
     * @param {NbIconPackParams} params
     */
    NbIconLibraries.prototype.registerSvgPack = function (name, icons, params) {
        if (params === void 0) { params = {}; }
        this.packs.set(name, {
            name: name,
            icons: new Map(Object.entries(icons)),
            params: params,
            type: exports.NbIconPackType.SVG,
        });
    };
    /**
     * Registers new font pack
     * @param {string} name
     * @param {NbIconPackParams} params
     */
    NbIconLibraries.prototype.registerFontPack = function (name, params) {
        if (params === void 0) { params = {}; }
        this.packs.set(name, {
            name: name,
            params: params,
            icons: new Map(),
            type: exports.NbIconPackType.FONT,
        });
    };
    /**
     * Returns pack by name
     * @param {string} name
     */
    NbIconLibraries.prototype.getPack = function (name) {
        return this.packs.get(name);
    };
    /**
     * Sets pack as a default
     * @param {string} name
     */
    NbIconLibraries.prototype.setDefaultPack = function (name) {
        if (!this.packs.has(name)) {
            throwPackNotFoundError(name);
        }
        this.defaultPack = this.packs.get(name);
    };
    /**
     * Returns Svg icon
     * @param {string} name
     * @param {string} pack
     *
     * @returns NbIconDefinition
     */
    NbIconLibraries.prototype.getSvgIcon = function (name, pack) {
        var iconsPack = pack ? this.getPackOrThrow(pack) : this.getDefaultPackOrThrow();
        if (iconsPack.type !== exports.NbIconPackType.SVG) {
            throwWrongPackTypeError(iconsPack.name, iconsPack.type, 'SVG');
        }
        var icon = this.getIconFromPack(name, iconsPack);
        return {
            name: name,
            pack: iconsPack.name,
            type: exports.NbIconPackType.SVG,
            icon: this.createSvgIcon(name, icon, iconsPack.params),
        };
    };
    /**
     * Returns Font icon
     * @param {string} name
     * @param {string} pack
     *
     * @returns NbIconDefinition
     */
    NbIconLibraries.prototype.getFontIcon = function (name, pack) {
        var iconsPack = pack ? this.getPackOrThrow(pack) : this.getDefaultPackOrThrow();
        if (iconsPack.type !== exports.NbIconPackType.FONT) {
            throwWrongPackTypeError(iconsPack.name, iconsPack.type, 'Font');
        }
        var icon = this.getIconFromPack(name, iconsPack, false);
        return {
            name: name,
            pack: iconsPack.name,
            type: exports.NbIconPackType.FONT,
            icon: this.createFontIcon(name, icon ? icon : '', iconsPack.params),
        };
    };
    /**
     * Returns an icon
     * @param {string} name
     * @param {string} pack
     *
     * @returns NbIconDefinition
     */
    NbIconLibraries.prototype.getIcon = function (name, pack) {
        var iconsPack = pack ? this.getPackOrThrow(pack) : this.getDefaultPackOrThrow();
        if (iconsPack.type === exports.NbIconPackType.SVG) {
            return this.getSvgIcon(name, pack);
        }
        return this.getFontIcon(name, pack);
    };
    NbIconLibraries.prototype.createSvgIcon = function (name, content, params) {
        return content instanceof NbSvgIcon ? content : new NbSvgIcon(name, content, params);
    };
    NbIconLibraries.prototype.createFontIcon = function (name, content, params) {
        return content instanceof NbFontIcon ? content : new NbFontIcon(name, content, params);
    };
    NbIconLibraries.prototype.getPackOrThrow = function (name) {
        var pack = this.packs.get(name);
        if (!pack) {
            throwPackNotFoundError(name);
        }
        return pack;
    };
    NbIconLibraries.prototype.getDefaultPackOrThrow = function () {
        if (!this.defaultPack) {
            throwNoDefaultPackError();
        }
        return this.defaultPack;
    };
    NbIconLibraries.prototype.getIconFromPack = function (name, pack, shouldThrow) {
        if (shouldThrow === void 0) { shouldThrow = true; }
        if (shouldThrow && !pack.icons.has(name)) {
            throwIconNotFoundError(name, pack.name);
        }
        return pack.icons.get(name);
    };
    NbIconLibraries.ɵprov = i0.ɵɵdefineInjectable({ factory: function NbIconLibraries_Factory() { return new NbIconLibraries(); }, token: NbIconLibraries, providedIn: "root" });
    NbIconLibraries = tslib.__decorate([
        i0.Injectable({ providedIn: 'root' })
    ], NbIconLibraries);
    return NbIconLibraries;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Icon component. Allows to render both `svg` and `font` icons.
 * Starting from Nebular 4.0 uses [Eva Icons](https://akveo.github.io/eva-icons/) pack by default.
 *
 * Basic icon example:
 * @stacked-example(Showcase, icon/icon-showcase.component)
 *
 * Icon configuration:
 *
 * ```html
 * <nb-icon icon="star"></nb-icon>
 * ```
 * ### Installation
 *
 * By default Nebular comes without any pre-installed icon pack.
 * Starting with Nebular 4.0.0 we ship separate package called `@nebular/eva-icons`
 * which integrates SVG [Eva Icons](https://akveo.github.io/eva-icons/) pack to Nebular. To add it to your
 * project run:
 * ```sh
 * npm i @nebular/eva-icons
 * ```
 * This command will install Eva Icons pack. Then register `NbEvaIconsModule` into your app module:
 * ```ts
 * import { NbEvaIconsModule } from '@nebular/eva-icons';
 *
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbEvaIconsModule,
 *   ],
 * })
 * export class AppModule { }
 * ```
 * Last thing, import `NbIconModule` to your feature module where you need to show an icon:
 * ```ts
 * import { NbIconModule } from '@nebular/theme';
 *
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbIconModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Icon can be colored using `status` input:
 * ```html
 * <nb-icon icon="star" status="warning"></nb-icon>
 * ```
 *
 * Colored icons:
 * @stacked-example(Colored Icons, icon/icon-colors.component)
 *
 * In case you need to specify an icon from a specific icon pack, this could be done using `pack` input property:
 * ```html
 * <nb-icon icon="star" pack="font-awesome"></nb-icon>
 * ```
 * Additional icon settings (if available by the icon pack) could be passed using `options` input:
 *
 * ```html
 * <nb-icon icon="star" [options]="{ animation: { type: 'zoom' } }"></nb-icon>
 * ```
 *
 * @styles
 *
 * icon-font-size:
 * icon-line-height:
 * icon-width:
 * icon-height:
 * icon-svg-vertical-align:
 * icon-basic-color:
 * icon-primary-color:
 * icon-info-color:
 * icon-success-color:
 * icon-warning-color:
 * icon-danger-color:
 * icon-control-color:
 */
var NbIconComponent = /** @class */ (function () {
    function NbIconComponent(sanitizer, iconLibrary, el, renderer) {
        this.sanitizer = sanitizer;
        this.iconLibrary = iconLibrary;
        this.el = el;
        this.renderer = renderer;
        this.prevClasses = [];
        this.html = '';
    }
    Object.defineProperty(NbIconComponent.prototype, "primary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbIconComponent.prototype, "info", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbIconComponent.prototype, "success", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbIconComponent.prototype, "warning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbIconComponent.prototype, "danger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbIconComponent.prototype, "basic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbIconComponent.prototype, "control", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbIconComponent.prototype, "config", {
        /**
         * Sets all icon configurable properties via config object.
         * If passed value is a string set icon name.
         * @docs-private
         */
        get: function () {
            return this._config;
        },
        set: function (value) {
            if (!value) {
                return;
            }
            this._config = value;
            if (typeof value === 'string') {
                this.icon = value;
            }
            else {
                this.icon = value.icon;
                this.pack = value.pack;
                this.status = value.status;
                this.options = value.options;
            }
        },
        enumerable: true,
        configurable: true
    });
    NbIconComponent.prototype.ngOnInit = function () {
        this.iconDef = this.renderIcon(this.icon, this.pack, this.options);
    };
    NbIconComponent.prototype.ngOnChanges = function () {
        if (this.iconDef) {
            this.iconDef = this.renderIcon(this.icon, this.pack, this.options);
        }
    };
    NbIconComponent.prototype.renderIcon = function (name, pack, options) {
        var iconDefinition = this.iconLibrary.getIcon(name, pack);
        var content = iconDefinition.icon.getContent(options);
        if (content) {
            this.html = this.sanitizer.bypassSecurityTrustHtml(content);
        }
        this.assignClasses(iconDefinition.icon.getClasses(options));
        return iconDefinition;
    };
    NbIconComponent.prototype.assignClasses = function (classes) {
        var _this = this;
        this.prevClasses.forEach(function (className) {
            _this.renderer.removeClass(_this.el.nativeElement, className);
        });
        classes.forEach(function (className) {
            _this.renderer.addClass(_this.el.nativeElement, className);
        });
        this.prevClasses = classes;
    };
    tslib.__decorate([
        i0.HostBinding('innerHtml'),
        tslib.__metadata("design:type", Object)
    ], NbIconComponent.prototype, "html", void 0);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbIconComponent.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbIconComponent.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbIconComponent.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbIconComponent.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbIconComponent.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbIconComponent.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbIconComponent.prototype, "control", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbIconComponent.prototype, "icon", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbIconComponent.prototype, "pack", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbIconComponent.prototype, "options", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbIconComponent.prototype, "status", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbIconComponent.prototype, "config", null);
    NbIconComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-icon',
            template: '',
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: [":host{display:inline-block}\n"]
        }),
        tslib.__metadata("design:paramtypes", [_angular_platformBrowser.DomSanitizer,
            NbIconLibraries,
            i0.ElementRef,
            i0.Renderer2])
    ], NbIconComponent);
    return NbIconComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbIconModule = /** @class */ (function () {
    function NbIconModule(iconsLibrary) {
        this.iconsLibrary = iconsLibrary;
        this.essentialsPackName = 'nebular-essentials';
        // in case of consequent calls we don't need to enable `nebular-essentials` pack again
        if (this.iconsLibrary.getPack(this.essentialsPackName)) {
            return;
        }
        // tslint:disable:max-line-length
        this.iconsLibrary.registerSvgPack(this.essentialsPackName, {
            'chevron-down-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="chevron-down"><rect width="24" height="24" opacity="0"/><path d="M12 15.5a1 1 0 0 1-.71-.29l-4-4a1 1 0 1 1 1.42-1.42L12 13.1l3.3-3.18a1 1 0 1 1 1.38 1.44l-4 3.86a1 1 0 0 1-.68.28z"/></g></g></svg>',
            'chevron-up-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="chevron-up"><rect width="24" height="24" transform="rotate(180 12 12)" opacity="0"/><path d="M16 14.5a1 1 0 0 1-.71-.29L12 10.9l-3.3 3.18a1 1 0 0 1-1.41 0 1 1 0 0 1 0-1.42l4-3.86a1 1 0 0 1 1.4 0l4 4a1 1 0 0 1 0 1.42 1 1 0 0 1-.69.28z"/></g></g></svg>',
            'chevron-left-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="chevron-left"><rect width="24" height="24" transform="rotate(90 12 12)" opacity="0"/><path d="M13.36 17a1 1 0 0 1-.72-.31l-3.86-4a1 1 0 0 1 0-1.4l4-4a1 1 0 1 1 1.42 1.42L10.9 12l3.18 3.3a1 1 0 0 1 0 1.41 1 1 0 0 1-.72.29z"/></g></g></svg>',
            'chevron-right-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="chevron-right"><rect width="24" height="24" transform="rotate(-90 12 12)" opacity="0"/><path d="M10.5 17a1 1 0 0 1-.71-.29 1 1 0 0 1 0-1.42L13.1 12 9.92 8.69a1 1 0 0 1 0-1.41 1 1 0 0 1 1.42 0l3.86 4a1 1 0 0 1 0 1.4l-4 4a1 1 0 0 1-.7.32z"/></g></g></svg>',
            'checkmark-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="checkmark"><rect width="24" height="24" opacity="0"/><path d="M9.86 18a1 1 0 0 1-.73-.32l-4.86-5.17a1 1 0 1 1 1.46-1.37l4.12 4.39 8.41-9.2a1 1 0 1 1 1.48 1.34l-9.14 10a1 1 0 0 1-.73.33z"/></g></g></svg>',
            'paper-plane-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="paper-plane"><rect width="24" height="24" opacity="0"/><path d="M21 4a1.31 1.31 0 0 0-.06-.27v-.09a1 1 0 0 0-.2-.3 1 1 0 0 0-.29-.19h-.09a.86.86 0 0 0-.31-.15H20a1 1 0 0 0-.3 0l-18 6a1 1 0 0 0 0 1.9l8.53 2.84 2.84 8.53a1 1 0 0 0 1.9 0l6-18A1 1 0 0 0 21 4zm-4.7 2.29l-5.57 5.57L5.16 10zM14 18.84l-1.86-5.57 5.57-5.57z"/></g></g></svg>',
            'file-text-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="file-text"><rect width="24" height="24" opacity="0"/><path d="M15 16H9a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2z"/><path d="M9 14h3a1 1 0 0 0 0-2H9a1 1 0 0 0 0 2z"/><path d="M19.74 8.33l-5.44-6a1 1 0 0 0-.74-.33h-7A2.53 2.53 0 0 0 4 4.5v15A2.53 2.53 0 0 0 6.56 22h10.88A2.53 2.53 0 0 0 20 19.5V9a1 1 0 0 0-.26-.67zM14 5l2.74 3h-2a.79.79 0 0 1-.74-.85zm3.44 15H6.56a.53.53 0 0 1-.56-.5v-15a.53.53 0 0 1 .56-.5H12v3.15A2.79 2.79 0 0 0 14.71 10H18v9.5a.53.53 0 0 1-.56.5z"/></g></g></svg>',
            'alert-triangle-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="alert-triangle"><rect width="24" height="24" transform="rotate(90 12 12)" opacity="0"/><path d="M22.56 16.3L14.89 3.58a3.43 3.43 0 0 0-5.78 0L1.44 16.3a3 3 0 0 0-.05 3A3.37 3.37 0 0 0 4.33 21h15.34a3.37 3.37 0 0 0 2.94-1.66 3 3 0 0 0-.05-3.04zm-1.7 2.05a1.31 1.31 0 0 1-1.19.65H4.33a1.31 1.31 0 0 1-1.19-.65 1 1 0 0 1 0-1l7.68-12.73a1.48 1.48 0 0 1 2.36 0l7.67 12.72a1 1 0 0 1 .01 1.01z"/><circle cx="12" cy="16" r="1"/><path d="M12 8a1 1 0 0 0-1 1v4a1 1 0 0 0 2 0V9a1 1 0 0 0-1-1z"/></g></g></svg>',
            'question-mark-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="question-mark"><rect width="24" height="24" transform="rotate(180 12 12)" opacity="0"/><path d="M17 9A5 5 0 0 0 7 9a1 1 0 0 0 2 0 3 3 0 1 1 3 3 1 1 0 0 0-1 1v2a1 1 0 0 0 2 0v-1.1A5 5 0 0 0 17 9z"/><circle cx="12" cy="19" r="1"/></g></g></svg>',
            'email-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="email"><rect width="24" height="24" opacity="0"/><path d="M19 4H5a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h14a3 3 0 0 0 3-3V7a3 3 0 0 0-3-3zm-.67 2L12 10.75 5.67 6zM19 18H5a1 1 0 0 1-1-1V7.25l7.4 5.55a1 1 0 0 0 .6.2 1 1 0 0 0 .6-.2L20 7.25V17a1 1 0 0 1-1 1z"/></g></g></svg>',
            'flash-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="flash"><rect width="24" height="24" opacity="0"/><path d="M11.11 23a1 1 0 0 1-.34-.06 1 1 0 0 1-.65-1.05l.77-7.09H5a1 1 0 0 1-.83-1.56l7.89-11.8a1 1 0 0 1 1.17-.38 1 1 0 0 1 .65 1l-.77 7.14H19a1 1 0 0 1 .83 1.56l-7.89 11.8a1 1 0 0 1-.83.44zM6.87 12.8H12a1 1 0 0 1 .74.33 1 1 0 0 1 .25.78l-.45 4.15 4.59-6.86H12a1 1 0 0 1-1-1.11l.45-4.15z"/></g></g></svg>',
            'search-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="search"><rect width="24" height="24" opacity="0"/><path d="M20.71 19.29l-3.4-3.39A7.92 7.92 0 0 0 19 11a8 8 0 1 0-8 8 7.92 7.92 0 0 0 4.9-1.69l3.39 3.4a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42zM5 11a6 6 0 1 1 6 6 6 6 0 0 1-6-6z"/></g></g></svg>',
            'close-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="close"><rect width="24" height="24" transform="rotate(180 12 12)" opacity="0"/><path d="M13.41 12l4.3-4.29a1 1 0 1 0-1.42-1.42L12 10.59l-4.29-4.3a1 1 0 0 0-1.42 1.42l4.3 4.29-4.3 4.29a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0l4.29-4.3 4.29 4.3a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42z"/></g></g></svg>',
            'collapse-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="collapse"><rect width="24" height="24" transform="rotate(180 12 12)" opacity="0"/><path d="M19 9h-2.58l3.29-3.29a1 1 0 1 0-1.42-1.42L15 7.57V5a1 1 0 0 0-1-1 1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h5a1 1 0 0 0 0-2z"/><path d="M10 13H5a1 1 0 0 0 0 2h2.57l-3.28 3.29a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0L9 16.42V19a1 1 0 0 0 1 1 1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1z"/></g></g></svg>',
            'expand-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="expand"><rect width="24" height="24" transform="rotate(180 12 12)" opacity="0"/><path d="M20 5a1 1 0 0 0-1-1h-5a1 1 0 0 0 0 2h2.57l-3.28 3.29a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0L18 7.42V10a1 1 0 0 0 1 1 1 1 0 0 0 1-1z"/><path d="M10.71 13.29a1 1 0 0 0-1.42 0L6 16.57V14a1 1 0 0 0-1-1 1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h5a1 1 0 0 0 0-2H7.42l3.29-3.29a1 1 0 0 0 0-1.42z"/></g></g></svg>',
            'minus-outline': '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="100%" height="100%" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="minus"><rect width="24" height="24" transform="rotate(180 12 12)" opacity="0"/><path d="M19 13H5a1 1 0 0 1 0-2h14a1 1 0 0 1 0 2z"/></g></g></svg>',
            'minus-bold-outline': '<svg xmlns:xlink="http://www.w3.org/1999/xlink" fill="currentColor" viewBox="0 0 8 2" width="100%" height="100%"><defs><rect id="nb-mbo" y="3" width="8" height="2" rx="1"/></defs><use xlink:href="#nb-mbo" transform="translate(0 -3)" fill-rule="evenodd"/></svg>',
            'checkmark-bold-outline': '<svg xmlns:xlink="http://www.w3.org/1999/xlink" fill="currentColor" viewBox="0 0 8 7" width="100%" height="100%"><defs><path id="nb-cbo" d="M6.039 1.43a1.11 1.11 0 0 1 1.517-.228c.483.342.588.998.234 1.466L4.431 7.1a1 1 0 0 1-1.492.115L.317 4.677a1.023 1.023 0 0 1 .002-1.483 1.113 1.113 0 0 1 1.535.002l1.641 1.59L6.04 1.428z"/></defs><use xlink:href="#nb-cbo" transform="translate(0 -1)" fill-rule="evenodd"/></svg>',
            'arrow-back': '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g data-name="Layer 2"><g data-name="arrow-back"><rect width="24" height="24" transform="rotate(90 12 12)" opacity="0"/><path d="M19 11H7.14l3.63-4.36a1 1 0 1 0-1.54-1.28l-5 6a1.19 1.19 0 0 0-.09.15c0 .05 0 .08-.07.13A1 1 0 0 0 4 12a1 1 0 0 0 .07.36c0 .05 0 .08.07.13a1.19 1.19 0 0 0 .09.15l5 6A1 1 0 0 0 10 19a1 1 0 0 0 .64-.23 1 1 0 0 0 .13-1.41L7.14 13H19a1 1 0 0 0 0-2z"/></g></g></svg>',
        });
        // tslint:enable:max-line-length
    }
    NbIconModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                _angular_common.CommonModule,
            ],
            declarations: [
                NbIconComponent,
            ],
            exports: [
                NbIconComponent,
            ],
        }),
        tslib.__metadata("design:paramtypes", [NbIconLibraries])
    ], NbIconModule);
    return NbIconModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Component intended to be used within the `<nb-card>` component.
 * It adds styles for a preset header section.
 *
 * @styles
 *
 * card-header-text-color:
 * card-header-text-font-family:
 * card-header-text-font-size:
 * card-header-text-font-weight:
 * card-header-text-line-height:
 * card-header-basic-background-color:
 * card-header-basic-text-color:
 * card-header-primary-background-color:
 * card-header-primary-text-color:
 * card-header-info-background-color:
 * card-header-info-text-color:
 * card-header-success-background-color:
 * card-header-success-text-color:
 * card-header-warning-background-color:
 * card-header-warning-text-color:
 * card-header-danger-background-color:
 * card-header-danger-text-color:
 * card-header-control-background-color:
 * card-header-control-text-color:
 */
var NbCardHeaderComponent = /** @class */ (function () {
    function NbCardHeaderComponent() {
    }
    NbCardHeaderComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-card-header',
            template: "<ng-content></ng-content>"
        })
    ], NbCardHeaderComponent);
    return NbCardHeaderComponent;
}());
/**
 * Component intended to be used within  the `<nb-card>` component.
 * Adds styles for a preset body section.
 */
var NbCardBodyComponent = /** @class */ (function () {
    function NbCardBodyComponent() {
    }
    NbCardBodyComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-card-body',
            template: "<ng-content></ng-content>"
        })
    ], NbCardBodyComponent);
    return NbCardBodyComponent;
}());
/**
 * Component intended to be used within  the `<nb-card>` component.
 * Adds styles for a preset footer section.
 */
var NbCardFooterComponent = /** @class */ (function () {
    function NbCardFooterComponent() {
    }
    NbCardFooterComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-card-footer',
            template: "<ng-content></ng-content>"
        })
    ], NbCardFooterComponent);
    return NbCardFooterComponent;
}());
/**
 * Basic content container component.
 *
 * Basic card example:
 * @stacked-example(Showcase, card/card-showcase.component)
 *
 * Basic card configuration:
 *
 * ```html
 * <nb-card>
 *   <nb-card-body>
 *     Card
 *   </nb-card-body>
 * </nb-card>
 * ```
 *
 * ### Installation
 *
 * Import `NbCardModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbCardModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Card with header and footer:
 * @stacked-example(With Header & Footer, card/card-full.component)
 *
 * Most of the time main card content goes to `nb-card-body`,
 * so it is styled and aligned in accordance with the header and footer.
 * In case you need a higher level of control, you can pass contend directly to `nb-card`,
 * so `nb-card-body` styling will not be applied.
 *
 * Consider an example with `nb-list` component:
 * @stacked-example(Card with list, card/card-without-body.component)
 *
 * Colored cards could be simply configured by providing a `status` property:
 * @stacked-example(Colored Card, card/card-colors.component)
 *
 * It is also possible to assign an `accent` property for a slight card highlight
 * as well as combine it with `status`:
 * @stacked-example(Accent Card, card/card-accents.component)
 *
 * Cards of smaller sizes could be combined and put on the same row with a bigger card so they have the same heights.
 * @stacked-example(Card sizes combinations, card/card-sizes-combinations.component)
 *
 * @additional-example(Multiple Sizes, card/card-sizes.component)
 *
 * @styles
 *
 * card-background-color:
 * card-text-color:
 * card-text-font-family:
 * card-text-font-size:
 * card-text-font-weight:
 * card-text-line-height:
 * card-border-width:
 * card-border-style:
 * card-border-color:
 * card-border-radius:
 * card-padding:
 * card-shadow:
 * card-divider-color:
 * card-divider-style:
 * card-divider-width:
 * card-height-tiny:
 * card-height-small:
 * card-height-medium:
 * card-height-large:
 * card-height-giant:
 * card-margin-bottom:
 * card-scrollbar-color:
 * card-scrollbar-background-color:
 * card-scrollbar-width:
 */
var NbCardComponent = /** @class */ (function () {
    function NbCardComponent() {
        this._size = '';
        /**
         * Card status:
         * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`
         */
        this.status = '';
        /**
         * Card accent (color of the top border):
         * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`
         */
        this.accent = '';
    }
    Object.defineProperty(NbCardComponent.prototype, "size", {
        /**
         * Card size, available sizes:
         * tiny, small, medium, large, giant
         */
        get: function () {
            return this._size;
        },
        set: function (value) {
            this._size = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "tiny", {
        get: function () {
            return this.size === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "small", {
        get: function () {
            return this.size === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "medium", {
        get: function () {
            return this.size === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "large", {
        get: function () {
            return this.size === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "giant", {
        get: function () {
            return this.size === 'giant';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "primary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "info", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "success", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "warning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "danger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "basic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "control", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "hasAccent", {
        get: function () {
            return this.accent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "primaryAccent", {
        get: function () {
            return this.accent === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "infoAccent", {
        get: function () {
            return this.accent === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "successAccent", {
        get: function () {
            return this.accent === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "warningAccent", {
        get: function () {
            return this.accent === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "dangerAccent", {
        get: function () {
            return this.accent === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "basicAccent", {
        get: function () {
            return this.accent === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCardComponent.prototype, "controlAccent", {
        get: function () {
            return this.accent === 'control';
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbCardComponent.prototype, "size", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCardComponent.prototype, "status", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCardComponent.prototype, "accent", void 0);
    tslib.__decorate([
        i0.HostBinding('class.size-tiny'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "tiny", null);
    tslib.__decorate([
        i0.HostBinding('class.size-small'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "small", null);
    tslib.__decorate([
        i0.HostBinding('class.size-medium'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "medium", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "large", null);
    tslib.__decorate([
        i0.HostBinding('class.size-giant'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "giant", null);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "control", null);
    tslib.__decorate([
        i0.HostBinding('class.accent'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "hasAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-primary'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "primaryAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-info'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "infoAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-success'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "successAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-warning'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "warningAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-danger'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "dangerAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-basic'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "basicAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-control'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCardComponent.prototype, "controlAccent", null);
    NbCardComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-card',
            template: "\n    <ng-content select=\"nb-card-header\"></ng-content>\n    <ng-content select=\"nb-card-body\"></ng-content>\n    <ng-content></ng-content>\n    <ng-content select=\"nb-card-footer\"></ng-content>\n  ",
            styles: [":host{display:flex;flex-direction:column}\n"]
        })
    ], NbCardComponent);
    return NbCardComponent;
}());

/**
 *
 * Reveal card example:
 * @stacked-example(My example, reveal-card/reveal-card-showcase.component)
 *
 * As a content Reveal card accepts two instances of `nb-card` - for front and back sides.
 *
 * Basic reveal card configuration:
 *
 * ```html
 * <nb-reveal-card>
 *   <nb-card-front>
 *     <nb-card>
 *       <nb-card-body>
 *         Front
 *       </nb-card-body>
 *     </nb-card>
 *   </nb-card-front>
 *   <nb-card-back>
 *     <nb-card>
 *       <nb-card-body>
 *         Back
 *       </nb-card-body>
 *     </nb-card>
 *   </nb-card-back>
 * </nb-reveal-card>
 * ```
 *
 * ### Installation
 *
 * Import `NbCardModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbCardModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Reveal Card with header and footer:
 * @stacked-example(With Header & Footer, reveal-card/reveal-card-full.component)
 *
 * Colored reveal-cards could be simply configured by providing a `status` property:
 * @stacked-example(Colored Card, reveal-card/reveal-card-colors.component)
 *
 * It is also possible to assign an `accent` property for a slight card highlight
 * as well as combine it with `status`:
 * @stacked-example(Accent Card, reveal-card/reveal-card-accents.component)
 *
 * @additional-example(Multiple Sizes, reveal-card/reveal-card-sizes.component)
 */
var NbRevealCardComponent = /** @class */ (function () {
    function NbRevealCardComponent() {
        /**
         * Reveal state
         * @type boolean
         */
        this.revealed = false;
        /**
         * Show/hide toggle button to be able to control toggle from your code
         * @type {boolean}
         */
        this.showToggleButton = true;
    }
    NbRevealCardComponent.prototype.toggle = function () {
        this.revealed = !this.revealed;
    };
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.revealed'),
        tslib.__metadata("design:type", Boolean)
    ], NbRevealCardComponent.prototype, "revealed", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbRevealCardComponent.prototype, "showToggleButton", void 0);
    NbRevealCardComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-reveal-card',
            template: "\n    <ng-content select=\"nb-card-front\"></ng-content>\n    <div class=\"second-card-container\">\n      <ng-content select=\"nb-card-back\"></ng-content>\n    </div>\n    <a *ngIf=\"showToggleButton\" class=\"reveal-button\" (click)=\"toggle()\">\n      <nb-icon icon=\"chevron-down-outline\" pack=\"nebular-essentials\" aria-hidden=\"true\"></nb-icon>\n    </a>\n  ",
            styles: [":host{display:block;position:relative;overflow:hidden}:host .second-card-container{position:absolute;top:100%;right:0;left:0;overflow:hidden;transition:top 0s 0.5s}:host ::ng-deep nb-card-front nb-card,:host ::ng-deep nb-card-back nb-card{box-shadow:none;margin:0}:host ::ng-deep nb-card-front{display:block;height:100%}:host ::ng-deep nb-card-back{position:absolute;left:0;top:100%;width:100%;transition:top 0.5s}:host .reveal-button{cursor:pointer;position:absolute;right:0;bottom:0;transform:rotate(180deg);transition:transform 0.3s}:host(.revealed) .second-card-container{top:0;transition:none}:host(.revealed) .second-card-container ::ng-deep nb-card-back{top:0}:host(.revealed) .reveal-button{transform:none}\n"]
        })
    ], NbRevealCardComponent);
    return NbRevealCardComponent;
}());

/**
 *
 * Flip card example:
 * @stacked-example(Showcase, flip-card/flip-card-showcase.component)
 *
 * As a content Flip card accepts two instances of `nb-card` - for front and back sides.
 *
 * Basic flip card configuration:
 *
 * ```html
 * <nb-flip-card>
 *   <nb-card-front>
 *     <nb-card>
 *       <nb-card-body>
 *         Front
 *       </nb-card-body>
 *     </nb-card>
 *   </nb-card-front>
 *   <nb-card-back>
 *     <nb-card>
 *       <nb-card-body>
 *         Back
 *       </nb-card-body>
 *     </nb-card>
 *   </nb-card-back>
 * </nb-flip-card>
 * ```
 *
 * ### Installation
 *
 * Import `NbCardModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbCardModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Flip Card with header and footer:
 * @stacked-example(With Header & Footer, flip-card/flip-card-full.component.ts)
 *
 * Colored flip-cards could be simply configured by providing a `status` property:
 * @stacked-example(Colored Card, flip-card/flip-card-colors.component)
 *
 * It is also possible to assign an `accent` property for a slight card highlight
 * as well as combine it with `status`:
 * @stacked-example(Accent Card, flip-card/flip-card-accents.component)
 *
 * @additional-example(Multiple Sizes, flip-card/flip-card-sizes.component)
 *
 */
var NbFlipCardComponent = /** @class */ (function () {
    function NbFlipCardComponent() {
        /**
         * Flip state
         * @type boolean
         */
        this.flipped = false;
        /**
         * Show/hide toggle button to be able to control toggle from your code
         * @type {boolean}
         */
        this.showToggleButton = true;
    }
    NbFlipCardComponent.prototype.toggle = function () {
        this.flipped = !this.flipped;
    };
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.flipped'),
        tslib.__metadata("design:type", Boolean)
    ], NbFlipCardComponent.prototype, "flipped", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbFlipCardComponent.prototype, "showToggleButton", void 0);
    NbFlipCardComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-flip-card',
            template: "\n    <div class=\"flipcard-body\">\n      <div class=\"front-container\">\n        <ng-content select=\"nb-card-front\"></ng-content>\n        <a *ngIf=\"showToggleButton\" class=\"flip-button\" (click)=\"toggle()\">\n          <nb-icon icon=\"chevron-left-outline\" pack=\"nebular-essentials\" aria-hidden=\"true\"></nb-icon>\n        </a>\n      </div>\n      <div class=\"back-container\">\n        <ng-content select=\"nb-card-back\"></ng-content>\n        <a *ngIf=\"showToggleButton\" class=\"flip-button\" (click)=\"toggle()\">\n          <nb-icon icon=\"chevron-left-outline\" pack=\"nebular-essentials\" aria-hidden=\"true\"></nb-icon>\n        </a>\n      </div>\n    </div>\n  ",
            styles: [":host{display:block;perspective:1200px;position:relative}:host-context(.flipped) .flipcard-body{transform:rotateY(-180deg)}:host-context(.flipped) .flipcard-body .front-container{opacity:0;transition:opacity 0s 0.25s;backface-visibility:hidden;-webkit-backface-visibility:hidden}:host-context(.flipped) .flipcard-body .front-container .flip-button{opacity:0;z-index:-1}:host-context(.flipped) .flipcard-body .back-container{backface-visibility:visible;-webkit-backface-visibility:visible}.flipcard-body{display:flex;transition:transform 0.5s;transform-style:preserve-3d}.flipcard-body .front-container,.flipcard-body .back-container{flex:1}.flipcard-body .front-container .flip-button,.flipcard-body .back-container .flip-button{cursor:pointer;position:absolute;right:0;bottom:0;opacity:1;transition:opacity 0s 0.15s}.flipcard-body .front-container{backface-visibility:visible;-webkit-backface-visibility:visible;transition:opacity 0s 0.2s}.flipcard-body .back-container{backface-visibility:hidden;-webkit-backface-visibility:hidden;transform:rotateY(180deg)}\n"]
        })
    ], NbFlipCardComponent);
    return NbFlipCardComponent;
}());

/**
 * Component intended to be used within the `<nb-flip-card>` and `<nb-reveal-card>` components.
 *
 * Use it as a container for the front card.
 */
var NbCardFrontComponent = /** @class */ (function () {
    function NbCardFrontComponent() {
    }
    NbCardFrontComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-card-front',
            template: '<ng-content select="nb-card"></ng-content>'
        })
    ], NbCardFrontComponent);
    return NbCardFrontComponent;
}());
/**
 * Component intended to be used within the `<nb-flip-card>` and `<nb-reveal-card>` components.
 *
 * Use it as a container for the back card.
 */
var NbCardBackComponent = /** @class */ (function () {
    function NbCardBackComponent() {
    }
    NbCardBackComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-card-back',
            template: '<ng-content select="nb-card"></ng-content>'
        })
    ], NbCardBackComponent);
    return NbCardBackComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_CARD_COMPONENTS = [
    NbCardComponent,
    NbCardBodyComponent,
    NbCardFooterComponent,
    NbCardHeaderComponent,
    NbRevealCardComponent,
    NbFlipCardComponent,
    NbCardFrontComponent,
    NbCardBackComponent,
];
var NbCardModule = /** @class */ (function () {
    function NbCardModule() {
    }
    NbCardModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
                NbIconModule,
            ],
            declarations: tslib.__spreadArrays(NB_CARD_COMPONENTS),
            exports: tslib.__spreadArrays(NB_CARD_COMPONENTS),
        })
    ], NbCardModule);
    return NbCardModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */

(function (NbCalendarViewMode) {
    NbCalendarViewMode["YEAR"] = "year";
    NbCalendarViewMode["MONTH"] = "month";
    NbCalendarViewMode["DATE"] = "date";
})(exports.NbCalendarViewMode || (exports.NbCalendarViewMode = {}));

(function (NbCalendarSize) {
    NbCalendarSize["MEDIUM"] = "medium";
    NbCalendarSize["LARGE"] = "large";
})(exports.NbCalendarSize || (exports.NbCalendarSize = {}));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
function convertToBoolProperty(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === '');
    }
    return !!val;
}

function firstChildNotComment(node) {
    var children = Array
        .from(node.childNodes)
        .filter(function (child) { return child.nodeType !== Node.COMMENT_NODE; });
    return children[0];
}
function lastChildNotComment(node) {
    var children = Array
        .from(node.childNodes)
        .filter(function (child) { return child.nodeType !== Node.COMMENT_NODE; });
    return children[children.length - 1];
}
/*
 * @breaking-change Remove @6.0.0
 */
function emptyStatusWarning(source) {
    console.warn(source + ": Using empty string as a status is deprecated. Use `basic` instead.");
}

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Calendar component provides a capability to choose a date.
 *
 * ```html
 * <nb-calendar [(date)]="date"></nb-calendar>
 * <nb-calendar [date]="date" (dateChange)="handleDateChange($event)"></nb-calendar>
 * ```
 *
 * Basic usage example
 * @stacked-example(Showcase, calendar/calendar-showcase.component)
 *
 * ### Installation
 *
 * Import `NbCalendarModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbCalendarModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * If you want to select ranges you can use `NbCalendarRangeComponent`.
 *
 * ```html
 * <nb-calendar-range [(range)]="range"></nb-calendar-range>
 * <nb-calendar-range [range]="range" (rangeChange)="handleRangeChange($event)"></nb-calendar-range>
 * ```
 *
 * In order to use it, you have to import `NbCalendarRangeModule`.
 * @stacked-example(Range, calendar/calendar-range-showcase.component)
 *
 * The calendar component is supplied with a calendar navigation that contains navigate buttons.
 * If you do not want to use it you can hide calendar navigation using `showNavigation` property.
 * @stacked-example(Without navigation, calendar/calendar-without-navigation.component)
 *
 * As you can see in the basic usage example calendar contains previous and next month days
 * which can be disabled using `boundingMonth` property.
 * @stacked-example(Bounding months, calendar/calendar-bounding-month.component)
 *
 * You can define starting view of the calendar by setting `startView` property.
 * Available values: year, month and date.
 * @stacked-example(Start view, calendar/calendar-start-view.component)
 *
 * You can use a larger version of the calendar by defining size property.
 * Available values: medium(which is default) and large.
 * @stacked-example(Size, calendar/calendar-size.component)
 *
 * Calendar supports min and max dates which disables values out of min-max range.
 * @stacked-example(Borders, calendar/calendar-min-max.component)
 *
 * Also, you can define custom filter property that should be predicate which receives
 * date and returns false if this date has to be disabled. In this example, we provide the filter
 * which disables weekdays.
 * @stacked-example(Filter, calendar/calendar-filter.component)
 *
 * Week numbers column could be enabled via `showWeekNumber` binding:
 * @stacked-example(Week number, calendar/calendar-week-number.component)
 *
 * If you need create custom cells you can easily provide custom components for
 * calendar. For examples if you want to show any average price under each date you can
 * just provide custom `dayCellComponent`. Custom cells for month and year can be provided
 * the same way, check API reference.
 * @stacked-example(Custom day cell, calendar/calendar-custom-day-cell-showcase.component)
 *
 * @styles
 *
 * calendar-width:
 * calendar-background-color:
 * calendar-border-color:
 * calendar-border-style:
 * calendar-border-width:
 * calendar-border-radius:
 * calendar-text-color:
 * calendar-text-font-family:
 * calendar-text-font-size:
 * calendar-text-font-weight:
 * calendar-text-line-height:
 * calendar-picker-padding-top:
 * calendar-picker-padding-bottom:
 * calendar-picker-padding-start:
 * calendar-picker-padding-end:
 * calendar-navigation-text-color:
 * calendar-navigation-text-font-family:
 * calendar-navigation-title-text-font-size:
 * calendar-navigation-title-text-font-weight:
 * calendar-navigation-title-text-line-height:
 * calendar-navigation-padding:
 * calendar-cell-inactive-text-color:
 * calendar-cell-disabled-text-color:
 * calendar-cell-hover-background-color:
 * calendar-cell-hover-border-color:
 * calendar-cell-hover-text-color:
 * calendar-cell-hover-text-font-size:
 * calendar-cell-hover-text-font-weight:
 * calendar-cell-hover-text-line-height:
 * calendar-cell-active-background-color:
 * calendar-cell-active-border-color:
 * calendar-cell-active-text-color:
 * calendar-cell-active-text-font-size:
 * calendar-cell-active-text-font-weight:
 * calendar-cell-active-text-line-height:
 * calendar-cell-today-background-color:
 * calendar-cell-today-border-color:
 * calendar-cell-today-text-color:
 * calendar-cell-today-text-font-size:
 * calendar-cell-today-text-font-weight:
 * calendar-cell-today-text-line-height:
 * calendar-cell-today-hover-background-color:
 * calendar-cell-today-hover-border-color:
 * calendar-cell-today-active-background-color:
 * calendar-cell-today-active-border-color:
 * calendar-cell-today-disabled-border-color:
 * calendar-cell-today-selected-background-color:
 * calendar-cell-today-selected-border-color:
 * calendar-cell-today-selected-text-color:
 * calendar-cell-today-selected-hover-background-color:
 * calendar-cell-today-selected-hover-border-color:
 * calendar-cell-today-selected-active-background-color:
 * calendar-cell-today-selected-active-border-color:
 * calendar-cell-today-in-range-background-color:
 * calendar-cell-today-in-range-border-color:
 * calendar-cell-today-in-range-text-color:
 * calendar-cell-today-in-range-hover-background-color:
 * calendar-cell-today-in-range-hover-border-color:
 * calendar-cell-today-in-range-active-background-color:
 * calendar-cell-today-in-range-active-border-color:
 * calendar-cell-selected-background-color:
 * calendar-cell-selected-border-color:
 * calendar-cell-selected-text-color:
 * calendar-cell-selected-text-font-size:
 * calendar-cell-selected-text-font-weight:
 * calendar-cell-selected-text-line-height:
 * calendar-cell-selected-hover-background-color:
 * calendar-cell-selected-hover-border-color:
 * calendar-cell-selected-active-background-color:
 * calendar-cell-selected-active-border-color:
 * calendar-day-cell-width:
 * calendar-day-cell-height:
 * calendar-month-cell-width:
 * calendar-month-cell-height:
 * calendar-year-cell-width:
 * calendar-year-cell-height:
 * calendar-weekday-background:
 * calendar-weekday-divider-color:
 * calendar-weekday-divider-width:
 * calendar-weekday-text-color:
 * calendar-weekday-text-font-size:
 * calendar-weekday-text-font-weight:
 * calendar-weekday-text-line-height:
 * calendar-weekday-holiday-text-color:
 * calendar-weekday-height:
 * calendar-weekday-width:
 * calendar-weeknumber-background:
 * calendar-weeknumber-divider-color:
 * calendar-weeknumber-divider-width:
 * calendar-weeknumber-text-color:
 * calendar-weeknumber-text-font-size:
 * calendar-weeknumber-text-font-weight:
 * calendar-weeknumber-text-line-height:
 * calendar-weeknumber-height:
 * calendar-weeknumber-width:
 * calendar-large-width:
 * calendar-day-cell-large-width:
 * calendar-day-cell-large-height:
 * calendar-weekday-large-height:
 * calendar-weekday-large-width:
 * calendar-weeknumber-large-height:
 * calendar-weeknumber-large-width:
 * calendar-month-cell-large-width:
 * calendar-month-cell-large-height:
 * calendar-year-cell-large-width:
 * calendar-year-cell-large-height:
 * */
var NbCalendarComponent = /** @class */ (function () {
    function NbCalendarComponent() {
        /**
         * Defines if we should render previous and next months
         * in the current month view.
         * */
        this.boundingMonth = true;
        /**
         * Defines starting view for calendar.
         * */
        this.startView = exports.NbCalendarViewMode.DATE;
        /**
         * Size of the calendar and entire components.
         * Can be 'medium' which is default or 'large'.
         * */
        this.size = exports.NbCalendarSize.MEDIUM;
        /**
         * Determines should we show calendars navigation or not.
         * */
        this.showNavigation = true;
        this._showWeekNumber = false;
        /**
         * Sets symbol used as a header for week numbers column
         * */
        this.weekNumberSymbol = '#';
        /**
         * Emits date when selected.
         * */
        this.dateChange = new i0.EventEmitter();
    }
    Object.defineProperty(NbCalendarComponent.prototype, "showWeekNumber", {
        /**
         * Determines should we show week numbers column.
         * False by default.
         * */
        get: function () {
            return this._showWeekNumber;
        },
        set: function (value) {
            this._showWeekNumber = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbCalendarComponent.prototype, "boundingMonth", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarComponent.prototype, "startView", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Function)
    ], NbCalendarComponent.prototype, "filter", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.Type)
    ], NbCalendarComponent.prototype, "dayCellComponent", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.Type)
    ], NbCalendarComponent.prototype, "monthCellComponent", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.Type)
    ], NbCalendarComponent.prototype, "yearCellComponent", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarComponent.prototype, "visibleDate", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbCalendarComponent.prototype, "showNavigation", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbCalendarComponent.prototype, "showWeekNumber", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarComponent.prototype, "weekNumberSymbol", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbCalendarComponent.prototype, "dateChange", void 0);
    NbCalendarComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar',
            template: "\n    <nb-base-calendar\n      [boundingMonth]=\"boundingMonth\"\n      [startView]=\"startView\"\n      [date]=\"date\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [filter]=\"filter\"\n      [dayCellComponent]=\"dayCellComponent\"\n      [monthCellComponent]=\"monthCellComponent\"\n      [yearCellComponent]=\"yearCellComponent\"\n      [size]=\"size\"\n      [visibleDate]=\"visibleDate\"\n      [showNavigation]=\"showNavigation\"\n      [showWeekNumber]=\"showWeekNumber\"\n      [weekNumberSymbol]=\"weekNumberSymbol\"\n      (dateChange)=\"dateChange.emit($event)\"\n    ></nb-base-calendar>\n  "
        })
    ], NbCalendarComponent);
    return NbCalendarComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Basic button component.
 *
 * Default button size is `medium` and status color is `basic`:
 * @stacked-example(Button Showcase, button/button-showcase.component)
 *
 * ```html
 * <button nbButton></button>
 * ```
 * ### Installation
 *
 * Import `NbButtonModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbButtonModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Buttons are available in multiple colors using `status` property:
 * @stacked-example(Button Colors, button/button-colors.component.html)
 *
 * There are three button sizes:
 *
 * @stacked-example(Button Sizes, button/button-sizes.component.html)
 *
 * And two additional style types - `outline`:
 *
 * @stacked-example(Outline Buttons, button/button-outline.component.html)
 *
 * and `hero`:
 *
 * @stacked-example(Button Hero, button/button-hero.component.html)
 *
 * Buttons available in different shapes, which could be combined with the other properties:
 * @stacked-example(Button Shapes, button/button-shapes.component)
 *
 * `nbButton` could be applied to the following selectors - `button`, `input[type="button"]`, `input[type="submit"]`
 * and `a`:
 * @stacked-example(Button Elements, button/button-types.component.html)
 *
 * Button can be made `fullWidth`:
 * @stacked-example(Full Width Button, button/button-full-width.component.html)
 *
 * Icon can be placed inside of a button as a child element:
 * @stacked-example(Icon Button, button/button-icon.component.html)
 *
 * @additional-example(Interactive example, button/button-interactive.component)
 *
 * @styles
 *
 * button-cursor:
 * button-outline-width:
 * button-outline-color:
 * button-text-font-family:
 * button-text-font-weight:
 * button-disabled-cursor:
 * button-tiny-text-font-size:
 * button-tiny-text-line-height:
 * button-tiny-icon-size:
 * button-tiny-icon-vertical-margin:
 * button-tiny-icon-offset:
 * button-small-text-font-size:
 * button-small-text-line-height:
 * button-small-icon-size:
 * button-small-icon-vertical-margin:
 * button-small-icon-offset:
 * button-medium-text-font-size:
 * button-medium-text-line-height:
 * button-medium-icon-size:
 * button-medium-icon-vertical-margin:
 * button-medium-icon-offset:
 * button-large-text-font-size:
 * button-large-text-line-height:
 * button-large-icon-size:
 * button-large-icon-vertical-margin:
 * button-large-icon-offset:
 * button-giant-text-font-size:
 * button-giant-text-line-height:
 * button-giant-icon-size:
 * button-giant-icon-vertical-margin:
 * button-giant-icon-offset:
 * button-rectangle-border-radius:
 * button-semi-round-border-radius:
 * button-round-border-radius:
 * button-filled-border-style:
 * button-filled-border-width:
 * button-filled-text-transform:
 * button-filled-tiny-padding:
 * button-filled-small-padding:
 * button-filled-medium-padding:
 * button-filled-large-padding:
 * button-filled-giant-padding:
 * button-filled-basic-background-color:
 * button-filled-basic-border-color:
 * button-filled-basic-text-color:
 * button-filled-basic-focus-background-color:
 * button-filled-basic-focus-border-color:
 * button-filled-basic-hover-background-color:
 * button-filled-basic-hover-border-color:
 * button-filled-basic-active-background-color:
 * button-filled-basic-active-border-color:
 * button-filled-basic-disabled-background-color:
 * button-filled-basic-disabled-border-color:
 * button-filled-basic-disabled-text-color:
 * button-filled-primary-background-color:
 * button-filled-primary-border-color:
 * button-filled-primary-text-color:
 * button-filled-primary-focus-background-color:
 * button-filled-primary-focus-border-color:
 * button-filled-primary-hover-background-color:
 * button-filled-primary-hover-border-color:
 * button-filled-primary-active-background-color:
 * button-filled-primary-active-border-color:
 * button-filled-primary-disabled-background-color:
 * button-filled-primary-disabled-border-color:
 * button-filled-primary-disabled-text-color:
 * button-filled-success-background-color:
 * button-filled-success-border-color:
 * button-filled-success-text-color:
 * button-filled-success-focus-background-color:
 * button-filled-success-focus-border-color:
 * button-filled-success-hover-background-color:
 * button-filled-success-hover-border-color:
 * button-filled-success-active-background-color:
 * button-filled-success-active-border-color:
 * button-filled-success-disabled-background-color:
 * button-filled-success-disabled-border-color:
 * button-filled-success-disabled-text-color:
 * button-filled-info-background-color:
 * button-filled-info-border-color:
 * button-filled-info-text-color:
 * button-filled-info-focus-background-color:
 * button-filled-info-focus-border-color:
 * button-filled-info-hover-background-color:
 * button-filled-info-hover-border-color:
 * button-filled-info-active-background-color:
 * button-filled-info-active-border-color:
 * button-filled-info-disabled-background-color:
 * button-filled-info-disabled-border-color:
 * button-filled-info-disabled-text-color:
 * button-filled-warning-background-color:
 * button-filled-warning-border-color:
 * button-filled-warning-text-color:
 * button-filled-warning-focus-background-color:
 * button-filled-warning-focus-border-color:
 * button-filled-warning-hover-background-color:
 * button-filled-warning-hover-border-color:
 * button-filled-warning-active-background-color:
 * button-filled-warning-active-border-color:
 * button-filled-warning-disabled-background-color:
 * button-filled-warning-disabled-border-color:
 * button-filled-warning-disabled-text-color:
 * button-filled-danger-background-color:
 * button-filled-danger-border-color:
 * button-filled-danger-text-color:
 * button-filled-danger-focus-background-color:
 * button-filled-danger-focus-border-color:
 * button-filled-danger-hover-background-color:
 * button-filled-danger-hover-border-color:
 * button-filled-danger-active-background-color:
 * button-filled-danger-active-border-color:
 * button-filled-danger-disabled-background-color:
 * button-filled-danger-disabled-border-color:
 * button-filled-danger-disabled-text-color:
 * button-filled-control-background-color:
 * button-filled-control-border-color:
 * button-filled-control-text-color:
 * button-filled-control-focus-background-color:
 * button-filled-control-focus-border-color:
 * button-filled-control-hover-background-color:
 * button-filled-control-hover-border-color:
 * button-filled-control-active-background-color:
 * button-filled-control-active-border-color:
 * button-filled-control-disabled-background-color:
 * button-filled-control-disabled-border-color:
 * button-filled-control-disabled-text-color:
 * button-outline-border-style:
 * button-outline-border-width:
 * button-outline-text-transform:
 * button-outline-focus-inset-shadow-length:
 * button-outline-tiny-padding:
 * button-outline-small-padding:
 * button-outline-medium-padding:
 * button-outline-large-padding:
 * button-outline-giant-padding:
 * button-outline-basic-background-color:
 * button-outline-basic-border-color:
 * button-outline-basic-text-color:
 * button-outline-basic-focus-background-color:
 * button-outline-basic-focus-border-color:
 * button-outline-basic-focus-text-color:
 * button-outline-basic-hover-background-color:
 * button-outline-basic-hover-border-color:
 * button-outline-basic-hover-text-color:
 * button-outline-basic-active-background-color:
 * button-outline-basic-active-border-color:
 * button-outline-basic-active-text-color:
 * button-outline-basic-disabled-background-color:
 * button-outline-basic-disabled-border-color:
 * button-outline-basic-disabled-text-color:
 * button-outline-primary-background-color:
 * button-outline-primary-border-color:
 * button-outline-primary-text-color:
 * button-outline-primary-focus-background-color:
 * button-outline-primary-focus-border-color:
 * button-outline-primary-focus-text-color:
 * button-outline-primary-hover-background-color:
 * button-outline-primary-hover-border-color:
 * button-outline-primary-hover-text-color:
 * button-outline-primary-active-background-color:
 * button-outline-primary-active-border-color:
 * button-outline-primary-active-text-color:
 * button-outline-primary-disabled-background-color:
 * button-outline-primary-disabled-border-color:
 * button-outline-primary-disabled-text-color:
 * button-outline-success-background-color:
 * button-outline-success-border-color:
 * button-outline-success-text-color:
 * button-outline-success-focus-background-color:
 * button-outline-success-focus-border-color:
 * button-outline-success-focus-text-color:
 * button-outline-success-hover-background-color:
 * button-outline-success-hover-border-color:
 * button-outline-success-hover-text-color:
 * button-outline-success-active-background-color:
 * button-outline-success-active-border-color:
 * button-outline-success-active-text-color:
 * button-outline-success-disabled-background-color:
 * button-outline-success-disabled-border-color:
 * button-outline-success-disabled-text-color:
 * button-outline-info-background-color:
 * button-outline-info-border-color:
 * button-outline-info-text-color:
 * button-outline-info-focus-background-color:
 * button-outline-info-focus-border-color:
 * button-outline-info-focus-text-color:
 * button-outline-info-hover-background-color:
 * button-outline-info-hover-border-color:
 * button-outline-info-hover-text-color:
 * button-outline-info-active-background-color:
 * button-outline-info-active-border-color:
 * button-outline-info-active-text-color:
 * button-outline-info-disabled-background-color:
 * button-outline-info-disabled-border-color:
 * button-outline-info-disabled-text-color:
 * button-outline-warning-background-color:
 * button-outline-warning-border-color:
 * button-outline-warning-text-color:
 * button-outline-warning-focus-background-color:
 * button-outline-warning-focus-border-color:
 * button-outline-warning-focus-text-color:
 * button-outline-warning-hover-background-color:
 * button-outline-warning-hover-border-color:
 * button-outline-warning-hover-text-color:
 * button-outline-warning-active-background-color:
 * button-outline-warning-active-border-color:
 * button-outline-warning-active-text-color:
 * button-outline-warning-disabled-background-color:
 * button-outline-warning-disabled-border-color:
 * button-outline-warning-disabled-text-color:
 * button-outline-danger-background-color:
 * button-outline-danger-border-color:
 * button-outline-danger-text-color:
 * button-outline-danger-focus-background-color:
 * button-outline-danger-focus-border-color:
 * button-outline-danger-focus-text-color:
 * button-outline-danger-hover-background-color:
 * button-outline-danger-hover-border-color:
 * button-outline-danger-hover-text-color:
 * button-outline-danger-active-background-color:
 * button-outline-danger-active-border-color:
 * button-outline-danger-active-text-color:
 * button-outline-danger-disabled-background-color:
 * button-outline-danger-disabled-border-color:
 * button-outline-danger-disabled-text-color:
 * button-outline-control-background-color:
 * button-outline-control-border-color:
 * button-outline-control-text-color:
 * button-outline-control-focus-background-color:
 * button-outline-control-focus-border-color:
 * button-outline-control-focus-text-color:
 * button-outline-control-hover-background-color:
 * button-outline-control-hover-border-color:
 * button-outline-control-hover-text-color:
 * button-outline-control-active-background-color:
 * button-outline-control-active-border-color:
 * button-outline-control-active-text-color:
 * button-outline-control-disabled-background-color:
 * button-outline-control-disabled-border-color:
 * button-outline-control-disabled-text-color:
 * button-ghost-background-color:
 * button-ghost-border-color:
 * button-ghost-border-style:
 * button-ghost-border-width:
 * button-ghost-text-transform:
 * button-ghost-focus-inset-shadow-length:
 * button-ghost-tiny-padding:
 * button-ghost-small-padding:
 * button-ghost-medium-padding:
 * button-ghost-large-padding:
 * button-ghost-giant-padding:
 * button-ghost-basic-text-color:
 * button-ghost-basic-focus-background-color:
 * button-ghost-basic-focus-border-color:
 * button-ghost-basic-focus-text-color:
 * button-ghost-basic-hover-background-color:
 * button-ghost-basic-hover-border-color:
 * button-ghost-basic-hover-text-color:
 * button-ghost-basic-active-background-color:
 * button-ghost-basic-active-border-color:
 * button-ghost-basic-active-text-color:
 * button-ghost-basic-disabled-background-color:
 * button-ghost-basic-disabled-border-color:
 * button-ghost-basic-disabled-text-color:
 * button-ghost-primary-text-color:
 * button-ghost-primary-focus-background-color:
 * button-ghost-primary-focus-border-color:
 * button-ghost-primary-focus-text-color:
 * button-ghost-primary-hover-background-color:
 * button-ghost-primary-hover-border-color:
 * button-ghost-primary-hover-text-color:
 * button-ghost-primary-active-background-color:
 * button-ghost-primary-active-border-color:
 * button-ghost-primary-active-text-color:
 * button-ghost-primary-disabled-background-color:
 * button-ghost-primary-disabled-border-color:
 * button-ghost-primary-disabled-text-color:
 * button-ghost-success-text-color:
 * button-ghost-success-focus-background-color:
 * button-ghost-success-focus-border-color:
 * button-ghost-success-focus-text-color:
 * button-ghost-success-hover-background-color:
 * button-ghost-success-hover-border-color:
 * button-ghost-success-hover-text-color:
 * button-ghost-success-active-background-color:
 * button-ghost-success-active-border-color:
 * button-ghost-success-active-text-color:
 * button-ghost-success-disabled-background-color:
 * button-ghost-success-disabled-border-color:
 * button-ghost-success-disabled-text-color:
 * button-ghost-info-text-color:
 * button-ghost-info-focus-background-color:
 * button-ghost-info-focus-border-color:
 * button-ghost-info-focus-text-color:
 * button-ghost-info-hover-background-color:
 * button-ghost-info-hover-border-color:
 * button-ghost-info-hover-text-color:
 * button-ghost-info-active-background-color:
 * button-ghost-info-active-border-color:
 * button-ghost-info-active-text-color:
 * button-ghost-info-disabled-background-color:
 * button-ghost-info-disabled-border-color:
 * button-ghost-info-disabled-text-color:
 * button-ghost-warning-text-color:
 * button-ghost-warning-focus-background-color:
 * button-ghost-warning-focus-border-color:
 * button-ghost-warning-focus-text-color:
 * button-ghost-warning-hover-background-color:
 * button-ghost-warning-hover-border-color:
 * button-ghost-warning-hover-text-color:
 * button-ghost-warning-active-background-color:
 * button-ghost-warning-active-border-color:
 * button-ghost-warning-active-text-color:
 * button-ghost-warning-disabled-background-color:
 * button-ghost-warning-disabled-border-color:
 * button-ghost-warning-disabled-text-color:
 * button-ghost-danger-text-color:
 * button-ghost-danger-focus-background-color:
 * button-ghost-danger-focus-border-color:
 * button-ghost-danger-focus-text-color:
 * button-ghost-danger-hover-background-color:
 * button-ghost-danger-hover-border-color:
 * button-ghost-danger-hover-text-color:
 * button-ghost-danger-active-background-color:
 * button-ghost-danger-active-border-color:
 * button-ghost-danger-active-text-color:
 * button-ghost-danger-disabled-background-color:
 * button-ghost-danger-disabled-border-color:
 * button-ghost-danger-disabled-text-color:
 * button-ghost-control-text-color:
 * button-ghost-control-focus-background-color:
 * button-ghost-control-focus-border-color:
 * button-ghost-control-focus-text-color:
 * button-ghost-control-hover-background-color:
 * button-ghost-control-hover-border-color:
 * button-ghost-control-hover-text-color:
 * button-ghost-control-active-background-color:
 * button-ghost-control-active-border-color:
 * button-ghost-control-active-text-color:
 * button-ghost-control-disabled-background-color:
 * button-ghost-control-disabled-border-color:
 * button-ghost-control-disabled-text-color:
 * button-hero-border-color:
 * button-hero-border-style:
 * button-hero-border-width:
 * button-hero-text-transform:
 * button-hero-tiny-padding:
 * button-hero-small-padding:
 * button-hero-medium-padding:
 * button-hero-large-padding:
 * button-hero-giant-padding:
 * button-hero-shadow:
 * button-hero-text-shadow:
 * button-hero-bevel-size:
 * button-hero-glow-size:
 * button-hero-outline-color:
 * button-hero-outline-width:
 * button-hero-basic-text-color:
 * button-hero-basic-bevel-color:
 * button-hero-basic-glow-color:
 * button-hero-basic-left-background-color:
 * button-hero-basic-right-background-color:
 * button-hero-basic-focus-left-background-color:
 * button-hero-basic-focus-right-background-color:
 * button-hero-basic-hover-left-background-color:
 * button-hero-basic-hover-right-background-color:
 * button-hero-basic-active-left-background-color:
 * button-hero-basic-active-right-background-color:
 * button-hero-basic-disabled-background-color:
 * button-hero-basic-disabled-text-color:
 * button-hero-primary-text-color:
 * button-hero-primary-bevel-color:
 * button-hero-primary-glow-color:
 * button-hero-primary-left-background-color:
 * button-hero-primary-right-background-color:
 * button-hero-primary-focus-left-background-color:
 * button-hero-primary-focus-right-background-color:
 * button-hero-primary-hover-left-background-color:
 * button-hero-primary-hover-right-background-color:
 * button-hero-primary-active-left-background-color:
 * button-hero-primary-active-right-background-color:
 * button-hero-primary-disabled-background-color:
 * button-hero-primary-disabled-text-color:
 * button-hero-success-text-color:
 * button-hero-success-bevel-color:
 * button-hero-success-glow-color:
 * button-hero-success-left-background-color:
 * button-hero-success-right-background-color:
 * button-hero-success-focus-left-background-color:
 * button-hero-success-focus-right-background-color:
 * button-hero-success-hover-left-background-color:
 * button-hero-success-hover-right-background-color:
 * button-hero-success-active-left-background-color:
 * button-hero-success-active-right-background-color:
 * button-hero-success-disabled-background-color:
 * button-hero-success-disabled-text-color:
 * button-hero-info-text-color:
 * button-hero-info-bevel-color:
 * button-hero-info-glow-color:
 * button-hero-info-left-background-color:
 * button-hero-info-right-background-color:
 * button-hero-info-focus-left-background-color:
 * button-hero-info-focus-right-background-color:
 * button-hero-info-hover-left-background-color:
 * button-hero-info-hover-right-background-color:
 * button-hero-info-active-left-background-color:
 * button-hero-info-active-right-background-color:
 * button-hero-info-disabled-background-color:
 * button-hero-info-disabled-text-color:
 * button-hero-warning-text-color:
 * button-hero-warning-bevel-color:
 * button-hero-warning-glow-color:
 * button-hero-warning-left-background-color:
 * button-hero-warning-right-background-color:
 * button-hero-warning-focus-left-background-color:
 * button-hero-warning-focus-right-background-color:
 * button-hero-warning-hover-left-background-color:
 * button-hero-warning-hover-right-background-color:
 * button-hero-warning-active-left-background-color:
 * button-hero-warning-active-right-background-color:
 * button-hero-warning-disabled-background-color:
 * button-hero-warning-disabled-text-color:
 * button-hero-danger-text-color:
 * button-hero-danger-bevel-color:
 * button-hero-danger-glow-color:
 * button-hero-danger-left-background-color:
 * button-hero-danger-right-background-color:
 * button-hero-danger-focus-left-background-color:
 * button-hero-danger-focus-right-background-color:
 * button-hero-danger-hover-left-background-color:
 * button-hero-danger-hover-right-background-color:
 * button-hero-danger-active-left-background-color:
 * button-hero-danger-active-right-background-color:
 * button-hero-danger-disabled-background-color:
 * button-hero-danger-disabled-text-color:
 * button-hero-control-text-color:
 * button-hero-control-bevel-color:
 * button-hero-control-glow-color:
 * button-hero-control-left-background-color:
 * button-hero-control-right-background-color:
 * button-hero-control-focus-left-background-color:
 * button-hero-control-focus-right-background-color:
 * button-hero-control-hover-left-background-color:
 * button-hero-control-hover-right-background-color:
 * button-hero-control-active-left-background-color:
 * button-hero-control-active-right-background-color:
 * button-hero-control-disabled-background-color:
 * button-hero-control-disabled-text-color:
 */
var NbButtonComponent = /** @class */ (function () {
    function NbButtonComponent(renderer, hostElement, cd, zone) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.cd = cd;
        this.zone = zone;
        /**
         * Button size, available sizes:
         * `tiny`, `small`, `medium`, `large`, `giant`
         */
        this.size = 'medium';
        /**
         * Button status (adds specific styles):
         * `primary`, `info`, `success`, `warning`, `danger`
         */
        this.status = 'basic';
        /**
         * Button shapes: `rectangle`, `round`, `semi-round`
         */
        this.shape = 'rectangle';
        /**
         * Button appearance: `filled`, `outline`, `ghost`, `hero`
         */
        this.appearance = 'filled';
        this._fullWidth = false;
        this._disabled = false;
    }
    Object.defineProperty(NbButtonComponent.prototype, "filled", {
        /**
         * Sets `filled` appearance
         */
        get: function () {
            return this.appearance === 'filled';
        },
        set: function (value) {
            if (convertToBoolProperty(value)) {
                this.appearance = 'filled';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "outline", {
        /**
         * Sets `outline` appearance
         */
        get: function () {
            return this.appearance === 'outline';
        },
        set: function (value) {
            if (convertToBoolProperty(value)) {
                this.appearance = 'outline';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "ghost", {
        /**
         * Sets `ghost` appearance
         */
        get: function () {
            return this.appearance === 'ghost';
        },
        set: function (value) {
            if (convertToBoolProperty(value)) {
                this.appearance = 'ghost';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "hero", {
        /**
         * Sets `hero` appearance
         */
        get: function () {
            return this.appearance === 'hero';
        },
        set: function (value) {
            if (convertToBoolProperty(value)) {
                this.appearance = 'hero';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "fullWidth", {
        /**
         * If set element will fill its container
         */
        get: function () {
            return this._fullWidth;
        },
        set: function (value) {
            this._fullWidth = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "disabled", {
        /**
         * Disables the button
         */
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            this._disabled = convertToBoolProperty(value);
            this.renderer.setProperty(this.hostElement.nativeElement, 'disabled', this.disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "tabbable", {
        // issue #794
        get: function () {
            return this.disabled ? '-1' : '0';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "tiny", {
        get: function () {
            return this.size === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "small", {
        get: function () {
            return this.size === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "medium", {
        get: function () {
            return this.size === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "large", {
        get: function () {
            return this.size === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "giant", {
        get: function () {
            return this.size === 'giant';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "primary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "info", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "success", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "warning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "danger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "basic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "control", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "rectangle", {
        get: function () {
            return this.shape === 'rectangle';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "round", {
        get: function () {
            return this.shape === 'round';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "semiRound", {
        get: function () {
            return this.shape === 'semi-round';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "iconLeft", {
        get: function () {
            var el = this.hostElement.nativeElement;
            var icon = this.iconElement;
            return !!(icon && firstChildNotComment(el) === icon);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbButtonComponent.prototype, "iconRight", {
        get: function () {
            var el = this.hostElement.nativeElement;
            var icon = this.iconElement;
            return !!(icon && lastChildNotComment(el) === icon);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * Keep this handler to partially support anchor disabling.
     * Unlike button, anchor doesn't have 'disabled' DOM property,
     * so handler will be called anyway. We preventing navigation and bubbling.
     * Disabling is partial due to click handlers precedence. Consider example:
     * <a nbButton [disabled]="true" (click)="clickHandler()">...</a>
     * 'clickHandler' will be called before our host listener below. We can't prevent
     * such handlers call.
     */
    NbButtonComponent.prototype.onClick = function (event) {
        if (this.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }
    };
    NbButtonComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // TODO: #2254
        this.zone.runOutsideAngular(function () { return setTimeout(function () {
            _this.renderer.addClass(_this.hostElement.nativeElement, 'nb-transition');
        }); });
    };
    Object.defineProperty(NbButtonComponent.prototype, "iconElement", {
        get: function () {
            var el = this.hostElement.nativeElement;
            return el.querySelector('nb-icon');
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbButtonComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbButtonComponent.prototype, "status", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbButtonComponent.prototype, "shape", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbButtonComponent.prototype, "appearance", void 0);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.appearance-filled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbButtonComponent.prototype, "filled", null);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.appearance-outline'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbButtonComponent.prototype, "outline", null);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.appearance-ghost'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbButtonComponent.prototype, "ghost", null);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.appearance-hero'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbButtonComponent.prototype, "hero", null);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.full-width'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbButtonComponent.prototype, "fullWidth", null);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('attr.aria-disabled'),
        i0.HostBinding('class.btn-disabled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbButtonComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.HostBinding('attr.tabindex'),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "tabbable", null);
    tslib.__decorate([
        i0.HostBinding('class.size-tiny'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "tiny", null);
    tslib.__decorate([
        i0.HostBinding('class.size-small'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "small", null);
    tslib.__decorate([
        i0.HostBinding('class.size-medium'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "medium", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "large", null);
    tslib.__decorate([
        i0.HostBinding('class.size-giant'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "giant", null);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "control", null);
    tslib.__decorate([
        i0.HostBinding('class.shape-rectangle'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "rectangle", null);
    tslib.__decorate([
        i0.HostBinding('class.shape-round'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "round", null);
    tslib.__decorate([
        i0.HostBinding('class.shape-semi-round'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "semiRound", null);
    tslib.__decorate([
        i0.HostBinding('class.icon-start'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "iconLeft", null);
    tslib.__decorate([
        i0.HostBinding('class.icon-end'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbButtonComponent.prototype, "iconRight", null);
    tslib.__decorate([
        i0.HostListener('click', ['$event']),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], NbButtonComponent.prototype, "onClick", null);
    NbButtonComponent = tslib.__decorate([
        i0.Component({
            selector: 'button[nbButton],a[nbButton],input[type="button"][nbButton],input[type="submit"][nbButton]',
            template: "\n    <ng-content></ng-content>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: [":host{appearance:none;text-align:center;display:inline-flex;align-items:center;justify-content:center;white-space:nowrap;vertical-align:middle;user-select:none}:host:hover,:host:focus{text-decoration:none}:host.full-width{width:100%}:host ::ng-deep nb-icon{vertical-align:top}:host(.nb-transition){transition-duration:0.15s;transition-property:background-color,border-color,box-shadow,color;transition-timing-function:ease-in}\n"]
        }),
        tslib.__metadata("design:paramtypes", [i0.Renderer2,
            i0.ElementRef,
            i0.ChangeDetectorRef,
            i0.NgZone])
    ], NbButtonComponent);
    return NbButtonComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_BUTTON_COMPONENTS = [
    NbButtonComponent,
];
var NbButtonModule = /** @class */ (function () {
    function NbButtonModule() {
    }
    NbButtonModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
            ],
            declarations: tslib.__spreadArrays(NB_BUTTON_COMPONENTS),
            exports: tslib.__spreadArrays(NB_BUTTON_COMPONENTS),
        })
    ], NbButtonModule);
    return NbButtonModule;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbDateService = /** @class */ (function () {
    function NbDateService() {
        this.DAYS_IN_WEEK = 7;
    }
    NbDateService.prototype.setLocale = function (locale) {
        this.locale = locale;
    };
    /**
     * Checks if the date is between the start date and the end date.
     * */
    NbDateService.prototype.isBetween = function (date, start, end) {
        return this.compareDates(date, start) > 0 && this.compareDates(date, end) < 0;
    };
    
    /**
     * Checks is two dates have the same day.
     * */
    NbDateService.prototype.isSameDaySafe = function (date1, date2) {
        return date1 && date2 && this.isSameDay(date1, date2);
    };
    
    /**
     * Checks is two dates have the same month.
     * */
    NbDateService.prototype.isSameMonthSafe = function (date1, date2) {
        return date1 && date2 && this.isSameMonth(date1, date2);
    };
    /**
     * Checks is two dates have the same year.
     * */
    NbDateService.prototype.isSameYearSafe = function (date1, date2) {
        return date1 && date2 && this.isSameYear(date1, date2);
    };
    return NbDateService;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var batch = function (target, batchSize, offset) {
    if (offset === void 0) { offset = 0; }
    return target.reduce(function (res, item, index) {
        var chunkIndex = Math.floor((index + offset) / batchSize);
        if (!res[chunkIndex]) {
            res[chunkIndex] = [];
        }
        res[chunkIndex].push(item);
        return res;
    }, []);
};
/**
 * returns array with numbers from zero to bound.
 * */
var range = function (bound, producer) {
    if (producer === void 0) { producer = function (i) { return i; }; }
    var arr = [];
    for (var i = 0; i < bound; i++) {
        arr.push(producer(i));
    }
    return arr;
};

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarMonthModelService = /** @class */ (function () {
    function NbCalendarMonthModelService(dateService) {
        this.dateService = dateService;
    }
    NbCalendarMonthModelService.prototype.createDaysGrid = function (activeMonth, boundingMonth) {
        if (boundingMonth === void 0) { boundingMonth = true; }
        var weeks = this.createDates(activeMonth);
        return this.withBoundingMonths(weeks, activeMonth, boundingMonth);
    };
    NbCalendarMonthModelService.prototype.createDates = function (activeMonth) {
        var days = this.createDateRangeForMonth(activeMonth);
        var startOfWeekDayDiff = this.getStartOfWeekDayDiff(activeMonth);
        return batch(days, this.dateService.DAYS_IN_WEEK, startOfWeekDayDiff);
    };
    NbCalendarMonthModelService.prototype.withBoundingMonths = function (weeks, activeMonth, boundingMonth) {
        var withBoundingMonths = weeks;
        if (this.isShouldAddPrevBoundingMonth(withBoundingMonths)) {
            withBoundingMonths = this.addPrevBoundingMonth(withBoundingMonths, activeMonth, boundingMonth);
        }
        if (this.isShouldAddNextBoundingMonth(withBoundingMonths)) {
            withBoundingMonths = this.addNextBoundingMonth(withBoundingMonths, activeMonth, boundingMonth);
        }
        return withBoundingMonths;
    };
    NbCalendarMonthModelService.prototype.addPrevBoundingMonth = function (weeks, activeMonth, boundingMonth) {
        var firstWeek = weeks.shift();
        var requiredItems = this.dateService.DAYS_IN_WEEK - firstWeek.length;
        firstWeek.unshift.apply(firstWeek, this.createPrevBoundingDays(activeMonth, boundingMonth, requiredItems));
        return tslib.__spreadArrays([firstWeek], weeks);
    };
    NbCalendarMonthModelService.prototype.addNextBoundingMonth = function (weeks, activeMonth, boundingMonth) {
        var lastWeek = weeks.pop();
        var requiredItems = this.dateService.DAYS_IN_WEEK - lastWeek.length;
        lastWeek.push.apply(lastWeek, this.createNextBoundingDays(activeMonth, boundingMonth, requiredItems));
        return tslib.__spreadArrays(weeks, [lastWeek]);
    };
    NbCalendarMonthModelService.prototype.createPrevBoundingDays = function (activeMonth, boundingMonth, requiredItems) {
        var month = this.dateService.addMonth(activeMonth, -1);
        var daysInMonth = this.dateService.getNumberOfDaysInMonth(month);
        return this.createDateRangeForMonth(month)
            .slice(daysInMonth - requiredItems)
            .map(function (date) { return boundingMonth ? date : null; });
    };
    NbCalendarMonthModelService.prototype.createNextBoundingDays = function (activeMonth, boundingMonth, requiredItems) {
        var month = this.dateService.addMonth(activeMonth, 1);
        return this.createDateRangeForMonth(month)
            .slice(0, requiredItems)
            .map(function (date) { return boundingMonth ? date : null; });
    };
    NbCalendarMonthModelService.prototype.getStartOfWeekDayDiff = function (date) {
        var startOfMonth = this.dateService.getMonthStart(date);
        return this.getWeekStartDiff(startOfMonth);
    };
    NbCalendarMonthModelService.prototype.getWeekStartDiff = function (date) {
        return (7 - this.dateService.getFirstDayOfWeek() + this.dateService.getDayOfWeek(date)) % 7;
    };
    NbCalendarMonthModelService.prototype.isShouldAddPrevBoundingMonth = function (weeks) {
        return weeks[0].length < this.dateService.DAYS_IN_WEEK;
    };
    NbCalendarMonthModelService.prototype.isShouldAddNextBoundingMonth = function (weeks) {
        return weeks[weeks.length - 1].length < this.dateService.DAYS_IN_WEEK;
    };
    NbCalendarMonthModelService.prototype.createDateRangeForMonth = function (date) {
        var _this = this;
        var daysInMonth = this.dateService.getNumberOfDaysInMonth(date);
        return range(daysInMonth, function (i) {
            var year = _this.dateService.getYear(date);
            var month = _this.dateService.getMonth(date);
            return _this.dateService.createDate(year, month, i + 1);
        });
    };
    NbCalendarMonthModelService = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbCalendarMonthModelService);
    return NbCalendarMonthModelService;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarDayCellComponent = /** @class */ (function () {
    function NbCalendarDayCellComponent(dateService) {
        this.dateService = dateService;
        this.size = exports.NbCalendarSize.MEDIUM;
        this.select = new i0.EventEmitter(true);
        this.dayCellClass = true;
    }
    Object.defineProperty(NbCalendarDayCellComponent.prototype, "today", {
        get: function () {
            return this.dateService.isSameDaySafe(this.date, this.dateService.today());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarDayCellComponent.prototype, "boundingMonth", {
        get: function () {
            return !this.dateService.isSameMonthSafe(this.date, this.visibleDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarDayCellComponent.prototype, "selected", {
        get: function () {
            return this.dateService.isSameDaySafe(this.date, this.selectedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarDayCellComponent.prototype, "empty", {
        get: function () {
            return !this.date;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarDayCellComponent.prototype, "disabled", {
        get: function () {
            return this.smallerThanMin() || this.greaterThanMax() || this.dontFitFilter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarDayCellComponent.prototype, "isLarge", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarDayCellComponent.prototype, "day", {
        get: function () {
            return this.date && this.dateService.getDate(this.date);
        },
        enumerable: true,
        configurable: true
    });
    NbCalendarDayCellComponent.prototype.onClick = function () {
        if (this.disabled || this.empty) {
            return;
        }
        this.select.emit(this.date);
    };
    NbCalendarDayCellComponent.prototype.smallerThanMin = function () {
        return this.date && this.min && this.dateService.compareDates(this.date, this.min) < 0;
    };
    NbCalendarDayCellComponent.prototype.greaterThanMax = function () {
        return this.date && this.max && this.dateService.compareDates(this.date, this.max) > 0;
    };
    NbCalendarDayCellComponent.prototype.dontFitFilter = function () {
        return this.date && this.filter && !this.filter(this.date);
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarDayCellComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarDayCellComponent.prototype, "selectedValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarDayCellComponent.prototype, "visibleDate", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarDayCellComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarDayCellComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Function)
    ], NbCalendarDayCellComponent.prototype, "filter", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarDayCellComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbCalendarDayCellComponent.prototype, "select", void 0);
    tslib.__decorate([
        i0.HostBinding('class.today'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarDayCellComponent.prototype, "today", null);
    tslib.__decorate([
        i0.HostBinding('class.bounding-month'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarDayCellComponent.prototype, "boundingMonth", null);
    tslib.__decorate([
        i0.HostBinding('class.selected'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarDayCellComponent.prototype, "selected", null);
    tslib.__decorate([
        i0.HostBinding('class.empty'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarDayCellComponent.prototype, "empty", null);
    tslib.__decorate([
        i0.HostBinding('class.disabled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarDayCellComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarDayCellComponent.prototype, "isLarge", null);
    tslib.__decorate([
        i0.HostBinding('class.day-cell'),
        tslib.__metadata("design:type", Object)
    ], NbCalendarDayCellComponent.prototype, "dayCellClass", void 0);
    tslib.__decorate([
        i0.HostListener('click'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbCalendarDayCellComponent.prototype, "onClick", null);
    NbCalendarDayCellComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-day-cell',
            template: "\n    <div class=\"cell-content\">\n      {{ day }}\n    </div>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbCalendarDayCellComponent);
    return NbCalendarDayCellComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Provides capability pick days.
 * */
var NbCalendarDayPickerComponent = /** @class */ (function () {
    function NbCalendarDayPickerComponent(monthModel) {
        this.monthModel = monthModel;
        /**
         * Defines if we should render previous and next months
         * in the current month view.
         * */
        this.boundingMonths = true;
        this.cellComponent = NbCalendarDayCellComponent;
        /**
         * Size of the component.
         * Can be 'medium' which is default or 'large'.
         * */
        this.size = exports.NbCalendarSize.MEDIUM;
        this._showWeekNumber = false;
        /**
         * Fires newly selected date.
         * */
        this.dateChange = new i0.EventEmitter();
    }
    Object.defineProperty(NbCalendarDayPickerComponent.prototype, "setCellComponent", {
        /**
         * Custom day cell component. Have to implement `NbCalendarCell` interface.
         * */
        set: function (cellComponent) {
            if (cellComponent) {
                this.cellComponent = cellComponent;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarDayPickerComponent.prototype, "showWeekNumber", {
        /**
         * Determines should we show week numbers column.
         * False by default.
         * */
        get: function () {
            return this._showWeekNumber;
        },
        set: function (value) {
            this._showWeekNumber = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarDayPickerComponent.prototype, "large", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    NbCalendarDayPickerComponent.prototype.ngOnChanges = function (_a) {
        var visibleDate = _a.visibleDate;
        if (visibleDate) {
            this.weeks = this.monthModel.createDaysGrid(this.visibleDate, this.boundingMonths);
        }
    };
    NbCalendarDayPickerComponent.prototype.onSelect = function (day) {
        this.dateChange.emit(day);
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarDayPickerComponent.prototype, "visibleDate", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbCalendarDayPickerComponent.prototype, "boundingMonths", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarDayPickerComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarDayPickerComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Function)
    ], NbCalendarDayPickerComponent.prototype, "filter", void 0);
    tslib.__decorate([
        i0.Input('cellComponent'),
        tslib.__metadata("design:type", i0.Type),
        tslib.__metadata("design:paramtypes", [i0.Type])
    ], NbCalendarDayPickerComponent.prototype, "setCellComponent", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarDayPickerComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarDayPickerComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbCalendarDayPickerComponent.prototype, "showWeekNumber", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarDayPickerComponent.prototype, "weekNumberSymbol", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarDayPickerComponent.prototype, "dateChange", void 0);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarDayPickerComponent.prototype, "large", null);
    NbCalendarDayPickerComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-day-picker',
            template: "\n    <nb-calendar-week-numbers *ngIf=\"showWeekNumber\"\n                              [weeks]=\"weeks\"\n                              [size]=\"size\"\n                              [weekNumberSymbol]=\"weekNumberSymbol\">\n    </nb-calendar-week-numbers>\n    <div class=\"days-container\">\n      <nb-calendar-days-names [size]=\"size\"></nb-calendar-days-names>\n      <nb-calendar-picker\n          [data]=\"weeks\"\n          [visibleDate]=\"visibleDate\"\n          [selectedValue]=\"date\"\n          [cellComponent]=\"cellComponent\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [filter]=\"filter\"\n          [size]=\"size\"\n          (select)=\"onSelect($event)\">\n      </nb-calendar-picker>\n    </div>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: [":host{display:flex}.days-container{width:100%}\n"]
        }),
        tslib.__metadata("design:paramtypes", [NbCalendarMonthModelService])
    ], NbCalendarDayPickerComponent);
    return NbCalendarDayPickerComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarDaysNamesComponent = /** @class */ (function () {
    function NbCalendarDaysNamesComponent(dateService) {
        this.dateService = dateService;
    }
    Object.defineProperty(NbCalendarDaysNamesComponent.prototype, "isLarge", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    NbCalendarDaysNamesComponent.prototype.ngOnInit = function () {
        var days = this.createDaysNames();
        this.days = this.shiftStartOfWeek(days);
    };
    NbCalendarDaysNamesComponent.prototype.createDaysNames = function () {
        return this.dateService.getDayOfWeekNames()
            .map(this.markIfHoliday);
    };
    NbCalendarDaysNamesComponent.prototype.shiftStartOfWeek = function (days) {
        for (var i = 0; i < this.dateService.getFirstDayOfWeek(); i++) {
            days.push(days.shift());
        }
        return days;
    };
    NbCalendarDaysNamesComponent.prototype.markIfHoliday = function (name, i) {
        return { name: name, isHoliday: i % 6 === 0 };
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarDaysNamesComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarDaysNamesComponent.prototype, "isLarge", null);
    NbCalendarDaysNamesComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-days-names',
            template: "\n    <div class=\"day\" *ngFor=\"let day of days\" [class.holiday]=\"day.isHoliday\">{{ day.name }}</div>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: [":host{display:flex;justify-content:space-between}:host .day{display:flex;align-items:center;justify-content:center}\n"]
        }),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbCalendarDaysNamesComponent);
    return NbCalendarDaysNamesComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarMonthCellComponent = /** @class */ (function () {
    function NbCalendarMonthCellComponent(dateService) {
        this.dateService = dateService;
        this.size = exports.NbCalendarSize.MEDIUM;
        this.select = new i0.EventEmitter(true);
        this.monthCellClass = true;
    }
    Object.defineProperty(NbCalendarMonthCellComponent.prototype, "selected", {
        get: function () {
            return this.dateService.isSameMonthSafe(this.date, this.selectedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarMonthCellComponent.prototype, "today", {
        get: function () {
            return this.dateService.isSameMonthSafe(this.date, this.dateService.today());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarMonthCellComponent.prototype, "disabled", {
        get: function () {
            return this.smallerThanMin() || this.greaterThanMax();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarMonthCellComponent.prototype, "isLarge", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarMonthCellComponent.prototype, "month", {
        get: function () {
            return this.dateService.getMonthName(this.date);
        },
        enumerable: true,
        configurable: true
    });
    NbCalendarMonthCellComponent.prototype.onClick = function () {
        if (this.disabled) {
            return;
        }
        this.select.emit(this.date);
    };
    NbCalendarMonthCellComponent.prototype.smallerThanMin = function () {
        return this.date && this.min && this.dateService.compareDates(this.monthEnd(), this.min) < 0;
    };
    NbCalendarMonthCellComponent.prototype.greaterThanMax = function () {
        return this.date && this.max && this.dateService.compareDates(this.monthStart(), this.max) > 0;
    };
    NbCalendarMonthCellComponent.prototype.monthStart = function () {
        return this.dateService.getMonthStart(this.date);
    };
    NbCalendarMonthCellComponent.prototype.monthEnd = function () {
        return this.dateService.getMonthEnd(this.date);
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarMonthCellComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarMonthCellComponent.prototype, "selectedValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarMonthCellComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarMonthCellComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarMonthCellComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbCalendarMonthCellComponent.prototype, "select", void 0);
    tslib.__decorate([
        i0.HostBinding('class.selected'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarMonthCellComponent.prototype, "selected", null);
    tslib.__decorate([
        i0.HostBinding('class.today'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarMonthCellComponent.prototype, "today", null);
    tslib.__decorate([
        i0.HostBinding('class.disabled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarMonthCellComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarMonthCellComponent.prototype, "isLarge", null);
    tslib.__decorate([
        i0.HostBinding('class.month-cell'),
        tslib.__metadata("design:type", Object)
    ], NbCalendarMonthCellComponent.prototype, "monthCellClass", void 0);
    tslib.__decorate([
        i0.HostListener('click'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbCalendarMonthCellComponent.prototype, "onClick", null);
    NbCalendarMonthCellComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-month-cell',
            template: "\n    <div class=\"cell-content\">\n      {{ month }}\n    </div>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbCalendarMonthCellComponent);
    return NbCalendarMonthCellComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var MONTHS_IN_VIEW = 12;
var MONTHS_IN_COLUMN = 4;
var NbCalendarMonthPickerComponent = /** @class */ (function () {
    function NbCalendarMonthPickerComponent(dateService) {
        this.dateService = dateService;
        this.size = exports.NbCalendarSize.MEDIUM;
        this.monthChange = new i0.EventEmitter();
        this.cellComponent = NbCalendarMonthCellComponent;
    }
    Object.defineProperty(NbCalendarMonthPickerComponent.prototype, "_cellComponent", {
        set: function (cellComponent) {
            if (cellComponent) {
                this.cellComponent = cellComponent;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarMonthPickerComponent.prototype, "large", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    NbCalendarMonthPickerComponent.prototype.ngOnChanges = function (changes) {
        if (changes.month) {
            this.initMonths();
        }
    };
    NbCalendarMonthPickerComponent.prototype.initMonths = function () {
        var date = this.dateService.getDate(this.month);
        var year = this.dateService.getYear(this.month);
        var firstMonth = this.dateService.createDate(year, 0, date);
        var months = [firstMonth];
        for (var monthIndex = 1; monthIndex < MONTHS_IN_VIEW; monthIndex++) {
            months.push(this.dateService.addMonth(firstMonth, monthIndex));
        }
        this.months = batch(months, MONTHS_IN_COLUMN);
    };
    NbCalendarMonthPickerComponent.prototype.onSelect = function (month) {
        this.monthChange.emit(month);
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarMonthPickerComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarMonthPickerComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Function)
    ], NbCalendarMonthPickerComponent.prototype, "filter", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarMonthPickerComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarMonthPickerComponent.prototype, "month", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarMonthPickerComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbCalendarMonthPickerComponent.prototype, "monthChange", void 0);
    tslib.__decorate([
        i0.Input('cellComponent'),
        tslib.__metadata("design:type", i0.Type),
        tslib.__metadata("design:paramtypes", [i0.Type])
    ], NbCalendarMonthPickerComponent.prototype, "_cellComponent", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarMonthPickerComponent.prototype, "large", null);
    NbCalendarMonthPickerComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-month-picker',
            template: "\n    <nb-calendar-picker\n      [data]=\"months\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [filter]=\"filter\"\n      [selectedValue]=\"date\"\n      [visibleDate]=\"month\"\n      [cellComponent]=\"cellComponent\"\n      [size]=\"size\"\n      (select)=\"onSelect($event)\">\n    </nb-calendar-picker>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbCalendarMonthPickerComponent);
    return NbCalendarMonthPickerComponent;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarYearModelService = /** @class */ (function () {
    function NbCalendarYearModelService(dateService) {
        this.dateService = dateService;
        this.yearsInView = 12;
        this.yearsInRow = 4;
    }
    NbCalendarYearModelService.prototype.getYearsInView = function () {
        return this.yearsInView;
    };
    NbCalendarYearModelService.prototype.getYearsInRow = function () {
        return this.yearsInRow;
    };
    NbCalendarYearModelService.prototype.getViewYears = function (viewYear) {
        var _this = this;
        var year = this.dateService.getYear(viewYear);
        var viewStartYear;
        if (year >= 0) {
            viewStartYear = year - (year % this.yearsInView);
        }
        else {
            viewStartYear = year - (year % this.yearsInView + this.yearsInView);
        }
        var years = range(this.yearsInView).map(function (i) { return _this.copyWithYear(viewStartYear + i, viewYear); });
        return batch(years, this.yearsInRow);
    };
    NbCalendarYearModelService.prototype.copyWithYear = function (year, date) {
        return this.dateService.createDate(year, this.dateService.getMonth(date), this.dateService.getDate(date));
    };
    NbCalendarYearModelService = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbCalendarYearModelService);
    return NbCalendarYearModelService;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarViewModeComponent = /** @class */ (function () {
    function NbCalendarViewModeComponent(dateService, yearModelService) {
        this.dateService = dateService;
        this.yearModelService = yearModelService;
        this.viewMode = exports.NbCalendarViewMode.DATE;
        this.changeMode = new i0.EventEmitter(true);
    }
    NbCalendarViewModeComponent.prototype.getText = function () {
        if (!this.date) {
            return '';
        }
        switch (this.viewMode) {
            case exports.NbCalendarViewMode.DATE: {
                var month = this.dateService.getMonthName(this.date, _angular_common.TranslationWidth.Wide);
                var year = this.dateService.getYear(this.date);
                return month + " " + year;
            }
            case exports.NbCalendarViewMode.MONTH:
                return "" + this.dateService.getYear(this.date);
            case exports.NbCalendarViewMode.YEAR:
                return this.getFirstYear() + " - " + this.getLastYear();
        }
    };
    NbCalendarViewModeComponent.prototype.getIcon = function () {
        if (this.viewMode === exports.NbCalendarViewMode.DATE) {
            return 'chevron-down-outline';
        }
        return 'chevron-up-outline';
    };
    NbCalendarViewModeComponent.prototype.getFirstYear = function () {
        var years = this.yearModelService.getViewYears(this.date);
        return this.dateService.getYear(years[0][0]).toString();
    };
    NbCalendarViewModeComponent.prototype.getLastYear = function () {
        var years = this.yearModelService.getViewYears(this.date);
        var lastRow = years[years.length - 1];
        var lastYear = lastRow[lastRow.length - 1];
        return this.dateService.getYear(lastYear).toString();
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarViewModeComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarViewModeComponent.prototype, "viewMode", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarViewModeComponent.prototype, "changeMode", void 0);
    NbCalendarViewModeComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-view-mode',
            template: "\n    <button nbButton (click)=\"changeMode.emit()\" ghost status=\"basic\">\n      {{ getText() }}\n      <nb-icon [icon]=\"getIcon()\" pack=\"nebular-essentials\"></nb-icon>\n    </button>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [NbDateService,
            NbCalendarYearModelService])
    ], NbCalendarViewModeComponent);
    return NbCalendarViewModeComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarPageableNavigationComponent = /** @class */ (function () {
    function NbCalendarPageableNavigationComponent(directionService) {
        this.directionService = directionService;
        this.next = new i0.EventEmitter();
        this.prev = new i0.EventEmitter();
    }
    Object.defineProperty(NbCalendarPageableNavigationComponent.prototype, "isLtr", {
        get: function () {
            return this.directionService.isLtr();
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarPageableNavigationComponent.prototype, "next", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarPageableNavigationComponent.prototype, "prev", void 0);
    NbCalendarPageableNavigationComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-pageable-navigation',
            template: "\n    <button nbButton (click)=\"prev.emit()\" ghost status=\"basic\" class=\"prev-month\">\n      <nb-icon [icon]=\"isLtr ? 'chevron-left-outline' : 'chevron-right-outline'\" pack=\"nebular-essentials\"></nb-icon>\n    </button>\n    <button nbButton (click)=\"next.emit()\" ghost status=\"basic\" class=\"next-month\">\n      <nb-icon [icon]=\"isLtr ? 'chevron-right-outline' : 'chevron-left-outline'\" pack=\"nebular-essentials\"></nb-icon>\n    </button>\n  ",
            styles: [":host{display:flex;align-items:center;justify-content:flex-start}\n"]
        }),
        tslib.__metadata("design:paramtypes", [NbLayoutDirectionService])
    ], NbCalendarPageableNavigationComponent);
    return NbCalendarPageableNavigationComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarPickerComponent = /** @class */ (function () {
    function NbCalendarPickerComponent() {
        this.size = exports.NbCalendarSize.MEDIUM;
        this.select = new i0.EventEmitter();
    }
    Object.defineProperty(NbCalendarPickerComponent.prototype, "isLarge", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Array)
    ], NbCalendarPickerComponent.prototype, "data", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarPickerComponent.prototype, "visibleDate", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarPickerComponent.prototype, "selectedValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.Type)
    ], NbCalendarPickerComponent.prototype, "cellComponent", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarPickerComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarPickerComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Function)
    ], NbCalendarPickerComponent.prototype, "filter", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarPickerComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbCalendarPickerComponent.prototype, "select", void 0);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarPickerComponent.prototype, "isLarge", null);
    NbCalendarPickerComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-picker',
            template: "\n    <nb-calendar-picker-row\n      *ngFor=\"let row of data\"\n      [row]=\"row\"\n      [visibleDate]=\"visibleDate\"\n      [selectedValue]=\"selectedValue\"\n      [component]=\"cellComponent\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [filter]=\"filter\"\n      [size]=\"size\"\n      (select)=\"select.emit($event)\">\n    </nb-calendar-picker-row>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        })
    ], NbCalendarPickerComponent);
    return NbCalendarPickerComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarPickerRowComponent = /** @class */ (function () {
    function NbCalendarPickerRowComponent(cfr) {
        this.cfr = cfr;
        this.size = exports.NbCalendarSize.MEDIUM;
        this.select = new i0.EventEmitter();
    }
    NbCalendarPickerRowComponent.prototype.ngOnChanges = function () {
        var _this = this;
        var factory = this.cfr.resolveComponentFactory(this.component);
        this.containerRef.clear();
        this.row.forEach(function (date) {
            var component = _this.containerRef.createComponent(factory);
            _this.patchWithContext(component.instance, date);
            component.changeDetectorRef.detectChanges();
        });
    };
    NbCalendarPickerRowComponent.prototype.patchWithContext = function (component, date) {
        component.visibleDate = this.visibleDate;
        component.selectedValue = this.selectedValue;
        component.date = date;
        component.min = this.min;
        component.max = this.max;
        component.filter = this.filter;
        component.size = this.size;
        component.select.subscribe(this.select.emit.bind(this.select));
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Array)
    ], NbCalendarPickerRowComponent.prototype, "row", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarPickerRowComponent.prototype, "selectedValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarPickerRowComponent.prototype, "visibleDate", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.Type)
    ], NbCalendarPickerRowComponent.prototype, "component", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarPickerRowComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarPickerRowComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Function)
    ], NbCalendarPickerRowComponent.prototype, "filter", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarPickerRowComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbCalendarPickerRowComponent.prototype, "select", void 0);
    tslib.__decorate([
        i0.ViewChild(i0.TemplateRef, { read: i0.ViewContainerRef, static: true }),
        tslib.__metadata("design:type", i0.ViewContainerRef)
    ], NbCalendarPickerRowComponent.prototype, "containerRef", void 0);
    NbCalendarPickerRowComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-picker-row',
            template: '<ng-template></ng-template>',
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: ["\n    :host {\n      display: flex;\n      justify-content: space-between;\n    }\n  "]
        }),
        tslib.__metadata("design:paramtypes", [i0.ComponentFactoryResolver])
    ], NbCalendarPickerRowComponent);
    return NbCalendarPickerRowComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarYearCellComponent = /** @class */ (function () {
    function NbCalendarYearCellComponent(dateService) {
        this.dateService = dateService;
        this.size = exports.NbCalendarSize.MEDIUM;
        this.select = new i0.EventEmitter(true);
        this.yearCellClass = true;
    }
    Object.defineProperty(NbCalendarYearCellComponent.prototype, "selected", {
        get: function () {
            return this.dateService.isSameYearSafe(this.date, this.selectedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarYearCellComponent.prototype, "today", {
        get: function () {
            return this.dateService.isSameYearSafe(this.date, this.dateService.today());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarYearCellComponent.prototype, "disabled", {
        get: function () {
            return this.smallerThanMin() || this.greaterThanMax();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarYearCellComponent.prototype, "isLarge", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarYearCellComponent.prototype, "year", {
        get: function () {
            return this.dateService.getYear(this.date);
        },
        enumerable: true,
        configurable: true
    });
    NbCalendarYearCellComponent.prototype.onClick = function () {
        if (this.disabled) {
            return;
        }
        this.select.emit(this.date);
    };
    NbCalendarYearCellComponent.prototype.smallerThanMin = function () {
        return this.date && this.min && this.dateService.compareDates(this.yearEnd(), this.min) < 0;
    };
    NbCalendarYearCellComponent.prototype.greaterThanMax = function () {
        return this.date && this.max && this.dateService.compareDates(this.yearStart(), this.max) > 0;
    };
    NbCalendarYearCellComponent.prototype.yearStart = function () {
        return this.dateService.getYearStart(this.date);
    };
    NbCalendarYearCellComponent.prototype.yearEnd = function () {
        return this.dateService.getYearEnd(this.date);
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarYearCellComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarYearCellComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarYearCellComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarYearCellComponent.prototype, "selectedValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarYearCellComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbCalendarYearCellComponent.prototype, "select", void 0);
    tslib.__decorate([
        i0.HostBinding('class.selected'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarYearCellComponent.prototype, "selected", null);
    tslib.__decorate([
        i0.HostBinding('class.today'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarYearCellComponent.prototype, "today", null);
    tslib.__decorate([
        i0.HostBinding('class.disabled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarYearCellComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarYearCellComponent.prototype, "isLarge", null);
    tslib.__decorate([
        i0.HostBinding('class.year-cell'),
        tslib.__metadata("design:type", Object)
    ], NbCalendarYearCellComponent.prototype, "yearCellClass", void 0);
    tslib.__decorate([
        i0.HostListener('click'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbCalendarYearCellComponent.prototype, "onClick", null);
    NbCalendarYearCellComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-year-cell',
            template: "\n    <div class=\"cell-content\">\n      {{ year }}\n    </div>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbCalendarYearCellComponent);
    return NbCalendarYearCellComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarYearPickerComponent = /** @class */ (function () {
    function NbCalendarYearPickerComponent(dateService, yearModelService) {
        this.dateService = dateService;
        this.yearModelService = yearModelService;
        this.cellComponent = NbCalendarYearCellComponent;
        this.size = exports.NbCalendarSize.MEDIUM;
        this.yearChange = new i0.EventEmitter();
    }
    Object.defineProperty(NbCalendarYearPickerComponent.prototype, "_cellComponent", {
        set: function (cellComponent) {
            if (cellComponent) {
                this.cellComponent = cellComponent;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarYearPickerComponent.prototype, "large", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    NbCalendarYearPickerComponent.prototype.ngOnChanges = function () {
        this.years = this.yearModelService.getViewYears(this.year);
    };
    NbCalendarYearPickerComponent.prototype.onSelect = function (year) {
        this.yearChange.emit(year);
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarYearPickerComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarYearPickerComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarYearPickerComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Function)
    ], NbCalendarYearPickerComponent.prototype, "filter", void 0);
    tslib.__decorate([
        i0.Input('cellComponent'),
        tslib.__metadata("design:type", i0.Type),
        tslib.__metadata("design:paramtypes", [i0.Type])
    ], NbCalendarYearPickerComponent.prototype, "_cellComponent", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarYearPickerComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarYearPickerComponent.prototype, "year", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarYearPickerComponent.prototype, "yearChange", void 0);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarYearPickerComponent.prototype, "large", null);
    NbCalendarYearPickerComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-year-picker',
            template: "\n    <nb-calendar-picker\n      [data]=\"years\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [filter]=\"filter\"\n      [selectedValue]=\"date\"\n      [visibleDate]=\"year\"\n      [cellComponent]=\"cellComponent\"\n      [size]=\"size\"\n      (select)=\"onSelect($event)\">\n    </nb-calendar-picker>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [NbDateService,
            NbCalendarYearModelService])
    ], NbCalendarYearPickerComponent);
    return NbCalendarYearPickerComponent;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarWeekNumberComponent = /** @class */ (function () {
    function NbCalendarWeekNumberComponent(dateService) {
        this.dateService = dateService;
    }
    Object.defineProperty(NbCalendarWeekNumberComponent.prototype, "isLarge", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    NbCalendarWeekNumberComponent.prototype.ngOnChanges = function (changes) {
        if (changes.weeks) {
            this.weekNumbers = this.getWeeks();
        }
    };
    NbCalendarWeekNumberComponent.prototype.getWeeks = function () {
        var _this = this;
        return this.weeks.map(function (week) {
            // Find last defined day as week could contain null days in case
            // boundingMonth set to false
            var lastDay = tslib.__spreadArrays(week).reverse().find(function (day) { return !!day; });
            // Use last day of the week to determine week number.
            // This way weeks which span between sibling years is marked first
            return _this.dateService.getWeekNumber(lastDay);
        });
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Array)
    ], NbCalendarWeekNumberComponent.prototype, "weeks", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarWeekNumberComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarWeekNumberComponent.prototype, "weekNumberSymbol", void 0);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarWeekNumberComponent.prototype, "isLarge", null);
    NbCalendarWeekNumberComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-week-numbers',
            template: "\n    <div class=\"sign-container\">\n      <div class=\"sign\">{{ weekNumberSymbol }}</div>\n    </div>\n    <div class=\"week-number\" *ngFor=\"let weekNumber of weekNumbers\">{{ weekNumber }}</div>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: [":host{display:flex;flex-direction:column}\n"]
        }),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbCalendarWeekNumberComponent);
    return NbCalendarWeekNumberComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * The `NbNativeDateService` is basic implementation of `NbDateService` using
 * native js date objects and angular localization services.
 * */
var NbNativeDateService = /** @class */ (function (_super) {
    tslib.__extends(NbNativeDateService, _super);
    function NbNativeDateService(locale) {
        var _this = _super.call(this) || this;
        _this.setLocale(locale);
        return _this;
    }
    NbNativeDateService.prototype.setLocale = function (locale) {
        _super.prototype.setLocale.call(this, locale);
        this.datePipe = new _angular_common.DatePipe(locale);
    };
    NbNativeDateService.prototype.isValidDateString = function (date, format) {
        return !isNaN(this.parse(date, format).getTime());
    };
    NbNativeDateService.prototype.today = function () {
        return new Date();
    };
    NbNativeDateService.prototype.getDate = function (date) {
        return date.getDate();
    };
    NbNativeDateService.prototype.getMonth = function (date) {
        return date.getMonth();
    };
    NbNativeDateService.prototype.getYear = function (date) {
        return date.getFullYear();
    };
    NbNativeDateService.prototype.getDayOfWeek = function (date) {
        return date.getDay();
    };
    /**
     * returns first day of the week, it can be 1 if week starts from monday
     * and 0 if from sunday and so on.
     * */
    NbNativeDateService.prototype.getFirstDayOfWeek = function () {
        return _angular_common.getLocaleFirstDayOfWeek(this.locale);
    };
    NbNativeDateService.prototype.getMonthName = function (date, style$$1) {
        if (style$$1 === void 0) { style$$1 = _angular_common.TranslationWidth.Abbreviated; }
        var index = date.getMonth();
        return this.getMonthNameByIndex(index, style$$1);
    };
    NbNativeDateService.prototype.getMonthNameByIndex = function (index, style$$1) {
        if (style$$1 === void 0) { style$$1 = _angular_common.TranslationWidth.Abbreviated; }
        return _angular_common.getLocaleMonthNames(this.locale, _angular_common.FormStyle.Format, style$$1)[index];
    };
    NbNativeDateService.prototype.getDayOfWeekNames = function () {
        return _angular_common.getLocaleDayNames(this.locale, _angular_common.FormStyle.Format, _angular_common.TranslationWidth.Short);
    };
    NbNativeDateService.prototype.format = function (date, format) {
        return this.datePipe.transform(date, format);
    };
    /**
     * We haven't got capability to parse date using formatting without third party libraries.
     * */
    NbNativeDateService.prototype.parse = function (date, format) {
        return new Date(Date.parse(date));
    };
    NbNativeDateService.prototype.addDay = function (date, num) {
        return this.createDate(date.getFullYear(), date.getMonth(), date.getDate() + num);
    };
    NbNativeDateService.prototype.addMonth = function (date, num) {
        var month = this.createDate(date.getFullYear(), date.getMonth() + num, 1);
        // In case of date has more days than calculated month js Date will change that month to the next one
        // because of the date overflow.
        month.setDate(Math.min(date.getDate(), this.getMonthEnd(month).getDate()));
        return month;
    };
    NbNativeDateService.prototype.addYear = function (date, num) {
        return this.createDate(date.getFullYear() + num, date.getMonth(), date.getDate());
    };
    NbNativeDateService.prototype.clone = function (date) {
        return new Date(date.getTime());
    };
    NbNativeDateService.prototype.compareDates = function (date1, date2) {
        return date1.getTime() - date2.getTime();
    };
    NbNativeDateService.prototype.createDate = function (year, month, date) {
        var result = new Date(year, month, date);
        // We need to correct for the fact that JS native Date treats years in range [0, 99] as
        // abbreviations for 19xx.
        if (year >= 0 && year < 100) {
            result.setFullYear(result.getFullYear() - 1900);
        }
        return result;
    };
    NbNativeDateService.prototype.getMonthEnd = function (date) {
        return this.createDate(date.getFullYear(), date.getMonth() + 1, 0);
    };
    NbNativeDateService.prototype.getMonthStart = function (date) {
        return this.createDate(date.getFullYear(), date.getMonth(), 1);
    };
    NbNativeDateService.prototype.getNumberOfDaysInMonth = function (date) {
        return this.getMonthEnd(date).getDate();
    };
    NbNativeDateService.prototype.getYearEnd = function (date) {
        return this.createDate(date.getFullYear(), 11, 31);
    };
    NbNativeDateService.prototype.getYearStart = function (date) {
        return this.createDate(date.getFullYear(), 0, 1);
    };
    NbNativeDateService.prototype.isSameDay = function (date1, date2) {
        return this.isSameMonth(date1, date2) &&
            date1.getDate() === date2.getDate();
    };
    NbNativeDateService.prototype.isSameMonth = function (date1, date2) {
        return this.isSameYear(date1, date2) &&
            date1.getMonth() === date2.getMonth();
    };
    NbNativeDateService.prototype.isSameYear = function (date1, date2) {
        return date1.getFullYear() === date2.getFullYear();
    };
    NbNativeDateService.prototype.getId = function () {
        return 'native';
    };
    NbNativeDateService.prototype.getWeekNumber = function (date) {
        return parseInt(this.datePipe.transform(date, 'w'), 10);
    };
    NbNativeDateService = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(0, i0.Inject(i0.LOCALE_ID)),
        tslib.__metadata("design:paramtypes", [String])
    ], NbNativeDateService);
    return NbNativeDateService;
}(NbDateService));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var SERVICES = [
    { provide: NbDateService, useClass: NbNativeDateService },
    _angular_common.DatePipe,
    NbCalendarMonthModelService,
    NbCalendarYearModelService,
];
var COMPONENTS = [
    NbCalendarViewModeComponent,
    NbCalendarPageableNavigationComponent,
    NbCalendarDaysNamesComponent,
    NbCalendarYearPickerComponent,
    NbCalendarMonthPickerComponent,
    NbCalendarDayPickerComponent,
    NbCalendarDayCellComponent,
    NbCalendarMonthCellComponent,
    NbCalendarYearCellComponent,
    NbCalendarPickerRowComponent,
    NbCalendarPickerComponent,
    NbCalendarWeekNumberComponent,
];
/**
 * `NbCalendarKitModule` is a module that contains multiple useful components for building custom calendars.
 * So if you think our calendars is not enough powerful for you just use calendar-kit and build your own calendar!
 *
 * Available components:
 * - `NbCalendarDayPicker`
 * - `NbCalendarDayCell`
 * - `NbCalendarMonthPicker`
 * - `NbCalendarMonthCell`
 * - `NbCalendarYearPicker`
 * - `NbCalendarYearCell`
 * - `NbCalendarViewModeComponent`
 * - `NbCalendarPageableNavigation`
 *
 * For example you can easily build full calendar:
 * @stacked-example(Full calendar, calendar-kit/calendar-kit-full-calendar.component)
 * */
var NbCalendarKitModule = /** @class */ (function () {
    function NbCalendarKitModule() {
    }
    NbCalendarKitModule = tslib.__decorate([
        i0.NgModule({
            imports: [NbSharedModule, NbButtonModule, NbIconModule],
            exports: tslib.__spreadArrays(COMPONENTS),
            declarations: tslib.__spreadArrays(COMPONENTS),
            providers: tslib.__spreadArrays(SERVICES),
            entryComponents: [
                NbCalendarDayCellComponent,
                NbCalendarMonthCellComponent,
                NbCalendarYearCellComponent,
            ],
        })
    ], NbCalendarKitModule);
    return NbCalendarKitModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * The basis for calendar and range calendar components.
 * Encapsulates common behavior - store calendar state and perform navigation
 * between pickers.
 * */
var NbBaseCalendarComponent = /** @class */ (function () {
    function NbBaseCalendarComponent(dateService, yearModelService) {
        this.dateService = dateService;
        this.yearModelService = yearModelService;
        /**
         * Defines if we should render previous and next months
         * in the current month view.
         * */
        this.boundingMonth = true;
        /**
         * Defines active view for calendar.
         * */
        this.activeViewMode = exports.NbCalendarViewMode.DATE;
        /**
         * Size of the calendar and entire components.
         * Can be 'medium' which is default or 'large'.
         * */
        this.size = exports.NbCalendarSize.MEDIUM;
        /**
         * Determines whether we should show calendar navigation or not.
         * */
        this.showNavigation = true;
        this._showWeekNumber = false;
        /**
         * Emits date when selected.
         * */
        this.dateChange = new i0.EventEmitter();
        this.ViewMode = exports.NbCalendarViewMode;
    }
    Object.defineProperty(NbBaseCalendarComponent.prototype, "showWeekNumber", {
        /**
         * Determines should we show week numbers column.
         * False by default.
         * */
        get: function () {
            return this._showWeekNumber;
        },
        set: function (value) {
            this._showWeekNumber = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NbBaseCalendarComponent.prototype.ngOnInit = function () {
        if (!this.visibleDate) {
            this.visibleDate = this.dateService.today();
        }
    };
    Object.defineProperty(NbBaseCalendarComponent.prototype, "large", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    NbBaseCalendarComponent.prototype.setViewMode = function (viewMode) {
        this.activeViewMode = viewMode;
    };
    NbBaseCalendarComponent.prototype.setVisibleDate = function (visibleDate) {
        this.visibleDate = visibleDate;
    };
    NbBaseCalendarComponent.prototype.prevMonth = function () {
        this.changeVisibleMonth(-1);
    };
    NbBaseCalendarComponent.prototype.nextMonth = function () {
        this.changeVisibleMonth(1);
    };
    NbBaseCalendarComponent.prototype.prevYear = function () {
        this.changeVisibleYear(-1);
    };
    NbBaseCalendarComponent.prototype.nextYear = function () {
        this.changeVisibleYear(1);
    };
    NbBaseCalendarComponent.prototype.prevYears = function () {
        this.changeVisibleYears(-1);
    };
    NbBaseCalendarComponent.prototype.nextYears = function () {
        this.changeVisibleYears(1);
    };
    NbBaseCalendarComponent.prototype.navigatePrev = function () {
        switch (this.activeViewMode) {
            case exports.NbCalendarViewMode.DATE:
                return this.prevMonth();
            case exports.NbCalendarViewMode.MONTH:
                return this.prevYear();
            case exports.NbCalendarViewMode.YEAR:
                return this.prevYears();
        }
    };
    NbBaseCalendarComponent.prototype.navigateNext = function () {
        switch (this.activeViewMode) {
            case exports.NbCalendarViewMode.DATE:
                return this.nextMonth();
            case exports.NbCalendarViewMode.MONTH:
                return this.nextYear();
            case exports.NbCalendarViewMode.YEAR:
                return this.nextYears();
        }
    };
    NbBaseCalendarComponent.prototype.onChangeViewMode = function () {
        if (this.activeViewMode === exports.NbCalendarViewMode.DATE) {
            return this.setViewMode(exports.NbCalendarViewMode.YEAR);
        }
        this.setViewMode(exports.NbCalendarViewMode.DATE);
    };
    NbBaseCalendarComponent.prototype.changeVisibleMonth = function (direction) {
        this.visibleDate = this.dateService.addMonth(this.visibleDate, direction);
    };
    NbBaseCalendarComponent.prototype.changeVisibleYear = function (direction) {
        this.visibleDate = this.dateService.addYear(this.visibleDate, direction);
    };
    NbBaseCalendarComponent.prototype.changeVisibleYears = function (direction) {
        this.visibleDate = this.dateService.addYear(this.visibleDate, direction * this.yearModelService.getYearsInView());
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbBaseCalendarComponent.prototype, "boundingMonth", void 0);
    tslib.__decorate([
        i0.Input('startView'),
        tslib.__metadata("design:type", String)
    ], NbBaseCalendarComponent.prototype, "activeViewMode", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbBaseCalendarComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbBaseCalendarComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Function)
    ], NbBaseCalendarComponent.prototype, "filter", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.Type)
    ], NbBaseCalendarComponent.prototype, "dayCellComponent", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.Type)
    ], NbBaseCalendarComponent.prototype, "monthCellComponent", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.Type)
    ], NbBaseCalendarComponent.prototype, "yearCellComponent", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbBaseCalendarComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbBaseCalendarComponent.prototype, "visibleDate", void 0);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.has-navigation'),
        tslib.__metadata("design:type", Boolean)
    ], NbBaseCalendarComponent.prototype, "showNavigation", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbBaseCalendarComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.has-week-number'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbBaseCalendarComponent.prototype, "showWeekNumber", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbBaseCalendarComponent.prototype, "weekNumberSymbol", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbBaseCalendarComponent.prototype, "dateChange", void 0);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbBaseCalendarComponent.prototype, "large", null);
    NbBaseCalendarComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-base-calendar',
            template: "<nb-card>\n  <nb-card-header *ngIf=\"showNavigation\" class=\"calendar-navigation\">\n    <nb-calendar-view-mode [date]=\"visibleDate\"\n                           [viewMode]=\"activeViewMode\"\n                           (changeMode)=\"onChangeViewMode()\">\n    </nb-calendar-view-mode>\n\n    <nb-calendar-pageable-navigation (prev)=\"navigatePrev()\" (next)=\"navigateNext()\">\n    </nb-calendar-pageable-navigation>\n  </nb-card-header>\n\n  <nb-card-body [ngSwitch]=\"activeViewMode\">\n\n    <nb-calendar-day-picker *ngSwitchCase=\"ViewMode.DATE\"\n                            [boundingMonths]=\"boundingMonth\"\n                            [cellComponent]=\"dayCellComponent\"\n                            [min]=\"min\"\n                            [max]=\"max\"\n                            [filter]=\"filter\"\n                            [visibleDate]=\"visibleDate\"\n                            [size]=\"size\"\n                            [date]=\"date\"\n                            [showWeekNumber]=\"showWeekNumber\"\n                            (dateChange)=\"dateChange.emit($any($event))\"\n                            [weekNumberSymbol]=\"weekNumberSymbol\">\n    </nb-calendar-day-picker>\n\n    <nb-calendar-year-picker *ngSwitchCase=\"ViewMode.YEAR\"\n                             [cellComponent]=\"yearCellComponent\"\n                             [date]=\"$any(date)\"\n                             [min]=\"min\"\n                             [max]=\"max\"\n                             [filter]=\"filter\"\n                             [size]=\"size\"\n                             [year]=\"visibleDate\"\n                             (yearChange)=\"setVisibleDate($event); setViewMode(ViewMode.MONTH)\">\n    </nb-calendar-year-picker>\n\n    <nb-calendar-month-picker *ngSwitchCase=\"ViewMode.MONTH\"\n                              [cellComponent]=\"monthCellComponent\"\n                              [min]=\"min\"\n                              [max]=\"max\"\n                              [filter]=\"filter\"\n                              [size]=\"size\"\n                              [month]=\"visibleDate\"\n                              [date]=\"$any(date)\"\n                              (monthChange)=\"setVisibleDate($event); setViewMode(ViewMode.DATE)\">\n    </nb-calendar-month-picker>\n\n  </nb-card-body>\n\n</nb-card>\n"
        }),
        tslib.__metadata("design:paramtypes", [NbDateService,
            NbCalendarYearModelService])
    ], NbBaseCalendarComponent);
    return NbBaseCalendarComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbBaseCalendarModule = /** @class */ (function () {
    function NbBaseCalendarModule() {
    }
    NbBaseCalendarModule = tslib.__decorate([
        i0.NgModule({
            imports: [NbCalendarKitModule, NbSharedModule, NbCardModule],
            exports: [NbBaseCalendarComponent],
            declarations: [NbBaseCalendarComponent],
        })
    ], NbBaseCalendarModule);
    return NbBaseCalendarModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarModule = /** @class */ (function () {
    function NbCalendarModule() {
    }
    NbCalendarModule = tslib.__decorate([
        i0.NgModule({
            imports: [NbBaseCalendarModule],
            exports: [NbCalendarComponent],
            declarations: [NbCalendarComponent],
        })
    ], NbCalendarModule);
    return NbCalendarModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbBaseCalendarRangeCell = /** @class */ (function () {
    function NbBaseCalendarRangeCell() {
    }
    Object.defineProperty(NbBaseCalendarRangeCell.prototype, "hasRange", {
        get: function () {
            return !!(this.selectedValue && this.selectedValue.start && this.selectedValue.end);
        },
        enumerable: true,
        configurable: true
    });
    return NbBaseCalendarRangeCell;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarRangeDayCellComponent = /** @class */ (function (_super) {
    tslib.__extends(NbCalendarRangeDayCellComponent, _super);
    function NbCalendarRangeDayCellComponent(dateService) {
        var _this = _super.call(this) || this;
        _this.dateService = dateService;
        _this.size = exports.NbCalendarSize.MEDIUM;
        _this.select = new i0.EventEmitter(true);
        _this.rangeCellClass = true;
        _this.dayCellClass = true;
        return _this;
    }
    Object.defineProperty(NbCalendarRangeDayCellComponent.prototype, "inRange", {
        get: function () {
            if (this.date && this.hasRange) {
                return this.isInRange(this.date, this.selectedValue);
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeDayCellComponent.prototype, "start", {
        get: function () {
            return this.date && this.hasRange && this.dateService.isSameDay(this.date, this.selectedValue.start);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeDayCellComponent.prototype, "end", {
        get: function () {
            return this.date && this.hasRange && this.dateService.isSameDay(this.date, this.selectedValue.end);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeDayCellComponent.prototype, "today", {
        get: function () {
            return this.date && this.dateService.isSameDay(this.date, this.dateService.today());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeDayCellComponent.prototype, "boundingMonth", {
        get: function () {
            return !this.dateService.isSameMonthSafe(this.date, this.visibleDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeDayCellComponent.prototype, "selected", {
        get: function () {
            if (this.inRange) {
                return true;
            }
            if (this.selectedValue) {
                return this.dateService.isSameDay(this.date, this.selectedValue.start);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeDayCellComponent.prototype, "empty", {
        get: function () {
            return !this.date;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeDayCellComponent.prototype, "disabled", {
        get: function () {
            return this.smallerThanMin() || this.greaterThanMax() || this.dontFitFilter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeDayCellComponent.prototype, "isLarge", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeDayCellComponent.prototype, "day", {
        get: function () {
            return this.date && this.dateService.getDate(this.date);
        },
        enumerable: true,
        configurable: true
    });
    NbCalendarRangeDayCellComponent.prototype.onClick = function () {
        if (this.disabled || this.empty) {
            return;
        }
        this.select.emit(this.date);
    };
    NbCalendarRangeDayCellComponent.prototype.smallerThanMin = function () {
        return this.date && this.min && this.dateService.compareDates(this.date, this.min) < 0;
    };
    NbCalendarRangeDayCellComponent.prototype.greaterThanMax = function () {
        return this.date && this.max && this.dateService.compareDates(this.date, this.max) > 0;
    };
    NbCalendarRangeDayCellComponent.prototype.dontFitFilter = function () {
        return this.date && this.filter && !this.filter(this.date);
    };
    NbCalendarRangeDayCellComponent.prototype.isInRange = function (date, _a) {
        var start = _a.start, end = _a.end;
        var isGreaterThanStart = this.dateService.compareDates(this.date, start) >= 0;
        var isLessThanEnd = this.dateService.compareDates(this.date, end) <= 0;
        return isGreaterThanStart && isLessThanEnd;
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeDayCellComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeDayCellComponent.prototype, "selectedValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeDayCellComponent.prototype, "visibleDate", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeDayCellComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeDayCellComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Function)
    ], NbCalendarRangeDayCellComponent.prototype, "filter", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarRangeDayCellComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbCalendarRangeDayCellComponent.prototype, "select", void 0);
    tslib.__decorate([
        i0.HostBinding('class.in-range'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeDayCellComponent.prototype, "inRange", null);
    tslib.__decorate([
        i0.HostBinding('class.start'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeDayCellComponent.prototype, "start", null);
    tslib.__decorate([
        i0.HostBinding('class.end'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeDayCellComponent.prototype, "end", null);
    tslib.__decorate([
        i0.HostBinding('class.range-cell'),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeDayCellComponent.prototype, "rangeCellClass", void 0);
    tslib.__decorate([
        i0.HostBinding('class.day-cell'),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeDayCellComponent.prototype, "dayCellClass", void 0);
    tslib.__decorate([
        i0.HostBinding('class.today'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeDayCellComponent.prototype, "today", null);
    tslib.__decorate([
        i0.HostBinding('class.bounding-month'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeDayCellComponent.prototype, "boundingMonth", null);
    tslib.__decorate([
        i0.HostBinding('class.selected'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeDayCellComponent.prototype, "selected", null);
    tslib.__decorate([
        i0.HostBinding('class.empty'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeDayCellComponent.prototype, "empty", null);
    tslib.__decorate([
        i0.HostBinding('class.disabled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeDayCellComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeDayCellComponent.prototype, "isLarge", null);
    tslib.__decorate([
        i0.HostListener('click'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbCalendarRangeDayCellComponent.prototype, "onClick", null);
    NbCalendarRangeDayCellComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-range-day-cell',
            template: "\n    <div class=\"cell-content\">{{ day }}</div>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbCalendarRangeDayCellComponent);
    return NbCalendarRangeDayCellComponent;
}(NbBaseCalendarRangeCell));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarRangeYearCellComponent = /** @class */ (function (_super) {
    tslib.__extends(NbCalendarRangeYearCellComponent, _super);
    function NbCalendarRangeYearCellComponent(dateService) {
        var _this = _super.call(this) || this;
        _this.dateService = dateService;
        _this.size = exports.NbCalendarSize.MEDIUM;
        _this.select = new i0.EventEmitter(true);
        _this.yearCellClass = true;
        _this.rangeCellClass = true;
        return _this;
    }
    Object.defineProperty(NbCalendarRangeYearCellComponent.prototype, "inRange", {
        get: function () {
            return this.hasRange && this.isInRange(this.date, this.selectedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeYearCellComponent.prototype, "rangeStart", {
        get: function () {
            return this.hasRange && this.dateService.isSameYear(this.date, this.selectedValue.start);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeYearCellComponent.prototype, "rangeEnd", {
        get: function () {
            return this.hasRange && this.dateService.isSameYear(this.date, this.selectedValue.end);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeYearCellComponent.prototype, "selected", {
        get: function () {
            if (this.inRange) {
                return true;
            }
            if (this.selectedValue) {
                return this.dateService.isSameYear(this.date, this.selectedValue.start);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeYearCellComponent.prototype, "today", {
        get: function () {
            return this.dateService.isSameYear(this.date, this.dateService.today());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeYearCellComponent.prototype, "disabled", {
        get: function () {
            return this.smallerThanMin() || this.greaterThanMax();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeYearCellComponent.prototype, "isLarge", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeYearCellComponent.prototype, "year", {
        get: function () {
            return this.dateService.getYear(this.date);
        },
        enumerable: true,
        configurable: true
    });
    NbCalendarRangeYearCellComponent.prototype.onClick = function () {
        if (this.disabled) {
            return;
        }
        this.select.emit(this.date);
    };
    NbCalendarRangeYearCellComponent.prototype.smallerThanMin = function () {
        return this.date && this.min && this.dateService.compareDates(this.yearEnd(), this.min) < 0;
    };
    NbCalendarRangeYearCellComponent.prototype.greaterThanMax = function () {
        return this.date && this.max && this.dateService.compareDates(this.yearStart(), this.max) > 0;
    };
    NbCalendarRangeYearCellComponent.prototype.yearStart = function () {
        return this.dateService.getYearStart(this.date);
    };
    NbCalendarRangeYearCellComponent.prototype.yearEnd = function () {
        return this.dateService.getYearEnd(this.date);
    };
    NbCalendarRangeYearCellComponent.prototype.isInRange = function (date, _a) {
        var start = _a.start, end = _a.end;
        if (start && end) {
            var cellYear = this.dateService.getYear(date);
            var startYear = this.dateService.getYear(start);
            var endYear = this.dateService.getYear(end);
            return cellYear >= startYear && cellYear <= endYear;
        }
        return this.dateService.isSameYear(date, start);
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeYearCellComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeYearCellComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeYearCellComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeYearCellComponent.prototype, "selectedValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarRangeYearCellComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbCalendarRangeYearCellComponent.prototype, "select", void 0);
    tslib.__decorate([
        i0.HostBinding('class.in-range'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeYearCellComponent.prototype, "inRange", null);
    tslib.__decorate([
        i0.HostBinding('class.start'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeYearCellComponent.prototype, "rangeStart", null);
    tslib.__decorate([
        i0.HostBinding('class.end'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeYearCellComponent.prototype, "rangeEnd", null);
    tslib.__decorate([
        i0.HostBinding('class.selected'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeYearCellComponent.prototype, "selected", null);
    tslib.__decorate([
        i0.HostBinding('class.today'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeYearCellComponent.prototype, "today", null);
    tslib.__decorate([
        i0.HostBinding('class.disabled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeYearCellComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeYearCellComponent.prototype, "isLarge", null);
    tslib.__decorate([
        i0.HostBinding('class.year-cell'),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeYearCellComponent.prototype, "yearCellClass", void 0);
    tslib.__decorate([
        i0.HostBinding('class.range-cell'),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeYearCellComponent.prototype, "rangeCellClass", void 0);
    tslib.__decorate([
        i0.HostListener('click'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbCalendarRangeYearCellComponent.prototype, "onClick", null);
    NbCalendarRangeYearCellComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-range-year-cell',
            template: "\n    <div class=\"cell-content\">\n      {{ year }}\n    </div>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbCalendarRangeYearCellComponent);
    return NbCalendarRangeYearCellComponent;
}(NbBaseCalendarRangeCell));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarRangeMonthCellComponent = /** @class */ (function (_super) {
    tslib.__extends(NbCalendarRangeMonthCellComponent, _super);
    function NbCalendarRangeMonthCellComponent(dateService) {
        var _this = _super.call(this) || this;
        _this.dateService = dateService;
        _this.size = exports.NbCalendarSize.MEDIUM;
        _this.select = new i0.EventEmitter(true);
        _this.monthCellClass = true;
        _this.rangeCellClass = true;
        return _this;
    }
    Object.defineProperty(NbCalendarRangeMonthCellComponent.prototype, "month", {
        get: function () {
            return this.dateService.getMonthName(this.date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeMonthCellComponent.prototype, "selected", {
        get: function () {
            if (this.inRange) {
                return true;
            }
            if (this.selectedValue) {
                return this.dateService.isSameMonth(this.date, this.selectedValue.start);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeMonthCellComponent.prototype, "inRange", {
        get: function () {
            if (this.hasRange) {
                return this.isInRage(this.date, this.selectedValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeMonthCellComponent.prototype, "rangeStart", {
        get: function () {
            if (this.hasRange) {
                return this.dateService.isSameMonth(this.date, this.selectedValue.start);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeMonthCellComponent.prototype, "rangeEnd", {
        get: function () {
            if (this.hasRange) {
                return this.dateService.isSameMonth(this.date, this.selectedValue.end);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeMonthCellComponent.prototype, "today", {
        get: function () {
            return this.dateService.isSameMonthSafe(this.date, this.dateService.today());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeMonthCellComponent.prototype, "disabled", {
        get: function () {
            return this.smallerThanMin() || this.greaterThanMax();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeMonthCellComponent.prototype, "isLarge", {
        get: function () {
            return this.size === exports.NbCalendarSize.LARGE;
        },
        enumerable: true,
        configurable: true
    });
    NbCalendarRangeMonthCellComponent.prototype.onClick = function () {
        if (this.disabled) {
            return;
        }
        this.select.emit(this.date);
    };
    NbCalendarRangeMonthCellComponent.prototype.smallerThanMin = function () {
        return this.date && this.min && this.dateService.compareDates(this.monthEnd(), this.min) < 0;
    };
    NbCalendarRangeMonthCellComponent.prototype.greaterThanMax = function () {
        return this.date && this.max && this.dateService.compareDates(this.monthStart(), this.max) > 0;
    };
    NbCalendarRangeMonthCellComponent.prototype.monthStart = function () {
        return this.dateService.getMonthStart(this.date);
    };
    NbCalendarRangeMonthCellComponent.prototype.monthEnd = function () {
        return this.dateService.getMonthEnd(this.date);
    };
    NbCalendarRangeMonthCellComponent.prototype.isInRage = function (date, range) {
        if (range.start && range.end) {
            var cellDate = this.dateService.getMonthStart(date);
            var start = this.dateService.getMonthStart(range.start);
            var end = this.dateService.getMonthStart(range.end);
            var isGreaterThanStart = this.dateService.compareDates(cellDate, start) >= 0;
            var isLessThanEnd = this.dateService.compareDates(cellDate, end) <= 0;
            return isGreaterThanStart && isLessThanEnd;
        }
        return this.dateService.isSameMonth(date, range.start);
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeMonthCellComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeMonthCellComponent.prototype, "visibleDate", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeMonthCellComponent.prototype, "selectedValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeMonthCellComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeMonthCellComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarRangeMonthCellComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbCalendarRangeMonthCellComponent.prototype, "select", void 0);
    tslib.__decorate([
        i0.HostBinding('class.month-cell'),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeMonthCellComponent.prototype, "monthCellClass", void 0);
    tslib.__decorate([
        i0.HostBinding('class.range-cell'),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeMonthCellComponent.prototype, "rangeCellClass", void 0);
    tslib.__decorate([
        i0.HostBinding('class.selected'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeMonthCellComponent.prototype, "selected", null);
    tslib.__decorate([
        i0.HostBinding('class.in-range'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeMonthCellComponent.prototype, "inRange", null);
    tslib.__decorate([
        i0.HostBinding('class.start'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeMonthCellComponent.prototype, "rangeStart", null);
    tslib.__decorate([
        i0.HostBinding('class.end'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeMonthCellComponent.prototype, "rangeEnd", null);
    tslib.__decorate([
        i0.HostBinding('class.today'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeMonthCellComponent.prototype, "today", null);
    tslib.__decorate([
        i0.HostBinding('class.disabled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeMonthCellComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbCalendarRangeMonthCellComponent.prototype, "isLarge", null);
    tslib.__decorate([
        i0.HostListener('click'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbCalendarRangeMonthCellComponent.prototype, "onClick", null);
    NbCalendarRangeMonthCellComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-range-month-cell',
            template: "\n    <div class=\"cell-content\">\n      {{ month }}\n    </div>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbCalendarRangeMonthCellComponent);
    return NbCalendarRangeMonthCellComponent;
}(NbBaseCalendarRangeCell));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * CalendarRange component provides a capability to choose a date range.
 *
 * ```html
 * <nb-calendar [(date)]="date"></nb-calendar>
 * <nb-calendar [date]="date" (dateChange)="handleDateChange($event)"></nb-calendar>
 * ```
 *
 * Basic usage example
 * @stacked-example(Range, calendar/calendar-range-showcase.component)
 *
 * ### Installation
 *
 * Import `NbCalendarRangeModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbCalendarRangeModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 *
 * ### Usage
 *
 * CalendarRange component supports all of the Calendar component customization properties. More defails can be found
 * in the [Calendar component docs](docs/components/calendar).
 *
 * @styles
 *
 * calendar-width:
 * calendar-background-color:
 * calendar-border-color:
 * calendar-border-style:
 * calendar-border-width:
 * calendar-border-radius:
 * calendar-text-color:
 * calendar-text-font-family:
 * calendar-text-font-size:
 * calendar-text-font-weight:
 * calendar-text-line-height:
 * calendar-picker-padding-top:
 * calendar-picker-padding-bottom:
 * calendar-picker-padding-start:
 * calendar-picker-padding-end:
 * calendar-navigation-text-color:
 * calendar-navigation-text-font-family:
 * calendar-navigation-title-text-font-size:
 * calendar-navigation-title-text-font-weight:
 * calendar-navigation-title-text-line-height:
 * calendar-navigation-padding:
 * calendar-cell-inactive-text-color:
 * calendar-cell-disabled-text-color:
 * calendar-cell-hover-background-color:
 * calendar-cell-hover-border-color:
 * calendar-cell-hover-text-color:
 * calendar-cell-hover-text-font-size:
 * calendar-cell-hover-text-font-weight:
 * calendar-cell-hover-text-line-height:
 * calendar-cell-active-background-color:
 * calendar-cell-active-border-color:
 * calendar-cell-active-text-color:
 * calendar-cell-active-text-font-size:
 * calendar-cell-active-text-font-weight:
 * calendar-cell-active-text-line-height:
 * calendar-cell-today-background-color:
 * calendar-cell-today-border-color:
 * calendar-cell-today-text-color:
 * calendar-cell-today-text-font-size:
 * calendar-cell-today-text-font-weight:
 * calendar-cell-today-text-line-height:
 * calendar-cell-today-hover-background-color:
 * calendar-cell-today-hover-border-color:
 * calendar-cell-today-active-background-color:
 * calendar-cell-today-active-border-color:
 * calendar-cell-today-disabled-border-color:
 * calendar-cell-today-selected-background-color:
 * calendar-cell-today-selected-border-color:
 * calendar-cell-today-selected-text-color:
 * calendar-cell-today-selected-hover-background-color:
 * calendar-cell-today-selected-hover-border-color:
 * calendar-cell-today-selected-active-background-color:
 * calendar-cell-today-selected-active-border-color:
 * calendar-cell-today-in-range-background-color:
 * calendar-cell-today-in-range-border-color:
 * calendar-cell-today-in-range-text-color:
 * calendar-cell-today-in-range-hover-background-color:
 * calendar-cell-today-in-range-hover-border-color:
 * calendar-cell-today-in-range-active-background-color:
 * calendar-cell-today-in-range-active-border-color:
 * calendar-cell-selected-background-color:
 * calendar-cell-selected-border-color:
 * calendar-cell-selected-text-color:
 * calendar-cell-selected-text-font-size:
 * calendar-cell-selected-text-font-weight:
 * calendar-cell-selected-text-line-height:
 * calendar-cell-selected-hover-background-color:
 * calendar-cell-selected-hover-border-color:
 * calendar-cell-selected-active-background-color:
 * calendar-cell-selected-active-border-color:
 * calendar-day-cell-width:
 * calendar-day-cell-height:
 * calendar-month-cell-width:
 * calendar-month-cell-height:
 * calendar-year-cell-width:
 * calendar-year-cell-height:
 * calendar-weekday-background:
 * calendar-weekday-divider-color:
 * calendar-weekday-divider-width:
 * calendar-weekday-text-color:
 * calendar-weekday-text-font-size:
 * calendar-weekday-text-font-weight:
 * calendar-weekday-text-line-height:
 * calendar-weekday-holiday-text-color:
 * calendar-weekday-height:
 * calendar-weekday-width:
 * calendar-weeknumber-background:
 * calendar-weeknumber-divider-color:
 * calendar-weeknumber-divider-width:
 * calendar-weeknumber-text-color:
 * calendar-weeknumber-text-font-size:
 * calendar-weeknumber-text-font-weight:
 * calendar-weeknumber-text-line-height:
 * calendar-weeknumber-height:
 * calendar-weeknumber-width:
 * calendar-large-width:
 * calendar-day-cell-large-width:
 * calendar-day-cell-large-height:
 * calendar-weekday-large-height:
 * calendar-weekday-large-width:
 * calendar-weeknumber-large-height:
 * calendar-weeknumber-large-width:
 * calendar-month-cell-large-width:
 * calendar-month-cell-large-height:
 * calendar-year-cell-large-width:
 * calendar-year-cell-large-height:
 * */
var NbCalendarRangeComponent = /** @class */ (function () {
    function NbCalendarRangeComponent(dateService) {
        this.dateService = dateService;
        /**
         * Defines if we should render previous and next months
         * in the current month view.
         * */
        this.boundingMonth = true;
        /**
         * Defines starting view for the calendar.
         * */
        this.startView = exports.NbCalendarViewMode.DATE;
        this.dayCellComponent = NbCalendarRangeDayCellComponent;
        /**
         * Custom month cell component. Have to implement `NbCalendarCell` interface.
         * */
        this.monthCellComponent = NbCalendarRangeMonthCellComponent;
        this.yearCellComponent = NbCalendarRangeYearCellComponent;
        /**
         * Size of the calendar and entire components.
         * Can be 'medium' which is default or 'large'.
         * */
        this.size = exports.NbCalendarSize.MEDIUM;
        /**
         * Determines should we show calendars navigation or not.
         * */
        this.showNavigation = true;
        this._showWeekNumber = false;
        /**
         * Sets symbol used as a header for week numbers column
         * */
        this.weekNumberSymbol = '#';
        /**
         * Emits range when start selected and emits again when end selected.
         * */
        this.rangeChange = new i0.EventEmitter();
    }
    Object.defineProperty(NbCalendarRangeComponent.prototype, "_cellComponent", {
        /**
         * Custom day cell component. Have to implement `NbCalendarCell` interface.
         * */
        set: function (cellComponent) {
            if (cellComponent) {
                this.dayCellComponent = cellComponent;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeComponent.prototype, "_yearCellComponent", {
        /**
         * Custom year cell component. Have to implement `NbCalendarCell` interface.
         * */
        set: function (cellComponent) {
            if (cellComponent) {
                this.yearCellComponent = cellComponent;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCalendarRangeComponent.prototype, "showWeekNumber", {
        /**
         * Determines should we show week numbers column.
         * False by default.
         * */
        get: function () {
            return this._showWeekNumber;
        },
        set: function (value) {
            this._showWeekNumber = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NbCalendarRangeComponent.prototype.onChange = function (date) {
        this.initDateIfNull();
        this.handleSelected(date);
    };
    NbCalendarRangeComponent.prototype.initDateIfNull = function () {
        if (!this.range) {
            this.range = { start: null, end: null };
        }
    };
    NbCalendarRangeComponent.prototype.handleSelected = function (date) {
        if (this.selectionStarted()) {
            this.selectEnd(date);
        }
        else {
            this.selectStart(date);
        }
    };
    NbCalendarRangeComponent.prototype.selectionStarted = function () {
        var _a = this.range, start = _a.start, end = _a.end;
        return start && !end;
    };
    NbCalendarRangeComponent.prototype.selectStart = function (start) {
        this.selectRange({ start: start });
    };
    NbCalendarRangeComponent.prototype.selectEnd = function (date) {
        var start = this.range.start;
        if (this.dateService.compareDates(date, start) > 0) {
            this.selectRange({ start: start, end: date });
        }
        else {
            this.selectRange({ start: date, end: start });
        }
    };
    NbCalendarRangeComponent.prototype.selectRange = function (range) {
        this.range = range;
        this.rangeChange.emit(range);
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbCalendarRangeComponent.prototype, "boundingMonth", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarRangeComponent.prototype, "startView", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Function)
    ], NbCalendarRangeComponent.prototype, "filter", void 0);
    tslib.__decorate([
        i0.Input('dayCellComponent'),
        tslib.__metadata("design:type", i0.Type),
        tslib.__metadata("design:paramtypes", [i0.Type])
    ], NbCalendarRangeComponent.prototype, "_cellComponent", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.Type)
    ], NbCalendarRangeComponent.prototype, "monthCellComponent", void 0);
    tslib.__decorate([
        i0.Input('yearCellComponent'),
        tslib.__metadata("design:type", i0.Type),
        tslib.__metadata("design:paramtypes", [i0.Type])
    ], NbCalendarRangeComponent.prototype, "_yearCellComponent", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarRangeComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeComponent.prototype, "visibleDate", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbCalendarRangeComponent.prototype, "showNavigation", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbCalendarRangeComponent.prototype, "range", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbCalendarRangeComponent.prototype, "showWeekNumber", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbCalendarRangeComponent.prototype, "weekNumberSymbol", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbCalendarRangeComponent.prototype, "rangeChange", void 0);
    NbCalendarRangeComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-calendar-range',
            template: "\n    <nb-base-calendar\n      [date]=\"range\"\n      (dateChange)=\"onChange($any($event))\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [filter]=\"filter\"\n      [startView]=\"startView\"\n      [boundingMonth]=\"boundingMonth\"\n      [dayCellComponent]=\"dayCellComponent\"\n      [monthCellComponent]=\"monthCellComponent\"\n      [yearCellComponent]=\"yearCellComponent\"\n      [visibleDate]=\"visibleDate\"\n      [showNavigation]=\"showNavigation\"\n      [size]=\"size\"\n      [showWeekNumber]=\"showWeekNumber\"\n      [weekNumberSymbol]=\"weekNumberSymbol\"\n    ></nb-base-calendar>\n  "
        }),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbCalendarRangeComponent);
    return NbCalendarRangeComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCalendarRangeModule = /** @class */ (function () {
    function NbCalendarRangeModule() {
    }
    NbCalendarRangeModule = tslib.__decorate([
        i0.NgModule({
            imports: [NbBaseCalendarModule],
            exports: [NbCalendarRangeComponent],
            declarations: [
                NbCalendarRangeComponent,
                NbCalendarRangeDayCellComponent,
                NbCalendarRangeYearCellComponent,
                NbCalendarRangeMonthCellComponent,
            ],
            entryComponents: [
                NbCalendarRangeDayCellComponent,
                NbCalendarRangeMonthCellComponent,
                NbCalendarRangeYearCellComponent,
            ],
        })
    ], NbCalendarRangeModule);
    return NbCalendarRangeModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
function isUrlPathEqual(path, link) {
    var locationPath = getPathPartOfUrl(path);
    return link === locationPath;
}
function isUrlPathContain(path, link) {
    var locationPath = getPathPartOfUrl(path);
    var endOfUrlSegmentRegExp = /\/|^$/;
    return locationPath.startsWith(link) &&
        locationPath.slice(link.length).charAt(0).search(endOfUrlSegmentRegExp) !== -1;
}
function getPathPartOfUrl(url) {
    return url.match(/.*?(?=[?;#]|$)/)[0];
}
function getFragmentPartOfUrl(url) {
    var matched = url.match(/#(.+)/);
    return matched ? matched[1] : '';
}
function isFragmentEqual(path, fragment) {
    return getFragmentPartOfUrl(path) === fragment;
}
function isFragmentContain(path, fragment) {
    return getFragmentPartOfUrl(path).includes(fragment);
}

/**
 * This service determines whether we should scroll the layout back to top.
 * This occurs when the page is changed, so when current url PATH is not equal to the previous one.
 *
 *  TODO: this is most likely a temporary solutions as recently Angular introduces ViewportScroll
 *  and scroll restoration process
 */
var NbRestoreScrollTopHelper = /** @class */ (function () {
    function NbRestoreScrollTopHelper(router) {
        this.router = router;
    }
    NbRestoreScrollTopHelper.prototype.shouldRestore = function () {
        var _this = this;
        return this.router.events
            .pipe(rxjs_operators.startWith(null), rxjs_operators.filter(function (event) { return event === null || event instanceof _angular_router.NavigationEnd; }), rxjs_operators.pairwise(), rxjs_operators.map(function (_a) {
            var prev = _a[0], current = _a[1];
            return _this.pageChanged(prev, current);
        }), rxjs_operators.filter(function (res) { return !!res; }));
    };
    NbRestoreScrollTopHelper.prototype.pageChanged = function (prev, current) {
        return !prev || getPathPartOfUrl(prev.url) !== getPathPartOfUrl(current.url);
    };
    NbRestoreScrollTopHelper = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [_angular_router.Router])
    ], NbRestoreScrollTopHelper);
    return NbRestoreScrollTopHelper;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Layout container component.
 * When using with Nebular Theme System it is required that all child components should be placed inside.
 *
 * Basic example of two column layout with header:
 *
 * @stacked-example(Showcase, layout/layout-showcase.component)
 *
 * Can contain the following components inside:
 *
 * ```html
 * <nb-layout>
 *  <nb-layout-header></nb-layout-header>
 *  <nb-layout-footer></nb-layout-footer>
 *  <nb-layout-column></nb-layout-column>
 *  <nb-sidebar></nb-sidebar>
 * </nb-layout>
 * ```
 * ### Installation
 *
 * Import `NbLayoutModule` to your app module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbLayoutModule,
 *   ],
 * })
 * export class AppModule { }
 * ```
 * ### Usage
 * By default the layout fills up the whole view-port.
 * The window scrollbars are disabled on the body and moved inside of the nb-layout, so that the scrollbars
 * won't mess with the fixed nb-header.
 *
 * The child components are projected into a flexible layout structure allowing to adjust the layout behavior
 * based on the settings provided.
 *
 * The layout content (columns) becomes centered when the window width is more than
 * the value specified in the theme variable `layout-content-width`.
 *
 * The layout also contains the area on the very top (the first child of the nb-layout), which could be used
 * to dynamically append some components like modals or spinners/loaders
 * so that they are located on top of the elements hierarchy.
 * More details are under the `ThemeService` section.
 *
 * The layout component is also responsible for changing application themes.
 * It listens to the `themeChange` event and change a theme CSS class appended to body.
 * Based on the class appended, specific CSS-theme is applied to the application.
 * More details of the Theme System could be found here [Enabling Theme System](#/docs/concepts/theme-system)
 *
 * A simple layout with footer:
 *
 * @stacked-example(Layout With Footer, layout/layout-w-footer.component)
 *
 * It is possible to ask the layout to center the columns (notice: we added a `center` attribute
 * to the layout:
 *
 * ```html
 * <nb-layout center>
 *   <nb-layout-header>Awesome Company</nb-layout-header>
 *
 *   <nb-layout-column>
 *     Hello World!
 *   </nb-layout-column>
 *
 *   <nb-layout-footer>Contact us</nb-layout-footer>
 * </nb-layout>
 * ```
 *
 * @styles
 *
 * layout-background-color:
 * layout-text-color:
 * layout-text-font-family:
 * layout-text-font-size:
 * layout-text-font-weight:
 * layout-text-line-height:
 * layout-min-height:
 * layout-content-width:
 * layout-window-mode-min-width:
 * layout-window-mode-max-width:
 * layout-window-mode-background-color:
 * layout-window-mode-padding-top:
 * layout-window-shadow:
 * layout-padding:
 * layout-medium-padding:
 * layout-small-padding:
 * layout-scrollbar-background-color:
 * layout-scrollbar-color:
 * layout-scrollbar-width:
 */
var NbLayoutComponent = /** @class */ (function () {
    function NbLayoutComponent(themeService, spinnerService, elementRef, renderer, window, document, platformId, layoutDirectionService, scrollService, rulerService, scrollTop, overlayContainer) {
        var _this = this;
        this.themeService = themeService;
        this.spinnerService = spinnerService;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.window = window;
        this.document = document;
        this.platformId = platformId;
        this.layoutDirectionService = layoutDirectionService;
        this.scrollService = scrollService;
        this.rulerService = rulerService;
        this.scrollTop = scrollTop;
        this.overlayContainer = overlayContainer;
        this.scrollBlockClass = 'nb-global-scrollblock';
        this.isScrollBlocked = false;
        this.centerValue = false;
        this.restoreScrollTopValue = true;
        this.windowModeValue = false;
        this.withScrollValue = false;
        this.withSubheader = false;
        this.afterViewInit$ = new rxjs.BehaviorSubject(null);
        this.destroy$ = new rxjs.Subject();
        this.registerAsOverlayContainer();
        this.themeService.onThemeChange()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (theme) {
            var body = _this.document.getElementsByTagName('body')[0];
            if (theme.previous) {
                _this.renderer.removeClass(body, "nb-theme-" + theme.previous);
            }
            _this.renderer.addClass(body, "nb-theme-" + theme.name);
        });
        this.themeService.onAppendLayoutClass()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (className) {
            _this.renderer.addClass(_this.elementRef.nativeElement, className);
        });
        this.themeService.onRemoveLayoutClass()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (className) {
            _this.renderer.removeClass(_this.elementRef.nativeElement, className);
        });
        this.spinnerService.registerLoader(new Promise(function (resolve, reject) {
            _this.afterViewInit$
                .pipe(rxjs_operators.takeUntil(_this.destroy$))
                .subscribe(function (_) { return resolve(); });
        }));
        this.spinnerService.load();
        this.rulerService.onGetDimensions()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (_a) {
            var listener = _a.listener;
            listener.next(_this.getDimensions());
            listener.complete();
        });
        this.scrollService
            .onScrollableChange()
            .pipe(rxjs_operators.filter(function () { return _this.withScrollValue; }))
            .subscribe(function (scrollable) {
            /**
             * In case when Nebular Layout custom scroll `withScroll` mode is enabled
             * we need to disable default CDK scroll blocker (@link NbBlockScrollStrategyAdapter) on HTML element
             * so that it won't add additional positioning.
             */
            if (scrollable) {
                _this.enableScroll();
            }
            else {
                _this.blockScroll();
            }
        });
        if (_angular_common.isPlatformBrowser(this.platformId)) {
            // trigger first time so that after the change we have the initial value
            this.themeService.changeWindowWidth(this.window.innerWidth);
        }
    }
    Object.defineProperty(NbLayoutComponent.prototype, "center", {
        /**
         * Defines whether the layout columns will be centered after some width
         * @param {boolean} val
         */
        set: function (val) {
            this.centerValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbLayoutComponent.prototype, "windowMode", {
        /**
         * Defines whether the layout enters a 'window' mode, when the layout content (including sidebars and fixed header)
         * becomes centered by width with a margin from the top of the screen, like a floating window.
         * Automatically enables `withScroll` mode, as in the window mode scroll must be inside the layout and cannot be on
         * window. (TODO: check this)
         * @param {boolean} val
         */
        set: function (val) {
            this.windowModeValue = convertToBoolProperty(val);
            this.withScroll = this.windowModeValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbLayoutComponent.prototype, "withScroll", {
        /**
         * Defines whether to move the scrollbars to layout or leave it at the body level.
         * Automatically set to true when `windowMode` is enabled.
         * @param {boolean} val
         */
        set: function (val) {
            this.withScrollValue = convertToBoolProperty(val);
            // TODO: is this the best way of doing it? as we don't have access to body from theme styles
            // TODO: add e2e test
            var body = this.document.getElementsByTagName('body')[0];
            if (this.withScrollValue) {
                this.renderer.setStyle(body, 'overflow', 'hidden');
            }
            else {
                this.renderer.setStyle(body, 'overflow', 'initial');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbLayoutComponent.prototype, "restoreScrollTop", {
        /**
         * Restores scroll to the top of the page after navigation
         * @param {boolean} val
         */
        set: function (val) {
            this.restoreScrollTopValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    NbLayoutComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.scrollService.onGetPosition()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (_a) {
            var listener = _a.listener;
            listener.next(_this.getScrollPosition());
            listener.complete();
        });
        this.scrollTop.shouldRestore()
            .pipe(rxjs_operators.filter(function () { return _this.restoreScrollTopValue; }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.scroll(0, 0); });
        this.layoutDirectionService.onDirectionChange()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (direction) { return _this.document.dir = direction; });
        this.scrollService.onManualScroll()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (_a) {
            var x = _a.x, y = _a.y;
            return _this.scroll(x, y);
        });
        this.afterViewInit$.next(true);
    };
    NbLayoutComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
        this.unregisterAsOverlayContainer();
    };
    NbLayoutComponent.prototype.onScroll = function ($event) {
        this.scrollService.fireScrollChange($event);
    };
    NbLayoutComponent.prototype.onResize = function (event) {
        this.themeService.changeWindowWidth(event.target.innerWidth);
    };
    /**
     * Returns scroll and client height/width
     *
     * Depending on the current scroll mode (`withScroll=true`) returns sizes from the body element
     * or from the `.scrollable-container`
     * @returns {NbLayoutDimensions}
     */
    NbLayoutComponent.prototype.getDimensions = function () {
        var clientWidth, clientHeight, scrollWidth, scrollHeight = 0;
        if (this.withScrollValue) {
            var container = this.scrollableContainerRef.nativeElement;
            clientWidth = container.clientWidth;
            clientHeight = container.clientHeight;
            scrollWidth = container.scrollWidth;
            scrollHeight = container.scrollHeight;
        }
        else {
            var _a = this.document, documentElement = _a.documentElement, body = _a.body;
            clientWidth = documentElement.clientWidth || body.clientWidth;
            clientHeight = documentElement.clientHeight || body.clientHeight;
            scrollWidth = documentElement.scrollWidth || body.scrollWidth;
            scrollHeight = documentElement.scrollHeight || body.scrollHeight;
        }
        return {
            clientWidth: clientWidth,
            clientHeight: clientHeight,
            scrollWidth: scrollWidth,
            scrollHeight: scrollHeight,
        };
    };
    /**
     * Returns scroll position of current scroll container.
     *
     * If `withScroll` = true, returns scroll position of the `.scrollable-container` element,
     * otherwise - of the scrollable element of the window (which may be different depending of a browser)
     *
     * @returns {NbScrollPosition}
     */
    NbLayoutComponent.prototype.getScrollPosition = function () {
        if (!_angular_common.isPlatformBrowser(this.platformId)) {
            return { x: 0, y: 0 };
        }
        if (this.withScrollValue) {
            var container = this.scrollableContainerRef.nativeElement;
            return { x: container.scrollLeft, y: container.scrollTop };
        }
        var documentRect = this.document.documentElement.getBoundingClientRect();
        var x = -documentRect.left || this.document.body.scrollLeft || this.window.scrollX ||
            this.document.documentElement.scrollLeft || 0;
        var y = -documentRect.top || this.document.body.scrollTop || this.window.scrollY ||
            this.document.documentElement.scrollTop || 0;
        return { x: x, y: y };
    };
    NbLayoutComponent.prototype.registerAsOverlayContainer = function () {
        if (this.overlayContainer.setContainer) {
            this.overlayContainer.setContainer(this.elementRef.nativeElement);
        }
    };
    NbLayoutComponent.prototype.unregisterAsOverlayContainer = function () {
        if (this.overlayContainer.clearContainer) {
            this.overlayContainer.clearContainer();
        }
    };
    NbLayoutComponent.prototype.scroll = function (x, y) {
        if (x === void 0) { x = null; }
        if (y === void 0) { y = null; }
        var _a = this.getScrollPosition(), currentX = _a.x, currentY = _a.y;
        x = x == null ? currentX : x;
        y = y == null ? currentY : y;
        if (!_angular_common.isPlatformBrowser(this.platformId)) {
            return;
        }
        if (this.withScrollValue) {
            var scrollable = this.scrollableContainerRef.nativeElement;
            if (scrollable.scrollTo) {
                scrollable.scrollTo(x, y);
            }
            else {
                scrollable.scrollLeft = x;
                scrollable.scrollTop = y;
            }
        }
        else {
            this.window.scrollTo(x, y);
        }
    };
    // TODO: Extract into block scroll strategy
    NbLayoutComponent.prototype.blockScroll = function () {
        if (this.isScrollBlocked) {
            return;
        }
        this.isScrollBlocked = true;
        this.renderer.addClass(this.document.documentElement, this.scrollBlockClass);
        var scrollableContainerElement = this.scrollableContainerRef.nativeElement;
        var layoutElement = this.layoutContainerRef.nativeElement;
        var layoutWithScrollWidth = layoutElement.clientWidth;
        this.scrollableContainerOverflowOldValue = scrollableContainerElement.style.overflow;
        scrollableContainerElement.style.overflow = 'hidden';
        var layoutWithoutScrollWidth = layoutElement.clientWidth;
        var scrollWidth = layoutWithoutScrollWidth - layoutWithScrollWidth;
        if (!scrollWidth) {
            return;
        }
        this.layoutPaddingOldValue = {
            left: layoutElement.style.paddingLeft,
            right: layoutElement.style.paddingRight,
        };
        if (this.layoutDirectionService.isLtr()) {
            layoutElement.style.paddingRight = scrollWidth + "px";
        }
        else {
            layoutElement.style.paddingLeft = scrollWidth + "px";
        }
    };
    NbLayoutComponent.prototype.enableScroll = function () {
        if (this.isScrollBlocked) {
            this.isScrollBlocked = false;
            this.renderer.removeClass(this.document.documentElement, this.scrollBlockClass);
            this.scrollableContainerRef.nativeElement.style.overflow = this.scrollableContainerOverflowOldValue;
            if (this.layoutPaddingOldValue) {
                var layoutElement = this.layoutContainerRef.nativeElement;
                layoutElement.style.paddingLeft = this.layoutPaddingOldValue.left;
                layoutElement.style.paddingRight = this.layoutPaddingOldValue.right;
                this.layoutPaddingOldValue = null;
            }
        }
    };
    tslib.__decorate([
        i0.HostBinding('class.window-mode'),
        tslib.__metadata("design:type", Boolean)
    ], NbLayoutComponent.prototype, "windowModeValue", void 0);
    tslib.__decorate([
        i0.HostBinding('class.with-scroll'),
        tslib.__metadata("design:type", Boolean)
    ], NbLayoutComponent.prototype, "withScrollValue", void 0);
    tslib.__decorate([
        i0.HostBinding('class.with-subheader'),
        tslib.__metadata("design:type", Boolean)
    ], NbLayoutComponent.prototype, "withSubheader", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbLayoutComponent.prototype, "center", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbLayoutComponent.prototype, "windowMode", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbLayoutComponent.prototype, "withScroll", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbLayoutComponent.prototype, "restoreScrollTop", null);
    tslib.__decorate([
        i0.ViewChild('layoutTopDynamicArea', { read: i0.ViewContainerRef }),
        tslib.__metadata("design:type", i0.ViewContainerRef)
    ], NbLayoutComponent.prototype, "veryTopRef", void 0);
    tslib.__decorate([
        i0.ViewChild('scrollableContainer', { read: i0.ElementRef }),
        tslib.__metadata("design:type", i0.ElementRef)
    ], NbLayoutComponent.prototype, "scrollableContainerRef", void 0);
    tslib.__decorate([
        i0.ViewChild('layoutContainer', { read: i0.ElementRef }),
        tslib.__metadata("design:type", i0.ElementRef)
    ], NbLayoutComponent.prototype, "layoutContainerRef", void 0);
    tslib.__decorate([
        i0.HostListener('window:scroll', ['$event']),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], NbLayoutComponent.prototype, "onScroll", null);
    tslib.__decorate([
        i0.HostListener('window:resize', ['$event']),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], NbLayoutComponent.prototype, "onResize", null);
    NbLayoutComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-layout',
            template: "\n    <div class=\"scrollable-container\" #scrollableContainer (scroll)=\"onScroll($event)\">\n      <div class=\"layout\" #layoutContainer>\n        <ng-content select=\"nb-layout-header:not([subheader])\"></ng-content>\n        <div class=\"layout-container\">\n          <ng-content select=\"nb-sidebar\"></ng-content>\n          <div class=\"content\" [class.center]=\"centerValue\">\n            <ng-content select=\"nb-layout-header[subheader]\"></ng-content>\n            <div class=\"columns\">\n              <ng-content select=\"nb-layout-column\"></ng-content>\n            </div>\n            <ng-content select=\"nb-layout-footer\"></ng-content>\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
            styles: [":host{-webkit-font-smoothing:antialiased}[dir=ltr] :host{text-align:left}[dir=rtl] :host{text-align:right}:host .layout{display:flex;flex-direction:column}:host ::ng-deep nb-layout-header{display:block}:host ::ng-deep nb-layout-header nav{align-items:center;justify-content:flex-start;display:flex}:host ::ng-deep nb-layout-header.fixed{position:fixed;top:0;left:0;right:0;z-index:1040}:host .layout-container{display:flex;flex:1;-ms-flex:1 1 auto;flex-direction:row}[dir=ltr] :host .layout-container ::ng-deep nb-sidebar.left{order:0}[dir=rtl] :host .layout-container ::ng-deep nb-sidebar.left{order:2}[dir=ltr] :host .layout-container ::ng-deep nb-sidebar.right{order:2}[dir=rtl] :host .layout-container ::ng-deep nb-sidebar.right{order:0}:host .layout-container ::ng-deep nb-sidebar.end{order:2}:host .layout-container ::ng-deep nb-sidebar .fixed{position:fixed;width:100%;overflow-y:auto;height:100%}:host .layout-container .content{display:flex;flex:1;-ms-flex:1 1 auto;flex-direction:column;min-width:0}:host .layout-container .content.center{max-width:100%;position:relative;margin-left:auto;margin-right:auto}:host .layout-container .content .columns{display:flex;flex:1;-ms-flex:1 1 auto;flex-direction:row;width:100%}:host .layout-container .content .columns ::ng-deep nb-layout-column{order:1;flex:1 0;min-width:0}[dir=ltr] :host .layout-container .content .columns ::ng-deep nb-layout-column.left{order:0}[dir=rtl] :host .layout-container .content .columns ::ng-deep nb-layout-column.left{order:2}:host .layout-container .content .columns ::ng-deep nb-layout-column.start{order:0}:host .layout-container .content ::ng-deep nb-layout-footer{display:block;margin-top:auto}:host .layout-container .content ::ng-deep nb-layout-footer nav{justify-content:center;display:flex}\n"]
        }),
        tslib.__param(4, i0.Inject(NB_WINDOW)),
        tslib.__param(5, i0.Inject(NB_DOCUMENT)),
        tslib.__param(6, i0.Inject(i0.PLATFORM_ID)),
        tslib.__metadata("design:paramtypes", [NbThemeService,
            NbSpinnerService,
            i0.ElementRef,
            i0.Renderer2, Object, Object, Object,
            NbLayoutDirectionService,
            NbLayoutScrollService,
            NbLayoutRulerService,
            NbRestoreScrollTopHelper,
            NbOverlayContainerAdapter])
    ], NbLayoutComponent);
    return NbLayoutComponent;
}());
/**
 * A container component which determines a content position inside of the layout.
 * The layout could contain unlimited columns (not including the sidebars).
 *
 * By default the columns are ordered from the left to the right,
 * but it's also possible to overwrite this behavior by setting a `left` attribute to the column,
 * moving it to the very first position:
 *
 * @stacked-example(Column Left, layout/layout-column-left.component)
 */
var NbLayoutColumnComponent = /** @class */ (function () {
    function NbLayoutColumnComponent() {
    }
    Object.defineProperty(NbLayoutColumnComponent.prototype, "left", {
        /**
         * Move the column to the very left position in the layout.
         * @param {boolean} val
         */
        set: function (val) {
            this.leftValue = convertToBoolProperty(val);
            this.startValue = false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbLayoutColumnComponent.prototype, "start", {
        /**
         * Make column first in the layout.
         * @param {boolean} val
         */
        set: function (val) {
            this.startValue = convertToBoolProperty(val);
            this.leftValue = false;
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.HostBinding('class.left'),
        tslib.__metadata("design:type", Boolean)
    ], NbLayoutColumnComponent.prototype, "leftValue", void 0);
    tslib.__decorate([
        i0.HostBinding('class.start'),
        tslib.__metadata("design:type", Boolean)
    ], NbLayoutColumnComponent.prototype, "startValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbLayoutColumnComponent.prototype, "left", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbLayoutColumnComponent.prototype, "start", null);
    NbLayoutColumnComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-layout-column',
            template: "\n    <ng-content></ng-content>\n  "
        })
    ], NbLayoutColumnComponent);
    return NbLayoutColumnComponent;
}());
/**
 * Page header component.
 * Located on top of the page above the layout columns and sidebars.
 * Could be made `fixed` by setting the corresponding property. In the fixed mode the header becomes
 * sticky to the top of the nb-layout (to of the page). Here's an example:
 *
 * @stacked-example(Fixed Header, layout/layout-fixed-header.component)
 *
 * In a pair with sidebar it is possible to setup a configuration when header is placed on a side of the sidebar
 * and not on top of it. To achieve this simply put a `subheader` property to the header like this:
 * ```html
 * <nb-layout-header subheader></nb-layout-header>
 * ```
 * @stacked-example(Subheader, layout/layout-sidebar-subheader.component)
 * Note that in such configuration sidebar shadow is removed and header cannot be make `fixed`.
 *
 * Same way you can put both `fixed` and `clipped` headers adding creating a sub-header for your app:
 *
 * @stacked-example(Subheader, layout/layout-subheader.component)
 *
 * @styles
 *
 * header-background-color:
 * header-text-color:
 * header-text-font-family:
 * header-text-font-size:
 * header-text-font-weight:
 * header-text-line-height:
 * header-height:
 * header-padding:
 * header-shadow:
 */
var NbLayoutHeaderComponent = /** @class */ (function () {
    function NbLayoutHeaderComponent(layout) {
        this.layout = layout;
    }
    Object.defineProperty(NbLayoutHeaderComponent.prototype, "fixed", {
        /**
         * Makes the header sticky to the top of the nb-layout.
         * @param {boolean} val
         */
        set: function (val) {
            this.fixedValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbLayoutHeaderComponent.prototype, "subheader", {
        /**
         * Places header on a side of the sidebar, and not above.
         * Disables fixed mode for this header and remove a shadow from the sidebar.
         * @param {boolean} val
         */
        set: function (val) {
            this.subheaderValue = convertToBoolProperty(val);
            this.fixedValue = false;
            this.layout.withSubheader = this.subheaderValue;
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.HostBinding('class.fixed'),
        tslib.__metadata("design:type", Boolean)
    ], NbLayoutHeaderComponent.prototype, "fixedValue", void 0);
    tslib.__decorate([
        i0.HostBinding('class.subheader'),
        tslib.__metadata("design:type", Boolean)
    ], NbLayoutHeaderComponent.prototype, "subheaderValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbLayoutHeaderComponent.prototype, "fixed", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbLayoutHeaderComponent.prototype, "subheader", null);
    NbLayoutHeaderComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-layout-header',
            template: "\n    <nav [class.fixed]=\"fixedValue\">\n      <ng-content></ng-content>\n    </nav>\n  "
        }),
        tslib.__metadata("design:paramtypes", [NbLayoutComponent])
    ], NbLayoutHeaderComponent);
    return NbLayoutHeaderComponent;
}());
/**
 * Page footer.
 * Located under the nb-layout content (specifically, under the columns).
 * Could be made `fixed`, becoming sticky to the bottom of the view port (window).
 *
 * @styles
 *
 * footer-background-color:
 * footer-text-color:
 * footer-text-font-family:
 * footer-text-font-size:
 * footer-text-font-weight:
 * footer-text-line-height:
 * footer-text-highlight-color:
 * footer-height:
 * footer-padding:
 * footer-divider-color:
 * footer-divider-style:
 * footer-divider-width:
 * footer-shadow:
 */
var NbLayoutFooterComponent = /** @class */ (function () {
    function NbLayoutFooterComponent() {
    }
    Object.defineProperty(NbLayoutFooterComponent.prototype, "fixed", {
        /**
         * Makes the footer sticky to the bottom of the window.
         * @param {boolean} val
         */
        set: function (val) {
            this.fixedValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.HostBinding('class.fixed'),
        tslib.__metadata("design:type", Boolean)
    ], NbLayoutFooterComponent.prototype, "fixedValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbLayoutFooterComponent.prototype, "fixed", null);
    NbLayoutFooterComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-layout-footer',
            template: "\n    <nav [class.fixed]=\"fixedValue\">\n      <ng-content></ng-content>\n    </nav>\n  "
        })
    ], NbLayoutFooterComponent);
    return NbLayoutFooterComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_LAYOUT_COMPONENTS = [
    NbLayoutComponent,
    NbLayoutColumnComponent,
    NbLayoutFooterComponent,
    NbLayoutHeaderComponent,
];
var NbLayoutModule = /** @class */ (function () {
    function NbLayoutModule() {
    }
    NbLayoutModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
            ],
            declarations: tslib.__spreadArrays(NB_LAYOUT_COMPONENTS),
            providers: [
                NbRestoreScrollTopHelper,
            ],
            exports: tslib.__spreadArrays(NB_LAYOUT_COMPONENTS),
        })
    ], NbLayoutModule);
    return NbLayoutModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var itemClick$ = new rxjs.Subject();
var addItems$ = new rxjs.ReplaySubject(1);
var navigateHome$ = new rxjs.ReplaySubject(1);
var getSelectedItem$ = new rxjs.ReplaySubject(1);
var itemSelect$ = new rxjs.ReplaySubject(1);
var itemHover$ = new rxjs.ReplaySubject(1);
var submenuToggle$ = new rxjs.ReplaySubject(1);
var collapseAll$ = new rxjs.ReplaySubject(1);
// TODO: check if we need both URL and LINK
/**
 *
 *
 * Menu Item options example
 * @stacked-example(Menu Link Parameters, menu/menu-link-params.component)
 *
 *
 */
var NbMenuItem = /** @class */ (function () {
    function NbMenuItem() {
        /**
         * Item is selected when partly or fully equal to the current url
         * @type {string}
         */
        this.pathMatch = 'full';
    }
    /**
     * @returns item parents in top-down order
     */
    NbMenuItem.getParents = function (item) {
        var parents = [];
        var parent = item.parent;
        while (parent) {
            parents.unshift(parent);
            parent = parent.parent;
        }
        return parents;
    };
    NbMenuItem.isParent = function (item, possibleChild) {
        return possibleChild.parent
            ? possibleChild.parent === item || this.isParent(item, possibleChild.parent)
            : false;
    };
    return NbMenuItem;
}());
// TODO: map select events to router change events
// TODO: review the interface
/**
 *
 *
 * Menu Service. Allows you to listen to menu events, or to interact with a menu.
 * @stacked-example(Menu Service, menu/menu-service.component)
 *
 *
 */
var NbMenuService = /** @class */ (function () {
    function NbMenuService() {
    }
    /**
     * Add items to the end of the menu items list
     * @param {List<NbMenuItem>} items
     * @param {string} tag
     */
    NbMenuService.prototype.addItems = function (items, tag) {
        addItems$.next({ tag: tag, items: items });
    };
    /**
     * Collapses all menu items
     * @param {string} tag
     */
    NbMenuService.prototype.collapseAll = function (tag) {
        collapseAll$.next({ tag: tag });
    };
    /**
     * Navigate to the home menu item
     * @param {string} tag
     */
    NbMenuService.prototype.navigateHome = function (tag) {
        navigateHome$.next({ tag: tag });
    };
    /**
     * Returns currently selected item. Won't subscribe to the future events.
     * @param {string} tag
     * @returns {Observable<{tag: string; item: NbMenuItem}>}
     */
    NbMenuService.prototype.getSelectedItem = function (tag) {
        var listener = new rxjs.BehaviorSubject(null);
        getSelectedItem$.next({ tag: tag, listener: listener });
        return listener.asObservable();
    };
    NbMenuService.prototype.onItemClick = function () {
        return itemClick$.pipe(rxjs_operators.share());
    };
    NbMenuService.prototype.onItemSelect = function () {
        return itemSelect$.pipe(rxjs_operators.share());
    };
    NbMenuService.prototype.onItemHover = function () {
        return itemHover$.pipe(rxjs_operators.share());
    };
    NbMenuService.prototype.onSubmenuToggle = function () {
        return submenuToggle$.pipe(rxjs_operators.share());
    };
    NbMenuService = tslib.__decorate([
        i0.Injectable()
    ], NbMenuService);
    return NbMenuService;
}());
var NbMenuInternalService = /** @class */ (function () {
    function NbMenuInternalService(location) {
        this.location = location;
    }
    NbMenuInternalService.prototype.prepareItems = function (items) {
        var _this = this;
        var defaultItem = new NbMenuItem();
        items.forEach(function (i) {
            _this.applyDefaults(i, defaultItem);
            _this.setParent(i);
        });
    };
    NbMenuInternalService.prototype.selectFromUrl = function (items, tag, collapseOther) {
        if (collapseOther === void 0) { collapseOther = false; }
        var selectedItem = this.findItemByUrl(items);
        if (selectedItem) {
            this.selectItem(selectedItem, items, collapseOther, tag);
        }
    };
    NbMenuInternalService.prototype.selectItem = function (item, items, collapseOther, tag) {
        if (collapseOther === void 0) { collapseOther = false; }
        var unselectedItems = this.resetSelection(items);
        var collapsedItems = collapseOther ? this.collapseItems(items) : [];
        for (var _i = 0, _a = NbMenuItem.getParents(item); _i < _a.length; _i++) {
            var parent_1 = _a[_i];
            parent_1.selected = true;
            // emit event only for items that weren't selected before ('unselectedItems' contains items that were selected)
            if (!unselectedItems.includes(parent_1)) {
                this.itemSelect(parent_1, tag);
            }
            var wasNotExpanded = !parent_1.expanded;
            parent_1.expanded = true;
            var i = collapsedItems.indexOf(parent_1);
            // emit event only for items that weren't expanded before.
            // 'collapsedItems' contains items that were expanded, so no need to emit event.
            // in case 'collapseOther' is false, 'collapsedItems' will be empty,
            // so also check if item isn't expanded already ('wasNotExpanded').
            if (i === -1 && wasNotExpanded) {
                this.submenuToggle(parent_1, tag);
            }
            else {
                collapsedItems.splice(i, 1);
            }
        }
        item.selected = true;
        // emit event only for items that weren't selected before ('unselectedItems' contains items that were selected)
        if (!unselectedItems.includes(item)) {
            this.itemSelect(item, tag);
        }
        // remaining items which wasn't expanded back after expanding all currently selected items
        for (var _b = 0, collapsedItems_1 = collapsedItems; _b < collapsedItems_1.length; _b++) {
            var collapsedItem = collapsedItems_1[_b];
            this.submenuToggle(collapsedItem, tag);
        }
    };
    NbMenuInternalService.prototype.collapseAll = function (items, tag, except) {
        var collapsedItems = this.collapseItems(items, except);
        for (var _i = 0, collapsedItems_2 = collapsedItems; _i < collapsedItems_2.length; _i++) {
            var item = collapsedItems_2[_i];
            this.submenuToggle(item, tag);
        }
    };
    NbMenuInternalService.prototype.onAddItem = function () {
        return addItems$.pipe(rxjs_operators.share());
    };
    NbMenuInternalService.prototype.onNavigateHome = function () {
        return navigateHome$.pipe(rxjs_operators.share());
    };
    NbMenuInternalService.prototype.onCollapseAll = function () {
        return collapseAll$.pipe(rxjs_operators.share());
    };
    NbMenuInternalService.prototype.onGetSelectedItem = function () {
        return getSelectedItem$.pipe(rxjs_operators.share());
    };
    NbMenuInternalService.prototype.itemHover = function (item, tag) {
        itemHover$.next({ tag: tag, item: item });
    };
    NbMenuInternalService.prototype.submenuToggle = function (item, tag) {
        submenuToggle$.next({ tag: tag, item: item });
    };
    NbMenuInternalService.prototype.itemSelect = function (item, tag) {
        itemSelect$.next({ tag: tag, item: item });
    };
    NbMenuInternalService.prototype.itemClick = function (item, tag) {
        itemClick$.next({ tag: tag, item: item });
    };
    /**
     * Unselect all given items deeply.
     * @param items array of items to unselect.
     * @returns items which selected value was changed.
     */
    NbMenuInternalService.prototype.resetSelection = function (items) {
        var unselectedItems = [];
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            if (item.selected) {
                unselectedItems.push(item);
            }
            item.selected = false;
            if (item.children) {
                unselectedItems.push.apply(unselectedItems, this.resetSelection(item.children));
            }
        }
        return unselectedItems;
    };
    /**
     * Collapse all given items deeply.
     * @param items array of items to collapse.
     * @param except menu item which shouldn't be collapsed, also disables collapsing for parents of this item.
     * @returns items which expanded value was changed.
     */
    NbMenuInternalService.prototype.collapseItems = function (items, except) {
        var collapsedItems = [];
        for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
            var item = items_2[_i];
            if (except && (item === except || NbMenuItem.isParent(item, except))) {
                continue;
            }
            if (item.expanded) {
                collapsedItems.push(item);
            }
            item.expanded = false;
            if (item.children) {
                collapsedItems.push.apply(collapsedItems, this.collapseItems(item.children));
            }
        }
        return collapsedItems;
    };
    NbMenuInternalService.prototype.applyDefaults = function (item, defaultItem) {
        var _this = this;
        var menuItem = tslib.__assign({}, item);
        Object.assign(item, defaultItem, menuItem);
        item.children && item.children.forEach(function (child) {
            _this.applyDefaults(child, defaultItem);
        });
    };
    NbMenuInternalService.prototype.setParent = function (item) {
        var _this = this;
        item.children && item.children.forEach(function (child) {
            child.parent = item;
            _this.setParent(child);
        });
    };
    /**
     * Find deepest item which link matches current URL path.
     * @param items array of items to search in.
     * @returns found item of undefined.
     */
    NbMenuInternalService.prototype.findItemByUrl = function (items) {
        var _this = this;
        var selectedItem;
        items.some(function (item) {
            if (item.children) {
                selectedItem = _this.findItemByUrl(item.children);
            }
            if (!selectedItem && _this.isSelectedInUrl(item)) {
                selectedItem = item;
            }
            return selectedItem;
        });
        return selectedItem;
    };
    NbMenuInternalService.prototype.isSelectedInUrl = function (item) {
        var exact = item.pathMatch === 'full';
        var link = item.link;
        var isSelectedInPath = exact
            ? isUrlPathEqual(this.location.path(), link)
            : isUrlPathContain(this.location.path(), link);
        if (isSelectedInPath && item.fragment != null) {
            return exact
                ? isFragmentEqual(this.location.path(true), item.fragment)
                : isFragmentContain(this.location.path(true), item.fragment);
        }
        return isSelectedInPath;
    };
    NbMenuInternalService = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [_angular_common.Location])
    ], NbMenuInternalService);
    return NbMenuInternalService;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */

(function (NbToggleStates) {
    NbToggleStates["Expanded"] = "expanded";
    NbToggleStates["Collapsed"] = "collapsed";
})(exports.NbToggleStates || (exports.NbToggleStates = {}));
var NbMenuItemComponent = /** @class */ (function () {
    function NbMenuItemComponent(menuService, directionService) {
        this.menuService = menuService;
        this.directionService = directionService;
        this.menuItem = null;
        this.hoverItem = new i0.EventEmitter();
        this.toggleSubMenu = new i0.EventEmitter();
        this.selectItem = new i0.EventEmitter();
        this.itemClick = new i0.EventEmitter();
        this.destroy$ = new rxjs.Subject();
    }
    NbMenuItemComponent.prototype.ngDoCheck = function () {
        this.toggleState = this.menuItem.expanded ? exports.NbToggleStates.Expanded : exports.NbToggleStates.Collapsed;
    };
    NbMenuItemComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.menuService.onSubmenuToggle()
            .pipe(rxjs_operators.filter(function (_a) {
            var item = _a.item;
            return item === _this.menuItem;
        }), rxjs_operators.map(function (_a) {
            var item = _a.item;
            return item.expanded;
        }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (isExpanded) { return _this.toggleState = isExpanded ? exports.NbToggleStates.Expanded : exports.NbToggleStates.Collapsed; });
    };
    NbMenuItemComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbMenuItemComponent.prototype.onToggleSubMenu = function (item) {
        this.toggleSubMenu.emit(item);
    };
    NbMenuItemComponent.prototype.onHoverItem = function (item) {
        this.hoverItem.emit(item);
    };
    NbMenuItemComponent.prototype.onSelectItem = function (item) {
        this.selectItem.emit(item);
    };
    NbMenuItemComponent.prototype.onItemClick = function (item) {
        this.itemClick.emit(item);
    };
    NbMenuItemComponent.prototype.getExpandStateIcon = function () {
        if (this.menuItem.expanded) {
            return 'chevron-down-outline';
        }
        return this.directionService.isLtr()
            ? 'chevron-left-outline'
            : 'chevron-right-outline';
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbMenuItemComponent.prototype, "menuItem", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbMenuItemComponent.prototype, "hoverItem", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbMenuItemComponent.prototype, "toggleSubMenu", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbMenuItemComponent.prototype, "selectItem", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbMenuItemComponent.prototype, "itemClick", void 0);
    NbMenuItemComponent = tslib.__decorate([
        i0.Component({
            selector: '[nbMenuItem]',
            template: "<span *ngIf=\"menuItem.group\">\n  <nb-icon class=\"menu-icon\" [config]=\"menuItem.icon\" *ngIf=\"menuItem.icon\"></nb-icon>\n  {{ menuItem.title }}\n</span>\n<a *ngIf=\"menuItem.link && !menuItem.url && !menuItem.children && !menuItem.group\"\n   [routerLink]=\"menuItem.link\"\n   [queryParams]=\"menuItem.queryParams\"\n   [fragment]=\"menuItem.fragment\"\n   [skipLocationChange]=\"menuItem.skipLocationChange\"\n   [attr.target]=\"menuItem.target\"\n   [attr.title]=\"menuItem.title\"\n   [class.active]=\"menuItem.selected\"\n   (mouseenter)=\"onHoverItem(menuItem)\"\n   (click)=\"onItemClick(menuItem);\">\n  <nb-icon class=\"menu-icon\" [config]=\"menuItem.icon\" *ngIf=\"menuItem.icon\"></nb-icon>\n  <span class=\"menu-title\">{{ menuItem.title }}</span>\n</a>\n<a *ngIf=\"menuItem.url && !menuItem.children && !menuItem.link && !menuItem.group\"\n   [attr.href]=\"menuItem.url\"\n   [attr.target]=\"menuItem.target\"\n   [attr.title]=\"menuItem.title\"\n   [class.active]=\"menuItem.selected\"\n   (mouseenter)=\"onHoverItem(menuItem)\"\n   (click)=\"onSelectItem(menuItem)\">\n  <nb-icon class=\"menu-icon\" [config]=\"menuItem.icon\" *ngIf=\"menuItem.icon\"></nb-icon>\n  <span class=\"menu-title\">{{ menuItem.title }}</span>\n</a>\n<a *ngIf=\"!menuItem.children && !menuItem.link && !menuItem.url && !menuItem.group\"\n   [attr.target]=\"menuItem.target\"\n   [attr.title]=\"menuItem.title\"\n   [class.active]=\"menuItem.selected\"\n   (mouseenter)=\"onHoverItem(menuItem)\"\n   (click)=\"$event.preventDefault(); onItemClick(menuItem);\">\n  <nb-icon class=\"menu-icon\" [config]=\"menuItem.icon\" *ngIf=\"menuItem.icon\"></nb-icon>\n  <span class=\"menu-title\">{{ menuItem.title }}</span>\n</a>\n<a *ngIf=\"menuItem.children\"\n   (click)=\"$event.preventDefault(); onToggleSubMenu(menuItem);\"\n   [attr.target]=\"menuItem.target\"\n   [attr.title]=\"menuItem.title\"\n   [class.active]=\"menuItem.selected\"\n   (mouseenter)=\"onHoverItem(menuItem)\"\n   href=\"#\">\n  <nb-icon class=\"menu-icon\" [config]=\"menuItem.icon\" *ngIf=\"menuItem.icon\"></nb-icon>\n  <span class=\"menu-title\">{{ menuItem.title }}</span>\n  <nb-icon class=\"expand-state\" [icon]=\"getExpandStateIcon()\" pack=\"nebular-essentials\"></nb-icon>\n</a>\n<ul *ngIf=\"menuItem.children\"\n    [class.collapsed]=\"!(menuItem.children && menuItem.expanded)\"\n    [class.expanded]=\"menuItem.expanded\"\n    [@toggle]=\"toggleState\"\n    class=\"menu-items\">\n  <ng-container *ngFor=\"let item of menuItem.children\">\n    <li nbMenuItem *ngIf=\"!item.hidden\"\n        [menuItem]=\"item\"\n        [class.menu-group]=\"item.group\"\n        (hoverItem)=\"onHoverItem($event)\"\n        (toggleSubMenu)=\"onToggleSubMenu($event)\"\n        (selectItem)=\"onSelectItem($event)\"\n        (itemClick)=\"onItemClick($event)\"\n        class=\"menu-item\">\n    </li>\n  </ng-container>\n</ul>\n",
            animations: [
                _angular_animations.trigger('toggle', [
                    _angular_animations.state(exports.NbToggleStates.Collapsed, _angular_animations.style({ height: '0', margin: '0' })),
                    _angular_animations.state(exports.NbToggleStates.Expanded, _angular_animations.style({ height: '*' })),
                    _angular_animations.transition(exports.NbToggleStates.Collapsed + " <=> " + exports.NbToggleStates.Expanded, _angular_animations.animate(300)),
                ]),
            ]
        }),
        tslib.__metadata("design:paramtypes", [NbMenuService,
            NbLayoutDirectionService])
    ], NbMenuItemComponent);
    return NbMenuItemComponent;
}());
/**
 * Vertical menu component.
 *
 * Accepts a list of menu items and renders them accordingly. Supports multi-level menus.
 *
 * Basic example
 * @stacked-example(Showcase, menu/menu-showcase.component)
 *
 * ```ts
 * // ...
 * items: NbMenuItem[] = [
 *  {
 *    title: home,
 *    link: '/'
 *  },
 *  {
 *    title: dashboard,
 *    link: 'dashboard'
 *  }
 * ];
 * // ...
 * <nb-menu [items]="items"></nb-menu>
 * ```
 * ### Installation
 *
 * Import `NbMenuModule.forRoot()` to your app module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbMenuModule.forRoot(),
 *   ],
 * })
 * export class AppModule { }
 * ```
 * and `NbMenuModule` to your feature module where the component should be shown:
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbMenuModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Two-level menu example
 * @stacked-example(Two Levels, menu/menu-children.component)
 *
 *
 * Autocollapse menu example
 * @stacked-example(Autocollapse Menu, menu/menu-autocollapse.component)
 *
 *
 * @styles
 *
 * menu-background-color:
 * menu-text-color:
 * menu-text-font-family:
 * menu-text-font-size:
 * menu-text-font-weight:
 * menu-text-line-height:
 * menu-group-text-color:
 * menu-item-border-radius:
 * menu-item-padding:
 * menu-item-hover-background-color:
 * menu-item-hover-cursor:
 * menu-item-hover-text-color:
 * menu-item-icon-hover-color:
 * menu-item-active-background-color:
 * menu-item-active-text-color:
 * menu-item-icon-active-color:
 * menu-item-icon-color:
 * menu-item-icon-margin:
 * menu-item-icon-width:
 * menu-item-divider-color:
 * menu-item-divider-style:
 * menu-item-divider-width:
 * menu-submenu-background-color:
 * menu-submenu-text-color:
 * menu-submenu-margin:
 * menu-submenu-padding:
 * menu-submenu-item-border-color:
 * menu-submenu-item-border-style:
 * menu-submenu-item-border-width:
 * menu-submenu-item-border-radius:
 * menu-submenu-item-padding:
 * menu-submenu-item-hover-background-color:
 * menu-submenu-item-hover-border-color:
 * menu-submenu-item-hover-text-color:
 * menu-submenu-item-icon-hover-color:
 * menu-submenu-item-active-background-color:
 * menu-submenu-item-active-border-color:
 * menu-submenu-item-active-text-color:
 * menu-submenu-item-icon-active-color:
 * menu-submenu-item-active-hover-background-color:
 * menu-submenu-item-active-hover-border-color:
 * menu-submenu-item-active-hover-text-color:
 * menu-submenu-item-icon-active-hover-color:
 */
var NbMenuComponent = /** @class */ (function () {
    function NbMenuComponent(window, platformId, menuInternalService, router) {
        this.window = window;
        this.platformId = platformId;
        this.menuInternalService = menuInternalService;
        this.router = router;
        this._autoCollapse = false;
        this.destroy$ = new rxjs.Subject();
    }
    Object.defineProperty(NbMenuComponent.prototype, "autoCollapse", {
        /**
         * Collapse all opened submenus on the toggle event
         * Default value is "false"
         * @type boolean
         */
        get: function () {
            return this._autoCollapse;
        },
        set: function (value) {
            this._autoCollapse = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NbMenuComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.menuInternalService.prepareItems(this.items);
        this.menuInternalService
            .onAddItem()
            .pipe(rxjs_operators.filter(function (data) { return _this.compareTag(data.tag); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (data) { return _this.onAddItem(data); });
        this.menuInternalService
            .onNavigateHome()
            .pipe(rxjs_operators.filter(function (data) { return _this.compareTag(data.tag); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.navigateHome(); });
        this.menuInternalService
            .onGetSelectedItem()
            .pipe(rxjs_operators.filter(function (data) { return _this.compareTag(data.tag); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (data) {
            data.listener.next({ tag: _this.tag, item: _this.getSelectedItem(_this.items) });
        });
        this.menuInternalService
            .onCollapseAll()
            .pipe(rxjs_operators.filter(function (data) { return _this.compareTag(data.tag); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.collapseAll(); });
        this.router.events
            .pipe(rxjs_operators.filter(function (event) { return event instanceof _angular_router.NavigationEnd; }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () {
            _this.menuInternalService.selectFromUrl(_this.items, _this.tag, _this.autoCollapse);
        });
    };
    NbMenuComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () { return _this.menuInternalService.selectFromUrl(_this.items, _this.tag, _this.autoCollapse); });
    };
    NbMenuComponent.prototype.onAddItem = function (data) {
        var _a;
        (_a = this.items).push.apply(_a, data.items);
        this.menuInternalService.prepareItems(this.items);
        this.menuInternalService.selectFromUrl(this.items, this.tag, this.autoCollapse);
    };
    NbMenuComponent.prototype.onHoverItem = function (item) {
        this.menuInternalService.itemHover(item, this.tag);
    };
    NbMenuComponent.prototype.onToggleSubMenu = function (item) {
        if (this.autoCollapse) {
            this.menuInternalService.collapseAll(this.items, this.tag, item);
        }
        item.expanded = !item.expanded;
        this.menuInternalService.submenuToggle(item, this.tag);
    };
    // TODO: is not fired on page reload
    NbMenuComponent.prototype.onSelectItem = function (item) {
        this.menuInternalService.selectItem(item, this.items, this.autoCollapse, this.tag);
    };
    NbMenuComponent.prototype.onItemClick = function (item) {
        this.menuInternalService.itemClick(item, this.tag);
    };
    NbMenuComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbMenuComponent.prototype.navigateHome = function () {
        var homeItem = this.getHomeItem(this.items);
        if (homeItem) {
            if (homeItem.link) {
                this.router.navigate([homeItem.link], { queryParams: homeItem.queryParams, fragment: homeItem.fragment });
            }
            if (homeItem.url && _angular_common.isPlatformBrowser(this.platformId)) {
                this.window.location.href = homeItem.url;
            }
        }
    };
    NbMenuComponent.prototype.collapseAll = function () {
        this.menuInternalService.collapseAll(this.items, this.tag);
    };
    NbMenuComponent.prototype.getHomeItem = function (items) {
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            if (item.home) {
                return item;
            }
            var homeItem = item.children && this.getHomeItem(item.children);
            if (homeItem) {
                return homeItem;
            }
        }
    };
    NbMenuComponent.prototype.compareTag = function (tag) {
        return !tag || tag === this.tag;
    };
    NbMenuComponent.prototype.getSelectedItem = function (items) {
        var _this = this;
        var selected = null;
        items.forEach(function (item) {
            if (item.selected) {
                selected = item;
            }
            if (item.selected && item.children && item.children.length > 0) {
                selected = _this.getSelectedItem(item.children);
            }
        });
        return selected;
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbMenuComponent.prototype, "tag", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Array)
    ], NbMenuComponent.prototype, "items", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbMenuComponent.prototype, "autoCollapse", null);
    NbMenuComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-menu',
            template: "\n    <ul class=\"menu-items\">\n      <ng-container *ngFor=\"let item of items\">\n        <li nbMenuItem *ngIf=\"!item.hidden\"\n            [menuItem]=\"item\"\n            [class.menu-group]=\"item.group\"\n            (hoverItem)=\"onHoverItem($event)\"\n            (toggleSubMenu)=\"onToggleSubMenu($event)\"\n            (selectItem)=\"onSelectItem($event)\"\n            (itemClick)=\"onItemClick($event)\"\n            class=\"menu-item\">\n        </li>\n      </ng-container>\n    </ul>\n  ",
            styles: [":host ::ng-deep{display:block}:host ::ng-deep .menu-items,:host ::ng-deep .menu-item>.menu-items{list-style-type:none;overflow:hidden}:host ::ng-deep .menu-item a{display:flex;text-decoration:none;align-items:center}:host ::ng-deep .menu-item a .menu-title{flex:1 0 auto}[dir=rtl] :host ::ng-deep .menu-item a .menu-title{text-align:right}:host ::ng-deep .menu-group span{display:flex}\n"]
        }),
        tslib.__param(0, i0.Inject(NB_WINDOW)),
        tslib.__param(1, i0.Inject(i0.PLATFORM_ID)),
        tslib.__metadata("design:paramtypes", [Object, Object, NbMenuInternalService,
            _angular_router.Router])
    ], NbMenuComponent);
    return NbMenuComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var nbMenuComponents = [NbMenuComponent, NbMenuItemComponent];
var NB_MENU_PROVIDERS = [NbMenuService, NbMenuInternalService];
var NbMenuModule = /** @class */ (function () {
    function NbMenuModule() {
    }
    NbMenuModule_1 = NbMenuModule;
    NbMenuModule.forRoot = function () {
        return {
            ngModule: NbMenuModule_1,
            providers: tslib.__spreadArrays(NB_MENU_PROVIDERS),
        };
    };
    var NbMenuModule_1;
    NbMenuModule = NbMenuModule_1 = tslib.__decorate([
        i0.NgModule({
            imports: [NbSharedModule, NbIconModule],
            declarations: tslib.__spreadArrays(nbMenuComponents),
            exports: tslib.__spreadArrays(nbMenuComponents),
        })
    ], NbMenuModule);
    return NbMenuModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Route tabset components.
 * Renders tabs inside of a router-outlet.
 *
 * ```ts
 *  tabs = [
 *  {
 *    title: 'Route tab #1',
 *    route: '/pages/description',
 *    icon: 'home',
 *    responsive: true, // hide title before `route-tabs-icon-only-max-width` value
 *  },
 *  {
 *    title: 'Route tab #2',
 *    route: '/pages/images',
 *    }
 *  ];
 *
 *  <nb-route-tabset [tabs]="tabs"></nb-route-tabset>
 * ```
 * ### Installation
 *
 * Import `NbRouteTabsetModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbRouteTabsetModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 *
 * @stacked-example(Route Tabset, tabset/route-tabset-showcase.component)
 *
 * @styles
 *
 * route-tabset-background-color:
 * route-tabset-border-radius:
 * route-tabset-shadow:
 * route-tabset-tab-background-color:
 * route-tabset-tab-padding:
 * route-tabset-tab-text-color:
 * route-tabset-tab-text-font-family:
 * route-tabset-tab-text-font-size:
 * route-tabset-tab-text-font-weight:
 * route-tabset-tab-text-line-height:
 * route-tabset-tab-text-transform:
 * route-tabset-tab-underline-width:
 * route-tabset-tab-underline-color:
 * route-tabset-tab-active-background-color:
 * route-tabset-tab-active-text-color:
 * route-tabset-tab-active-underline-color:
 * route-tabset-tab-focus-background-color:
 * route-tabset-tab-focus-text-color:
 * route-tabset-tab-focus-underline-color:
 * route-tabset-tab-hover-background-color:
 * route-tabset-tab-hover-text-color:
 * route-tabset-tab-hover-underline-color:
 * route-tabset-tab-disabled-background-color:
 * route-tabset-tab-disabled-text-color:
 * route-tabset-tab-disabled-underline-color:
 * route-tabset-divider-color:
 * route-tabset-divider-style:
 * route-tabset-divider-width:
 * route-tabset-scrollbar-color:
 * route-tabset-scrollbar-background-color:
 * route-tabset-scrollbar-width:
 * route-tabset-tab-text-hide-breakpoint:
 */
var NbRouteTabsetComponent = /** @class */ (function () {
    function NbRouteTabsetComponent() {
        this.fullWidthValue = false;
        /**
         * Options passed to `routerLinkActiveOptions` directive which set on tab links.
         * `{ exact: true }` by default.
         */
        this.activeLinkOptions = { exact: true };
        /**
         * Emits when tab is selected
         * @type {EventEmitter<any>}
         */
        this.changeTab = new i0.EventEmitter();
    }
    Object.defineProperty(NbRouteTabsetComponent.prototype, "fullWidth", {
        /**
         * Take full width of a parent
         * @param {boolean} val
         */
        set: function (val) {
            this.fullWidthValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    NbRouteTabsetComponent.prototype.selectTab = function (tab) {
        this.changeTab.emit(tab);
    };
    tslib.__decorate([
        i0.HostBinding('class.full-width'),
        tslib.__metadata("design:type", Boolean)
    ], NbRouteTabsetComponent.prototype, "fullWidthValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Array)
    ], NbRouteTabsetComponent.prototype, "tabs", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbRouteTabsetComponent.prototype, "activeLinkOptions", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbRouteTabsetComponent.prototype, "fullWidth", null);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbRouteTabsetComponent.prototype, "changeTab", void 0);
    NbRouteTabsetComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-route-tabset',
            template: "\n    <ul class=\"route-tabset\">\n      <ng-container *ngFor=\"let tab of tabs\">\n        <li *ngIf=\"tab.disabled; else enabled\"\n            [class.responsive]=\"tab.responsive\"\n            class=\"route-tab disabled\"\n            tabindex=\"-1\">\n          <a tabindex=\"-1\" class=\"tab-link\">\n            <nb-icon *ngIf=\"tab.icon\" [config]=\"tab.icon\"></nb-icon>\n            <span *ngIf=\"tab.title\" class=\"tab-text\">{{ tab.title }}</span>\n          </a>\n        </li>\n\n        <ng-template #enabled>\n          <li (click)=\"$event.preventDefault(); selectTab(tab)\"\n              [routerLink]=\"tab.route\"\n              routerLinkActive=\"active\"\n              [routerLinkActiveOptions]=\"activeLinkOptions\"\n              [class.responsive]=\"tab.responsive\"\n              tabindex=\"0\"\n              class=\"route-tab\">\n            <a tabindex=\"-1\" class=\"tab-link\">\n              <nb-icon *ngIf=\"tab.icon\" [icon]=\"tab.icon\"></nb-icon>\n              <span *ngIf=\"tab.title\" class=\"tab-text\">{{ tab.title }}</span>\n            </a>\n          </li>\n        </ng-template>\n      </ng-container>\n    </ul>\n    <router-outlet></router-outlet>\n  ",
            styles: [".route-tabset{display:flex;flex-direction:row;list-style-type:none;margin:0;padding:0}.route-tabset .route-tab{margin-bottom:-1px;text-align:center;padding:0}.route-tabset .route-tab.active a::before{display:block}.route-tabset .route-tab a{position:relative;text-decoration:none;display:inline-block}.route-tabset .route-tab a::before{position:absolute;content:'';width:100%;border-radius:3px;bottom:-2px;left:0}.route-tabset .route-tab a nb-icon{vertical-align:middle}[dir=ltr] :host .tab-link nb-icon+span{margin-left:.5rem}[dir=rtl] :host .tab-link nb-icon+span{margin-right:.5rem}:host(.full-width) .route-tabset{justify-content:space-around}\n"]
        })
    ], NbRouteTabsetComponent);
    return NbRouteTabsetComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbRouteTabsetModule = /** @class */ (function () {
    function NbRouteTabsetModule() {
    }
    NbRouteTabsetModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
                NbIconModule,
            ],
            declarations: [
                NbRouteTabsetComponent,
            ],
            exports: [
                NbRouteTabsetComponent,
            ],
        })
    ], NbRouteTabsetModule);
    return NbRouteTabsetModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Sidebar service.
 *
 * Root module service to control the sidebar from any part of the app.
 *
 * Allows you to change sidebar state dynamically from any part of the app:
 * @stacked-example(Sidebar State, sidebar/sidebar-toggle.component)
 */
var NbSidebarService = /** @class */ (function () {
    function NbSidebarService() {
        this.toggle$ = new rxjs.Subject();
        this.expand$ = new rxjs.Subject();
        this.collapse$ = new rxjs.Subject();
        this.compact$ = new rxjs.Subject();
    }
    /**
     * Subscribe to toggle events
     *
     * @returns Observable<{ compact: boolean, tag: string }>
     */
    NbSidebarService.prototype.onToggle = function () {
        return this.toggle$.pipe(rxjs_operators.share());
    };
    /**
     * Subscribe to expand events
     * @returns Observable<{ tag: string }>
     */
    NbSidebarService.prototype.onExpand = function () {
        return this.expand$.pipe(rxjs_operators.share());
    };
    /**
     * Subscribe to collapse evens
     * @returns Observable<{ tag: string }>
     */
    NbSidebarService.prototype.onCollapse = function () {
        return this.collapse$.pipe(rxjs_operators.share());
    };
    /**
     * Subscribe to compact evens
     * @returns Observable<{ tag: string }>
     */
    NbSidebarService.prototype.onCompact = function () {
        return this.compact$.pipe(rxjs_operators.share());
    };
    /**
     * Toggle a sidebar
     * @param {boolean} compact
     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here
     * to specify which sidebar you want to control
     */
    NbSidebarService.prototype.toggle = function (compact, tag) {
        if (compact === void 0) { compact = false; }
        this.toggle$.next({ compact: compact, tag: tag });
    };
    /**
     * Expands a sidebar
     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here
     * to specify which sidebar you want to control
     */
    NbSidebarService.prototype.expand = function (tag) {
        this.expand$.next({ tag: tag });
    };
    /**
     * Collapses a sidebar
     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here
     * to specify which sidebar you want to control
     */
    NbSidebarService.prototype.collapse = function (tag) {
        this.collapse$.next({ tag: tag });
    };
    /**
     * Makes sidebar compact
     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here
     * to specify which sidebar you want to control
     */
    NbSidebarService.prototype.compact = function (tag) {
        this.compact$.next({ tag: tag });
    };
    NbSidebarService = tslib.__decorate([
        i0.Injectable()
    ], NbSidebarService);
    return NbSidebarService;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Sidebar header container.
 *
 * Placeholder which contains a sidebar header content,
 * placed at the very top of the sidebar outside of the scroll area.
 */
var NbSidebarHeaderComponent = /** @class */ (function () {
    function NbSidebarHeaderComponent() {
    }
    NbSidebarHeaderComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-sidebar-header',
            template: "\n    <ng-content></ng-content>\n  "
        })
    ], NbSidebarHeaderComponent);
    return NbSidebarHeaderComponent;
}());
/**
 * Sidebar footer container.
 *
 * Placeholder which contains a sidebar footer content,
 * placed at the very bottom of the sidebar outside of the scroll area.
 */
var NbSidebarFooterComponent = /** @class */ (function () {
    function NbSidebarFooterComponent() {
    }
    NbSidebarFooterComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-sidebar-footer',
            template: "\n    <ng-content></ng-content>\n  "
        })
    ], NbSidebarFooterComponent);
    return NbSidebarFooterComponent;
}());
/**
 * Layout sidebar component.
 *
 * @stacked-example(Showcase, sidebar/sidebar-showcase.component)
 *
 * ### Installation
 *
 * Import `NbSidebarModule.forRoot()` to your app module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbSidebarModule.forRoot(),
 *   ],
 * })
 * export class AppModule { }
 * ```
 * and `NbSidebarModule` to your feature module where the component should be shown:
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbSidebarModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Sidebar can be placed on the left or the right side of the layout,
 * or on start/end position of layout (depends on document direction, left to right or right to left)
 * It can be fixed (shown above the content) or can push the layout when opened.
 *
 * There are three states - `expanded`, `collapsed`, `compacted`.
 * By default sidebar content is fixed and saves its position while the page is being scrolled.
 *
 * Compacted sidebar example:
 * @stacked-example(Compacted Sidebar, sidebar/sidebar-compacted.component)
 *
 * Sidebar also supports a `responsive` behavior, listening to window size change and changing its size respectably.
 *
 * In a pair with header it is possible to setup a configuration when header is placed on a side of the sidebar
 * and not on top of it. To achieve this simply put a `subheader` property to the header like this:
 * ```html
 * <nb-layout-header subheader></nb-layout-header>
 * ```
 * @stacked-example(Subheader, layout/layout-sidebar-subheader.component)
 * Note that in such configuration sidebar shadow is removed and header cannot be make `fixed`.
 *
 * @additional-example(Right Sidebar, sidebar/sidebar-right.component)
 * @additional-example(Fixed Sidebar, sidebar/sidebar-fixed.component)
 *
 * @styles
 *
 * sidebar-background-color:
 * sidebar-text-color:
 * sidebar-text-font-family:
 * sidebar-text-font-size:
 * sidebar-text-font-weight:
 * sidebar-text-line-height:
 * sidebar-height:
 * sidebar-width:
 * sidebar-width-compact:
 * sidebar-padding:
 * sidebar-header-height:
 * sidebar-footer-height:
 * sidebar-shadow:
 * sidebar-menu-item-highlight-color:
 * sidebar-scrollbar-background-color:
 * sidebar-scrollbar-color:
 * sidebar-scrollbar-width:
 */
var NbSidebarComponent = /** @class */ (function () {
    function NbSidebarComponent(sidebarService, themeService, element) {
        this.sidebarService = sidebarService;
        this.themeService = themeService;
        this.element = element;
        this.responsiveValue = false;
        this.destroy$ = new rxjs.Subject();
        this.containerFixedValue = true;
        this.fixedValue = false;
        this.rightValue = false;
        this.leftValue = true;
        this.startValue = false;
        this.endValue = false;
        // TODO: get width by the key and define only max width for the tablets and mobiles
        /**
         * Controls on which screen sizes sidebar should be switched to compacted state.
         * Works only when responsive mode is on.
         * Default values are `['xs', 'is', 'sm', 'md', 'lg']`.
         *
         * @type string[]
         */
        this.compactedBreakpoints = ['xs', 'is', 'sm', 'md', 'lg'];
        /**
         * Controls on which screen sizes sidebar should be switched to collapsed state.
         * Works only when responsive mode is on.
         * Default values are `['xs', 'is']`.
         *
         * @type string[]
         */
        this.collapsedBreakpoints = ['xs', 'is'];
        this.responsiveState = NbSidebarComponent_1.RESPONSIVE_STATE_PC;
    }
    NbSidebarComponent_1 = NbSidebarComponent;
    Object.defineProperty(NbSidebarComponent.prototype, "expanded", {
        // TODO: rename stateValue to state (take a look to the card component)
        get: function () {
            return this.stateValue === NbSidebarComponent_1.STATE_EXPANDED;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSidebarComponent.prototype, "collapsed", {
        get: function () {
            return this.stateValue === NbSidebarComponent_1.STATE_COLLAPSED;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSidebarComponent.prototype, "compacted", {
        get: function () {
            return this.stateValue === NbSidebarComponent_1.STATE_COMPACTED;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSidebarComponent.prototype, "right", {
        /**
         * Places sidebar on the right side
         * @type {boolean}
         */
        set: function (val) {
            this.rightValue = convertToBoolProperty(val);
            this.leftValue = !this.rightValue;
            this.startValue = false;
            this.endValue = false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSidebarComponent.prototype, "left", {
        /**
         * Places sidebar on the left side
         * @type {boolean}
         */
        set: function (val) {
            this.leftValue = convertToBoolProperty(val);
            this.rightValue = !this.leftValue;
            this.startValue = false;
            this.endValue = false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSidebarComponent.prototype, "start", {
        /**
         * Places sidebar on the start edge of layout
         * @type {boolean}
         */
        set: function (val) {
            this.startValue = convertToBoolProperty(val);
            this.endValue = !this.startValue;
            this.leftValue = false;
            this.rightValue = false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSidebarComponent.prototype, "end", {
        /**
         * Places sidebar on the end edge of layout
         * @type {boolean}
         */
        set: function (val) {
            this.endValue = convertToBoolProperty(val);
            this.startValue = !this.endValue;
            this.leftValue = false;
            this.rightValue = false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSidebarComponent.prototype, "fixed", {
        /**
         * Makes sidebar fixed (shown above the layout content)
         * @type {boolean}
         */
        set: function (val) {
            this.fixedValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSidebarComponent.prototype, "containerFixed", {
        /**
         * Makes sidebar container fixed
         * @type {boolean}
         */
        set: function (val) {
            this.containerFixedValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSidebarComponent.prototype, "state", {
        /**
         * Initial sidebar state, `expanded`|`collapsed`|`compacted`
         * @type {string}
         */
        set: function (val) {
            this.stateValue = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSidebarComponent.prototype, "responsive", {
        /**
         * Makes sidebar listen to media query events and change its behaviour
         * @type {boolean}
         */
        set: function (val) {
            this.responsiveValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    NbSidebarComponent.prototype.toggleResponsive = function (enabled) {
        if (enabled) {
            this.mediaQuerySubscription = this.onMediaQueryChanges();
        }
        else if (this.mediaQuerySubscription) {
            this.mediaQuerySubscription.unsubscribe();
        }
    };
    NbSidebarComponent.prototype.ngOnChanges = function (changes) {
        if (changes.responsive) {
            this.toggleResponsive(this.responsiveValue);
        }
    };
    NbSidebarComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.sidebarService.onToggle()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (data) {
            if (!_this.tag || _this.tag === data.tag) {
                _this.toggle(data.compact);
            }
        });
        this.sidebarService.onExpand()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (data) {
            if (!_this.tag || _this.tag === data.tag) {
                _this.expand();
            }
        });
        this.sidebarService.onCollapse()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (data) {
            if (!_this.tag || _this.tag === data.tag) {
                _this.collapse();
            }
        });
        this.sidebarService.onCompact()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (data) {
            if (!_this.tag || _this.tag === data.tag) {
                _this.compact();
            }
        });
    };
    NbSidebarComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
        if (this.mediaQuerySubscription) {
            this.mediaQuerySubscription.unsubscribe();
        }
    };
    // TODO: this is more of a workaround, should be a better way to make components communicate to each other
    NbSidebarComponent.prototype.onClick = function (event) {
        var menu = this.element.nativeElement.querySelector('nb-menu');
        if (menu && menu.contains(event.target)) {
            var link = this.getMenuLink(event.target);
            if (link && link.nextElementSibling && link.nextElementSibling.classList.contains('menu-items')) {
                this.sidebarService.expand(this.tag);
            }
        }
    };
    /**
     * Collapses the sidebar
     */
    NbSidebarComponent.prototype.collapse = function () {
        this.state = NbSidebarComponent_1.STATE_COLLAPSED;
    };
    /**
     * Expands the sidebar
     */
    NbSidebarComponent.prototype.expand = function () {
        this.state = NbSidebarComponent_1.STATE_EXPANDED;
    };
    /**
     * Compacts the sidebar (minimizes)
     */
    NbSidebarComponent.prototype.compact = function () {
        this.state = NbSidebarComponent_1.STATE_COMPACTED;
    };
    /**
     * Toggles sidebar state (expanded|collapsed|compacted)
     * @param {boolean} compact If true, then sidebar state will be changed between expanded & compacted,
     * otherwise - between expanded & collapsed. False by default.
     *
     * Toggle sidebar state
     *
     * ```ts
     * this.sidebar.toggle(true);
     * ```
     */
    NbSidebarComponent.prototype.toggle = function (compact) {
        if (compact === void 0) { compact = false; }
        if (this.responsiveEnabled()) {
            if (this.responsiveState === NbSidebarComponent_1.RESPONSIVE_STATE_MOBILE) {
                compact = false;
            }
        }
        var closedStates = [NbSidebarComponent_1.STATE_COMPACTED, NbSidebarComponent_1.STATE_COLLAPSED];
        if (compact) {
            this.state = closedStates.includes(this.stateValue) ?
                NbSidebarComponent_1.STATE_EXPANDED : NbSidebarComponent_1.STATE_COMPACTED;
        }
        else {
            this.state = closedStates.includes(this.stateValue) ?
                NbSidebarComponent_1.STATE_EXPANDED : NbSidebarComponent_1.STATE_COLLAPSED;
        }
    };
    NbSidebarComponent.prototype.onMediaQueryChanges = function () {
        var _this = this;
        return this.themeService.onMediaQueryChange()
            .subscribe(function (_a) {
            var prev = _a[0], current = _a[1];
            var isCollapsed = _this.collapsedBreakpoints.includes(current.name);
            var isCompacted = _this.compactedBreakpoints.includes(current.name);
            if (isCompacted) {
                _this.fixed = _this.containerFixedValue;
                _this.compact();
                _this.responsiveState = NbSidebarComponent_1.RESPONSIVE_STATE_TABLET;
            }
            if (isCollapsed) {
                _this.fixed = true;
                _this.collapse();
                _this.responsiveState = NbSidebarComponent_1.RESPONSIVE_STATE_MOBILE;
            }
            if (!isCollapsed && !isCompacted && prev.width < current.width) {
                _this.expand();
                _this.fixed = false;
                _this.responsiveState = NbSidebarComponent_1.RESPONSIVE_STATE_PC;
            }
        });
    };
    NbSidebarComponent.prototype.responsiveEnabled = function () {
        return this.responsiveValue;
    };
    NbSidebarComponent.prototype.getMenuLink = function (element) {
        if (!element || element.tagName.toLowerCase() === 'nb-menu') {
            return;
        }
        if (element.tagName.toLowerCase() === 'a') {
            return element;
        }
        return this.getMenuLink(element.parentElement);
    };
    var NbSidebarComponent_1;
    NbSidebarComponent.STATE_EXPANDED = 'expanded';
    NbSidebarComponent.STATE_COLLAPSED = 'collapsed';
    NbSidebarComponent.STATE_COMPACTED = 'compacted';
    NbSidebarComponent.RESPONSIVE_STATE_MOBILE = 'mobile';
    NbSidebarComponent.RESPONSIVE_STATE_TABLET = 'tablet';
    NbSidebarComponent.RESPONSIVE_STATE_PC = 'pc';
    tslib.__decorate([
        i0.HostBinding('class.fixed'),
        tslib.__metadata("design:type", Boolean)
    ], NbSidebarComponent.prototype, "fixedValue", void 0);
    tslib.__decorate([
        i0.HostBinding('class.right'),
        tslib.__metadata("design:type", Boolean)
    ], NbSidebarComponent.prototype, "rightValue", void 0);
    tslib.__decorate([
        i0.HostBinding('class.left'),
        tslib.__metadata("design:type", Boolean)
    ], NbSidebarComponent.prototype, "leftValue", void 0);
    tslib.__decorate([
        i0.HostBinding('class.start'),
        tslib.__metadata("design:type", Boolean)
    ], NbSidebarComponent.prototype, "startValue", void 0);
    tslib.__decorate([
        i0.HostBinding('class.end'),
        tslib.__metadata("design:type", Boolean)
    ], NbSidebarComponent.prototype, "endValue", void 0);
    tslib.__decorate([
        i0.HostBinding('class.expanded'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSidebarComponent.prototype, "expanded", null);
    tslib.__decorate([
        i0.HostBinding('class.collapsed'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSidebarComponent.prototype, "collapsed", null);
    tslib.__decorate([
        i0.HostBinding('class.compacted'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSidebarComponent.prototype, "compacted", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSidebarComponent.prototype, "right", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSidebarComponent.prototype, "left", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSidebarComponent.prototype, "start", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSidebarComponent.prototype, "end", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSidebarComponent.prototype, "fixed", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSidebarComponent.prototype, "containerFixed", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbSidebarComponent.prototype, "state", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSidebarComponent.prototype, "responsive", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSidebarComponent.prototype, "tag", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Array)
    ], NbSidebarComponent.prototype, "compactedBreakpoints", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Array)
    ], NbSidebarComponent.prototype, "collapsedBreakpoints", void 0);
    NbSidebarComponent = NbSidebarComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'nb-sidebar',
            template: "\n    <div class=\"main-container\"\n         [class.main-container-fixed]=\"containerFixedValue\">\n      <ng-content select=\"nb-sidebar-header\"></ng-content>\n      <div class=\"scrollable\" (click)=\"onClick($event)\">\n        <ng-content></ng-content>\n      </div>\n      <ng-content select=\"nb-sidebar-footer\"></ng-content>\n    </div>\n  ",
            styles: [":host{display:flex;flex-direction:column;overflow:hidden;z-index:auto;order:0}:host .scrollable{overflow-y:auto;overflow-x:hidden;flex:1}:host .main-container{transform:translate3d(0, 0, 0);display:flex;flex-direction:column}:host .main-container-fixed{position:fixed}:host.right{margin-right:0;margin-left:auto}[dir=ltr] :host.right{order:4}[dir=rtl] :host.right{order:0}:host.end{order:4}[dir=ltr] :host.end{margin-right:0;margin-left:auto}[dir=rtl] :host.end{margin-left:0;margin-right:auto}:host.fixed{position:fixed;height:100%;z-index:999;top:0;bottom:0;left:0}:host.fixed.right{right:0}[dir=ltr] :host.fixed.start{left:0}[dir=rtl] :host.fixed.start{right:0}[dir=ltr] :host.fixed.end{right:0}[dir=rtl] :host.fixed.end{left:0}:host ::ng-deep nb-sidebar-footer{margin-top:auto;display:block}:host ::ng-deep nb-sidebar-header{display:block}\n"]
        }),
        tslib.__metadata("design:paramtypes", [NbSidebarService,
            NbThemeService,
            i0.ElementRef])
    ], NbSidebarComponent);
    return NbSidebarComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_SIDEBAR_COMPONENTS = [
    NbSidebarComponent,
    NbSidebarFooterComponent,
    NbSidebarHeaderComponent,
];
var NB_SIDEBAR_PROVIDERS = [
    NbSidebarService,
];
var NbSidebarModule = /** @class */ (function () {
    function NbSidebarModule() {
    }
    NbSidebarModule_1 = NbSidebarModule;
    NbSidebarModule.forRoot = function () {
        return {
            ngModule: NbSidebarModule_1,
            providers: tslib.__spreadArrays(NB_SIDEBAR_PROVIDERS),
        };
    };
    var NbSidebarModule_1;
    NbSidebarModule = NbSidebarModule_1 = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
            ],
            declarations: tslib.__spreadArrays(NB_SIDEBAR_COMPONENTS),
            exports: tslib.__spreadArrays(NB_SIDEBAR_COMPONENTS),
        })
    ], NbSidebarModule);
    return NbSidebarModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Specific tab container.
 *
 * ```ts
 * <nb-tab tabTitle="Users"
 *   badgeText="99+"
 *   badgeStatus="danger">
 *   <p>List of <strong>users</strong>.</p>
 * </nb-tab>
 ```
 */
var NbTabComponent = /** @class */ (function () {
    function NbTabComponent() {
        this.activeValue = false;
        this.responsiveValue = false;
        this.disabledValue = false;
        /**
         * Badge status (adds specific styles):
         * 'primary', 'info', 'success', 'warning', 'danger'
         * @param {string} val
         */
        this.badgeStatus = 'basic';
        this.init = false;
    }
    Object.defineProperty(NbTabComponent.prototype, "disabled", {
        /**
         * Item is disabled and cannot be opened.
         * @type {boolean}
         */
        get: function () {
            return this.disabledValue;
        },
        set: function (val) {
            this.disabledValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbTabComponent.prototype, "responsive", {
        get: function () {
            return this.responsiveValue;
        },
        /**
         * Show only icons when width is smaller than `tabs-icon-only-max-width`
         * @type {boolean}
         */
        set: function (val) {
            this.responsiveValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbTabComponent.prototype, "active", {
        /**
         * Specifies active tab
         * @returns {boolean}
         */
        get: function () {
            return this.activeValue;
        },
        set: function (val) {
            this.activeValue = convertToBoolProperty(val);
            if (this.activeValue) {
                this.init = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbTabComponent.prototype, "lazyLoad", {
        /**
         * Lazy load content before tab selection
         * TODO: rename, as lazy is by default, and this is more `instant load`
         * @param {boolean} val
         */
        set: function (val) {
            this.init = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbTabComponent.prototype, "tabTitle", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbTabComponent.prototype, "tabId", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbTabComponent.prototype, "tabIcon", void 0);
    tslib.__decorate([
        i0.Input('disabled'),
        i0.HostBinding('class.disabled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbTabComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbTabComponent.prototype, "responsive", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbTabComponent.prototype, "route", void 0);
    tslib.__decorate([
        i0.HostBinding('class.content-active'),
        tslib.__metadata("design:type", Boolean)
    ], NbTabComponent.prototype, "activeValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbTabComponent.prototype, "active", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbTabComponent.prototype, "lazyLoad", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbTabComponent.prototype, "badgeText", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbTabComponent.prototype, "badgeStatus", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbTabComponent.prototype, "badgePosition", void 0);
    NbTabComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-tab',
            template: "\n    <ng-container *ngIf=\"init\">\n      <ng-content></ng-content>\n    </ng-container>\n  "
        })
    ], NbTabComponent);
    return NbTabComponent;
}());
// TODO: Combine tabset with route-tabset, so that we can:
// - have similar interface
// - easy to migrate from one to another
// - can mix them both (route/content tab)
/**
 *
 * Dynamic tabset component.
 * @stacked-example(Showcase, tabset/tabset-showcase.component)
 *
 * Basic tabset example
 *
 * ```html
 * <nb-tabset>
 *  <nb-tab tabTitle="Simple Tab #1">
 *    Tab content 1
 *  </nb-tab>
 *  <nb-tab tabTitle="Simple Tab #2">
 *    Tab content 2
 *  </nb-tab>
 * </nb-tabset>
 * ```
 *
 * ### Installation
 *
 * Import `NbTabsetModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbTabsetModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * It is also possible to set a badge to a particular tab:
 * @stacked-example(Tab With Badge, tabset/tabset-badge.component)
 *
 * and we can set it to full a width of a parent component
 * @stacked-example(Full Width, tabset/tabset-width.component)
 *
 * `tabIcon` should be used to add an icon to the tab. Icon can also be combined with title.
 * `responsive` tab property if set allows you to hide the title on smaller screens
 * (`tabs-icon-only-max-width` property) for better responsive behaviour. You can open the following example and make
 * your screen smaller - titles will be hidden in the last tabset in the list:
 *
 * @stacked-example(Icon, tabset/tabset-icon.component)
 *
 * It is also possible to disable a tab using `disabled` property:
 * @stacked-example(Disabled Tab, tabset/tabset-disabled.component)
 *
 * @styles
 *
 * tabset-background-color:
 * tabset-border-radius:
 * tabset-shadow:
 * tabset-tab-background-color:
 * tabset-tab-padding:
 * tabset-tab-text-color:
 * tabset-tab-text-font-family:
 * tabset-tab-text-font-size:
 * tabset-tab-text-font-weight:
 * tabset-tab-text-line-height:
 * tabset-tab-text-transform:
 * tabset-tab-underline-width:
 * tabset-tab-underline-color:
 * tabset-tab-active-background-color:
 * tabset-tab-active-text-color:
 * tabset-tab-active-underline-color:
 * tabset-tab-focus-background-color:
 * tabset-tab-focus-text-color:
 * tabset-tab-focus-underline-color:
 * tabset-tab-hover-background-color:
 * tabset-tab-hover-text-color:
 * tabset-tab-hover-underline-color:
 * tabset-tab-disabled-background-color:
 * tabset-tab-disabled-text-color:
 * tabset-tab-disabled-underline-color:
 * tabset-divider-color:
 * tabset-divider-style:
 * tabset-divider-width:
 * tabset-content-background-color:
 * tabset-content-padding:
 * tabset-content-text-color:
 * tabset-content-text-font-family:
 * tabset-content-text-font-size:
 * tabset-content-text-font-weight:
 * tabset-content-text-line-height:
 * tabset-scrollbar-color:
 * tabset-scrollbar-background-color:
 * tabset-scrollbar-width:
 * tabset-tab-text-hide-breakpoint:
 */
var NbTabsetComponent = /** @class */ (function () {
    function NbTabsetComponent(route, changeDetectorRef) {
        this.route = route;
        this.changeDetectorRef = changeDetectorRef;
        this.fullWidthValue = false;
        /**
         * Emits when tab is selected
         * @type EventEmitter<any>
         */
        this.changeTab = new i0.EventEmitter();
    }
    Object.defineProperty(NbTabsetComponent.prototype, "fullWidth", {
        /**
         * Take full width of a parent
         * @param {boolean} val
         */
        set: function (val) {
            this.fullWidthValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    // TODO: refactoring this component, avoid change detection loop
    NbTabsetComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.route.params
            .pipe(rxjs_operators.map(function (params) {
            return _this.tabs.find(function (tab) { return _this.routeParam ? tab.route === params[_this.routeParam] : tab.active; });
        }), rxjs_operators.delay(0), rxjs_operators.map(function (tab) { return tab || _this.tabs.first; }), rxjs_operators.filter(function (tab) { return !!tab; }))
            .subscribe(function (tabToSelect) {
            _this.selectTab(tabToSelect);
            _this.changeDetectorRef.markForCheck();
        });
    };
    // TODO: navigate to routeParam
    NbTabsetComponent.prototype.selectTab = function (selectedTab) {
        if (!selectedTab.disabled) {
            this.tabs.forEach(function (tab) { return tab.active = tab === selectedTab; });
            this.changeTab.emit(selectedTab);
        }
    };
    tslib.__decorate([
        i0.ContentChildren(NbTabComponent),
        tslib.__metadata("design:type", i0.QueryList)
    ], NbTabsetComponent.prototype, "tabs", void 0);
    tslib.__decorate([
        i0.HostBinding('class.full-width'),
        tslib.__metadata("design:type", Boolean)
    ], NbTabsetComponent.prototype, "fullWidthValue", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbTabsetComponent.prototype, "fullWidth", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbTabsetComponent.prototype, "routeParam", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbTabsetComponent.prototype, "changeTab", void 0);
    NbTabsetComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-tabset',
            template: "\n    <ul class=\"tabset\">\n      <li *ngFor=\"let tab of tabs\"\n          (click)=\"selectTab(tab)\"\n          (keyup.space)=\"selectTab(tab)\"\n          (keyup.enter)=\"selectTab(tab)\"\n          [class.responsive]=\"tab.responsive\"\n          [class.active]=\"tab.active\"\n          [class.disabled]=\"tab.disabled\"\n          [attr.tabindex]=\"tab.disabled ? -1 : 0\"\n          class=\"tab\">\n        <a href (click)=\"$event.preventDefault()\" tabindex=\"-1\" class=\"tab-link\">\n          <nb-icon *ngIf=\"tab.tabIcon\" [config]=\"tab.tabIcon\"></nb-icon>\n          <span *ngIf=\"tab.tabTitle\" class=\"tab-text\">{{ tab.tabTitle }}</span>\n        </a>\n        <nb-badge *ngIf=\"tab.badgeText\"\n          [text]=\"tab.badgeText\"\n          [status]=\"tab.badgeStatus\"\n          [position]=\"tab.badgePosition\">\n        </nb-badge>\n      </li>\n    </ul>\n    <ng-content select=\"nb-tab\"></ng-content>\n  ",
            styles: [":host{display:block}:host.full-width .tabset{justify-content:space-around}:host ::ng-deep nb-tab{flex:1;-ms-flex:1 1 auto;overflow:auto;display:none}:host ::ng-deep nb-tab.content-active{display:block}:host .tabset{display:flex;flex-direction:row;list-style-type:none;margin:0;padding:0}:host .tabset .tab{margin-bottom:-1px;text-align:center;position:relative}:host .tabset .tab.active a::before{display:block}:host .tabset .tab a{display:flex;position:relative;text-decoration:none}:host .tabset .tab a::before{position:absolute;content:'';width:100%;border-radius:3px;bottom:-2px;left:0}:host .tabset .tab a nb-icon{vertical-align:middle}[dir=ltr] :host .tabset .tab a nb-icon+span{margin-left:.5rem}[dir=rtl] :host .tabset .tab a nb-icon+span{margin-right:.5rem}\n"]
        }),
        tslib.__metadata("design:paramtypes", [_angular_router.ActivatedRoute,
            i0.ChangeDetectorRef])
    ], NbTabsetComponent);
    return NbTabsetComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Badge is a simple labeling component.
 * It can be used to add additional information to any content or highlight unread items.
 *
 * Element is absolute positioned, so parent should be
 * [positioned element](https://developer.mozilla.org/en-US/docs/Web/CSS/position).
 * It means parent `position` should be set to anything except `static`, e.g. `relative`,
 * `absolute`, `fixed`, or `sticky`.
 *
 * ### Installation
 *
 * Import `NbBadgeModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbBadgeModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Badge with default position and status(color):
 *
 * ```html
 * <nb-badge text="badgeText"></nb-badge>
 * ```
 *
 * For example, badge can be placed into nb-card header:
 * @stacked-example(Showcase, badge/badge-showcase.component)
 *
 * Badge located on the bottom right with warning status:
 *
 * ```html
 * <nb-badge text="badgeText" status="warning" position="bottom right">
 * </nb-badge>
 * ```
 *
 * @styles
 *
 * badge-border-radius:
 * badge-text-font-family:
 * badge-text-font-size:
 * badge-text-font-weight:
 * badge-text-line-height:
 * badge-padding:
 * badge-basic-background-color:
 * badge-basic-text-color:
 * badge-primary-background-color:
 * badge-primary-text-color:
 * badge-success-background-color:
 * badge-success-text-color:
 * badge-info-background-color:
 * badge-info-text-color:
 * badge-warning-background-color:
 * badge-warning-text-color:
 * badge-danger-background-color:
 * badge-danger-text-color:
 * badge-control-background-color:
 * badge-control-text-color:
 */
var NbBadgeComponent = /** @class */ (function () {
    function NbBadgeComponent() {
        /**
         * Text to display
         * @type string
         */
        this.text = '';
        this._defaultPosition = 'top right';
        this._position = this._defaultPosition;
        this._status = 'basic';
    }
    Object.defineProperty(NbBadgeComponent.prototype, "position", {
        /**
         * Badge position
         *
         * Can be set to any class or to one of predefined positions:
         * 'top left', 'top right', 'bottom left', 'bottom right',
         * 'top start', 'top end', 'bottom start', 'bottom end'
         * @type string
         */
        get: function () {
            return this._position;
        },
        set: function (value) {
            this._position = value || this._defaultPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "status", {
        /**
         * Badge status (adds specific styles):
         * 'basic', 'primary', 'info', 'success', 'warning', 'danger', 'control'
         */
        get: function () {
            return this._status;
        },
        set: function (value) {
            if (value === '') {
                emptyStatusWarning('NbBadge');
                value = 'basic';
            }
            this._status = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "primary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "success", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "info", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "warning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "danger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "basic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "control", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "top", {
        get: function () {
            return this.position.includes('top');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "right", {
        get: function () {
            return this.position.includes('right');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "bottom", {
        get: function () {
            return this.position.includes('bottom');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "left", {
        get: function () {
            return this.position.includes('left');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "start", {
        get: function () {
            return this.position.includes('start');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBadgeComponent.prototype, "end", {
        get: function () {
            return this.position.includes('end');
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbBadgeComponent.prototype, "text", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbBadgeComponent.prototype, "position", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbBadgeComponent.prototype, "status", null);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "control", null);
    tslib.__decorate([
        i0.HostBinding('class.position-top'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "top", null);
    tslib.__decorate([
        i0.HostBinding('class.position-right'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "right", null);
    tslib.__decorate([
        i0.HostBinding('class.position-bottom'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "bottom", null);
    tslib.__decorate([
        i0.HostBinding('class.position-left'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "left", null);
    tslib.__decorate([
        i0.HostBinding('class.position-start'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "start", null);
    tslib.__decorate([
        i0.HostBinding('class.position-end'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbBadgeComponent.prototype, "end", null);
    NbBadgeComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-badge',
            template: "{{text}}",
            styles: [":host{position:absolute;text-align:center;white-space:nowrap;vertical-align:baseline}:host(.position-top){top:0}:host(.position-right){right:0}:host(.position-bottom){bottom:0}:host(.position-left){left:0}[dir=ltr] :host(.position-start){left:0}[dir=rtl] :host(.position-start){right:0}[dir=ltr] :host(.position-end){right:0}[dir=rtl] :host(.position-end){left:0}\n"]
        })
    ], NbBadgeComponent);
    return NbBadgeComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbBadgeModule = /** @class */ (function () {
    function NbBadgeModule() {
    }
    NbBadgeModule = tslib.__decorate([
        i0.NgModule({
            exports: [NbBadgeComponent],
            declarations: [NbBadgeComponent],
        })
    ], NbBadgeModule);
    return NbBadgeModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_TABSET_COMPONENTS = [
    NbTabsetComponent,
    NbTabComponent,
];
var NbTabsetModule = /** @class */ (function () {
    function NbTabsetModule() {
    }
    NbTabsetModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
                NbBadgeModule,
                NbIconModule,
            ],
            declarations: tslib.__spreadArrays(NB_TABSET_COMPONENTS),
            exports: tslib.__spreadArrays(NB_TABSET_COMPONENTS),
        })
    ], NbTabsetModule);
    return NbTabsetModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Represents a component showing a user avatar (picture) with a user name on the right.
 * @stacked-example(Showcase, user/user-showcase.component)
 *
 * ```ts
 *   <nb-user name="John Doe" title="Engineer"></nb-user>
 * ```
 *
 * ### Installation
 *
 * Import `NbUserModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbUserModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Available in multiple sizes:
 * @stacked-example(Multiple Sizes, user/user-sizes.component)
 *
 *
 * You can hide unnecessary captions (name, title or both):
 * @stacked-example(Hide captions in user component, user/user-hide-captions.component)
 *
 *
 * You can set custom avatar background-color, user image (as link or BASE64 string) and disable user initials:
 * @stacked-example(Avatar image settings, user/user-avatar-settings.component)
 *
 * Component shape could be controlled with `shape` input.
 * @stacked-example(Shapes, user/user-shape.component)
 *
 * @styles
 *
 * user-picture-box-background-color:
 * user-picture-box-border-color:
 * user-picture-box-border-width:
 * user-initials-text-color:
 * user-initials-text-font-family:
 * user-initials-text-font-weight:
 * user-name-text-color:
 * user-name-text-font-family:
 * user-name-text-font-weight:
 * user-title-text-color:
 * user-title-text-font-family:
 * user-title-text-font-weight:
 * user-rectangle-border-radius:
 * user-semi-round-border-radius:
 * user-round-border-radius:
 * user-tiny-height:
 * user-tiny-width:
 * user-tiny-initials-text-font-size:
 * user-tiny-initials-text-line-height:
 * user-tiny-name-text-font-size:
 * user-tiny-name-text-line-height:
 * user-tiny-title-text-font-size:
 * user-tiny-title-text-line-height:
 * user-small-height:
 * user-small-width:
 * user-small-initials-text-font-size:
 * user-small-initials-text-line-height:
 * user-small-name-text-font-size:
 * user-small-name-text-line-height:
 * user-small-title-text-font-size:
 * user-small-title-text-line-height:
 * user-medium-height:
 * user-medium-width:
 * user-medium-initials-text-font-size:
 * user-medium-initials-text-line-height:
 * user-medium-name-text-font-size:
 * user-medium-name-text-line-height:
 * user-medium-title-text-font-size:
 * user-medium-title-text-line-height:
 * user-large-height:
 * user-large-width:
 * user-large-initials-text-font-size:
 * user-large-initials-text-line-height:
 * user-large-name-text-font-size:
 * user-large-name-text-line-height:
 * user-large-title-text-font-size:
 * user-large-title-text-line-height:
 * user-giant-height:
 * user-giant-width:
 * user-giant-initials-text-font-size:
 * user-giant-initials-text-line-height:
 * user-giant-name-text-font-size:
 * user-giant-name-text-line-height:
 * user-giant-title-text-font-size:
 * user-giant-title-text-line-height:
 */
var NbUserComponent = /** @class */ (function () {
    function NbUserComponent(domSanitizer) {
        this.domSanitizer = domSanitizer;
        /**
         * Specifies a name to be shown on the right of a user picture
         * @type string
         */
        this.name = 'Anonymous';
        /**
         * Size of the component.
         * Possible values: `tiny`, `small`, `medium` (default), `large`, 'giant'.
         */
        this.size = 'medium';
        /**
         * Shape of the picture box.
         * Possible values: `rectangle`, `semi-round`, `round`.
         */
        this.shape = 'round';
        this._showName = true;
        this._showTitle = true;
        this._showInitials = true;
        /**
         * Badge status (adds specific styles):
         * `primary`, `info`, `success`, `warning`, `danger`
         * @param {string} val
         */
        this.badgeStatus = 'basic';
    }
    Object.defineProperty(NbUserComponent.prototype, "picture", {
        /**
         * Absolute path to a user picture or base64 image.
         * User name initials will be shown if no picture specified (JD for John Doe).
         * @type string
         */
        set: function (value) {
            this.imageBackgroundStyle = value ? this.domSanitizer.bypassSecurityTrustStyle("url(" + value + ")") : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbUserComponent.prototype, "showName", {
        /**
         * Whether to show a user name or not
         */
        get: function () {
            return this._showName;
        },
        set: function (val) {
            this._showName = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbUserComponent.prototype, "showTitle", {
        /**
         * Whether to show a user title or not
         * @type boolean
         */
        get: function () {
            return this._showTitle;
        },
        set: function (val) {
            this._showTitle = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbUserComponent.prototype, "showInitials", {
        /**
         * Whether to show a user initials (if no picture specified) or not
         * @type boolean
         */
        get: function () {
            return this._showInitials;
        },
        set: function (val) {
            this._showInitials = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbUserComponent.prototype, "onlyPicture", {
        /**
         * Whether to show only a picture or also show the name and title
         * @type boolean
         */
        get: function () {
            return !this.showName && !this.showTitle;
        },
        set: function (val) {
            this.showName = this.showTitle = !convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbUserComponent.prototype, "tiny", {
        get: function () {
            return this.size === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbUserComponent.prototype, "small", {
        get: function () {
            return this.size === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbUserComponent.prototype, "medium", {
        get: function () {
            return this.size === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbUserComponent.prototype, "large", {
        get: function () {
            return this.size === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbUserComponent.prototype, "giant", {
        get: function () {
            return this.size === 'giant';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbUserComponent.prototype, "rectangle", {
        get: function () {
            return this.shape === 'rectangle';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbUserComponent.prototype, "semiRound", {
        get: function () {
            return this.shape === 'semi-round';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbUserComponent.prototype, "round", {
        get: function () {
            return this.shape === 'round';
        },
        enumerable: true,
        configurable: true
    });
    NbUserComponent.prototype.getInitials = function () {
        if (this.name) {
            var names = this.name.split(' ');
            return names.map(function (n) { return n.charAt(0); }).splice(0, 2).join('').toUpperCase();
        }
        return '';
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbUserComponent.prototype, "name", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbUserComponent.prototype, "title", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbUserComponent.prototype, "picture", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbUserComponent.prototype, "color", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbUserComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbUserComponent.prototype, "shape", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbUserComponent.prototype, "showName", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbUserComponent.prototype, "showTitle", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbUserComponent.prototype, "showInitials", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbUserComponent.prototype, "onlyPicture", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbUserComponent.prototype, "badgeText", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbUserComponent.prototype, "badgeStatus", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbUserComponent.prototype, "badgePosition", void 0);
    tslib.__decorate([
        i0.HostBinding('class.size-tiny'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbUserComponent.prototype, "tiny", null);
    tslib.__decorate([
        i0.HostBinding('class.size-small'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbUserComponent.prototype, "small", null);
    tslib.__decorate([
        i0.HostBinding('class.size-medium'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbUserComponent.prototype, "medium", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbUserComponent.prototype, "large", null);
    tslib.__decorate([
        i0.HostBinding('class.size-giant'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbUserComponent.prototype, "giant", null);
    tslib.__decorate([
        i0.HostBinding('class.shape-rectangle'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbUserComponent.prototype, "rectangle", null);
    tslib.__decorate([
        i0.HostBinding('class.shape-semi-round'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbUserComponent.prototype, "semiRound", null);
    tslib.__decorate([
        i0.HostBinding('class.shape-round'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbUserComponent.prototype, "round", null);
    NbUserComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-user',
            template: "<div class=\"user-container\">\n  <div *ngIf=\"imageBackgroundStyle\" class=\"user-picture image\" [style.background-image]=\"imageBackgroundStyle\">\n    <nb-badge *ngIf=\"badgeText\" [text]=\"badgeText\" [status]=\"badgeStatus\" [position]=\"badgePosition\"></nb-badge>\n  </div>\n  <div *ngIf=\"!imageBackgroundStyle\" class=\"user-picture initials\" [style.background-color]=\"color\">\n    <ng-container *ngIf=\"showInitials\">\n      {{ getInitials() }}\n    </ng-container>\n    <nb-badge *ngIf=\"badgeText\" [text]=\"badgeText\" [status]=\"badgeStatus\" [position]=\"badgePosition\"></nb-badge>\n  </div>\n\n  <div class=\"info-container\">\n    <div *ngIf=\"showName && name\" class=\"user-name\">{{ name }}</div>\n    <div *ngIf=\"showTitle && title\" class=\"user-title\">{{ title }}</div>\n  </div>\n</div>\n",
            styles: [":host{display:flex}:host .user-container{position:relative;display:flex;align-items:center}:host .user-picture{position:relative;flex-shrink:0}:host .user-picture.image{background-size:cover;background-repeat:no-repeat}:host .user-picture.initials{display:flex;align-items:center;justify-content:center}[dir=rtl] :host .user-name,[dir=rtl] :host .user-title{text-align:right}[dir=ltr] :host .info-container{margin-left:.5rem}[dir=rtl] :host .info-container{margin-right:.5rem}\n"]
        }),
        tslib.__metadata("design:paramtypes", [_angular_platformBrowser.DomSanitizer])
    ], NbUserComponent);
    return NbUserComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_USER_COMPONENTS = [
    NbUserComponent,
];
var NbUserModule = /** @class */ (function () {
    function NbUserModule() {
    }
    NbUserModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
                NbBadgeModule,
            ],
            declarations: tslib.__spreadArrays(NB_USER_COMPONENTS),
            exports: tslib.__spreadArrays(NB_USER_COMPONENTS),
        })
    ], NbUserModule);
    return NbUserModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Action item, display a link with an icon, or any other content provided instead.
 */
var NbActionComponent = /** @class */ (function () {
    function NbActionComponent() {
        /**
         * Optional title for mouseover
         * @type string
         */
        this.title = '';
        this._disabled = false;
        /**
         * Badge status (adds specific styles):
         * 'primary', 'info', 'success', 'warning', 'danger'
         * @param {string} val
         */
        this.badgeStatus = 'basic';
    }
    Object.defineProperty(NbActionComponent.prototype, "disabled", {
        /**
         * Visually disables the item
         * @type boolean
         */
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            this._disabled = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbActionComponent.prototype, "link", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbActionComponent.prototype, "href", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbActionComponent.prototype, "title", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbActionComponent.prototype, "icon", void 0);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.disabled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbActionComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbActionComponent.prototype, "badgeText", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbActionComponent.prototype, "badgeStatus", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbActionComponent.prototype, "badgePosition", void 0);
    NbActionComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-action',
            template: "\n    <ng-container *ngIf=\"icon; else projectedContent\">\n      <a class=\"icon-container\"\n         [routerLink]=\"link\"\n         [title]=\"title\"\n         *ngIf=\"link\">\n        <nb-icon [config]=\"icon\"></nb-icon>\n      </a>\n      <a class=\"icon-container\"\n         [href]=\"href\"\n         [title]=\"title\"\n         *ngIf=\"href && !link\">\n        <nb-icon [config]=\"icon\"></nb-icon>\n      </a>\n      <a class=\"icon-container\"\n         href=\"#\"\n         [title]=\"title\"\n         *ngIf=\"!href && !link\"\n         (click)=\"$event.preventDefault()\">\n        <nb-icon [config]=\"icon\"></nb-icon>\n      </a>\n    </ng-container>\n\n    <ng-template #projectedContent>\n      <ng-content></ng-content>\n    </ng-template>\n\n    <nb-badge *ngIf=\"badgeText\"\n              [text]=\"badgeText\"\n              [status]=\"badgeStatus\"\n              [position]=\"badgePosition\">\n    </nb-badge>\n  ",
            styles: [":host{background:transparent;display:flex;align-items:center;position:relative}:host(.disabled){cursor:not-allowed}:host(.disabled) a,:host(.disabled) nb-icon{cursor:not-allowed}:host-context(nb-actions.full-width){justify-content:center;width:100%}a.icon-container:hover,a.icon-container:focus{text-decoration:none}nb-icon:hover{cursor:pointer}\n"]
        })
    ], NbActionComponent);
    return NbActionComponent;
}());
/**
 * Shows a horizontal list of actions, available in multiple sizes.
 * Aligns items vertically.
 *
 * @stacked-example(Showcase, action/action-showcase.component)
 *
 * Basic actions setup:
 * ```html
 * <nb-actions size="small">
 *   <nb-action icon="nb-search"></nb-action>
 *   <nb-action icon="nb-power-circled"></nb-action>
 *   <nb-action icon="nb-person"></nb-action>
 * </nb-actions>
 * ```
 * ### Installation
 *
 * Import `NbActionsModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbActionsModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Multiple sizes example:
 * @stacked-example(Multiple Sizes, action/action-sizes.component)
 *
 * It is also possible to specify a `badge` value:
 *
 * @stacked-example(Action Badge, action/action-badge.component)
 *
 * and we can set it to full a width of a parent component
 * @stacked-example(Full Width, action/action-width.component)
 *
 * @styles
 *
 * actions-background-color:
 * actions-divider-color:
 * actions-divider-style:
 * actions-divider-width:
 * actions-icon-color:
 * actions-text-color:
 * actions-text-font-family:
 * actions-text-font-weight:
 * actions-text-line-height:
 * actions-disabled-icon-color:
 * actions-disabled-text-color:
 * actions-tiny-height:
 * actions-tiny-icon-height:
 * actions-tiny-padding:
 * actions-tiny-text-font-size:
 * actions-small-height:
 * actions-small-icon-height:
 * actions-small-padding:
 * actions-small-text-font-size:
 * actions-medium-height:
 * actions-medium-icon-height:
 * actions-medium-padding:
 * actions-medium-text-font-size:
 * actions-large-height:
 * actions-large-icon-height:
 * actions-large-padding:
 * actions-large-text-font-size:
 * actions-giant-height:
 * actions-giant-icon-height:
 * actions-giant-padding:
 * actions-giant-text-font-size:
 */
var NbActionsComponent = /** @class */ (function () {
    function NbActionsComponent() {
        this._size = 'small';
        this._fullWidth = false;
    }
    Object.defineProperty(NbActionsComponent.prototype, "size", {
        /**
         * Size of the component: 'tiny', 'small' (default), 'medium', 'large', 'giant'
         */
        get: function () {
            return this._size;
        },
        set: function (value) {
            this._size = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbActionsComponent.prototype, "fullWidth", {
        /**
         * Component will fill full width of the container
         */
        get: function () {
            return this._fullWidth;
        },
        set: function (value) {
            this._fullWidth = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbActionsComponent.prototype, "tiny", {
        get: function () {
            return this.size === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbActionsComponent.prototype, "small", {
        get: function () {
            return this.size === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbActionsComponent.prototype, "medium", {
        get: function () {
            return this.size === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbActionsComponent.prototype, "large", {
        get: function () {
            return this.size === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbActionsComponent.prototype, "giant", {
        get: function () {
            return this.size === 'giant';
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbActionsComponent.prototype, "size", null);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.full-width'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbActionsComponent.prototype, "fullWidth", null);
    tslib.__decorate([
        i0.HostBinding('class.size-tiny'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbActionsComponent.prototype, "tiny", null);
    tslib.__decorate([
        i0.HostBinding('class.size-small'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbActionsComponent.prototype, "small", null);
    tslib.__decorate([
        i0.HostBinding('class.size-medium'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbActionsComponent.prototype, "medium", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbActionsComponent.prototype, "large", null);
    tslib.__decorate([
        i0.HostBinding('class.size-giant'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbActionsComponent.prototype, "giant", null);
    NbActionsComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-actions',
            template: "\n    <ng-content select=\"nb-action\"></ng-content>\n  ",
            styles: [":host{display:flex;align-items:center}\n"]
        })
    ], NbActionsComponent);
    return NbActionsComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_ACTIONS_COMPONENTS = [
    NbActionComponent,
    NbActionsComponent,
];
var NbActionsModule = /** @class */ (function () {
    function NbActionsModule() {
    }
    NbActionsModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
                NbBadgeModule,
                NbIconModule,
            ],
            declarations: tslib.__spreadArrays(NB_ACTIONS_COMPONENTS),
            exports: tslib.__spreadArrays(NB_ACTIONS_COMPONENTS),
        })
    ], NbActionsModule);
    return NbActionsModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Search component service, connects your code to a page-level search component.
 */
var NbSearchService = /** @class */ (function () {
    function NbSearchService() {
        this.searchSubmittings$ = new rxjs.Subject();
        this.searchActivations$ = new rxjs.Subject();
        this.searchDeactivations$ = new rxjs.Subject();
        this.searchInput$ = new rxjs.Subject();
    }
    /***
     * Activate (open) search component
     * @param {string} searchType
     * @param {string} tag
     */
    NbSearchService.prototype.activateSearch = function (searchType, tag) {
        this.searchActivations$.next({ searchType: searchType, tag: tag });
    };
    /**
     * Deactibate (close) search component
     * @param {string} searchType
     * @param {string} tag
     */
    NbSearchService.prototype.deactivateSearch = function (searchType, tag) {
        this.searchDeactivations$.next({ searchType: searchType, tag: tag });
    };
    /**
     * Trigger search submit
     * @param {string} term
     * @param {string} tag
     */
    NbSearchService.prototype.submitSearch = function (term, tag) {
        this.searchSubmittings$.next({ term: term, tag: tag });
    };
    /**
     * Trigger search submit by input event
     * @param {string} term
     * @param {string} tag
     */
    NbSearchService.prototype.searchInput = function (term, tag) {
        this.searchInput$.next({ term: term, tag: tag });
    };
    /**
     * Subscribe to 'activate' event
     * @returns Observable<{searchType: string; tag?: string}>
     */
    NbSearchService.prototype.onSearchActivate = function () {
        return this.searchActivations$.pipe(rxjs_operators.share());
    };
    /**
     * Subscribe to 'deactivate' event
     * @returns Observable<{searchType: string; tag?: string}>
     */
    NbSearchService.prototype.onSearchDeactivate = function () {
        return this.searchDeactivations$.pipe(rxjs_operators.share());
    };
    /**
     * Subscribe to 'submit' event (when submit button clicked)
     * @returns Observable<{term: string; tag?: string}>
     */
    NbSearchService.prototype.onSearchSubmit = function () {
        return this.searchSubmittings$.pipe(rxjs_operators.share());
    };
    /**
     * Subscribe to input event
     * @returns Observable<{term: string; tag?: string}>
     */
    NbSearchService.prototype.onSearchInput = function () {
        return this.searchInput$.pipe(rxjs_operators.share());
    };
    NbSearchService = tslib.__decorate([
        i0.Injectable()
    ], NbSearchService);
    return NbSearchService;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * search-field-component is used under the hood by nb-search component
 * can't be used itself
 */
var NbSearchFieldComponent = /** @class */ (function () {
    function NbSearchFieldComponent() {
        this.show = false;
        this.close = new i0.EventEmitter();
        this.search = new i0.EventEmitter();
        this.searchInput = new i0.EventEmitter();
    }
    NbSearchFieldComponent_1 = NbSearchFieldComponent;
    Object.defineProperty(NbSearchFieldComponent.prototype, "showClass", {
        get: function () {
            return this.show;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSearchFieldComponent.prototype, "modalZoomin", {
        get: function () {
            return this.type === NbSearchFieldComponent_1.TYPE_MODAL_ZOOMIN;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSearchFieldComponent.prototype, "rotateLayout", {
        get: function () {
            return this.type === NbSearchFieldComponent_1.TYPE_ROTATE_LAYOUT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSearchFieldComponent.prototype, "modalMove", {
        get: function () {
            return this.type === NbSearchFieldComponent_1.TYPE_MODAL_MOVE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSearchFieldComponent.prototype, "curtain", {
        get: function () {
            return this.type === NbSearchFieldComponent_1.TYPE_CURTAIN;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSearchFieldComponent.prototype, "columnCurtain", {
        get: function () {
            return this.type === NbSearchFieldComponent_1.TYPE_COLUMN_CURTAIN;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSearchFieldComponent.prototype, "modalDrop", {
        get: function () {
            return this.type === NbSearchFieldComponent_1.TYPE_MODAL_DROP;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSearchFieldComponent.prototype, "modalHalf", {
        get: function () {
            return this.type === NbSearchFieldComponent_1.TYPE_MODAL_HALF;
        },
        enumerable: true,
        configurable: true
    });
    NbSearchFieldComponent.prototype.ngOnChanges = function (_a) {
        var show = _a.show;
        var becameHidden = !show.isFirstChange() && show.currentValue === false;
        if (becameHidden && this.inputElement) {
            this.inputElement.nativeElement.value = '';
        }
        this.focusInput();
    };
    NbSearchFieldComponent.prototype.ngAfterViewInit = function () {
        this.focusInput();
    };
    NbSearchFieldComponent.prototype.emitClose = function () {
        this.close.emit();
    };
    NbSearchFieldComponent.prototype.submitSearch = function (term) {
        if (term) {
            this.search.emit(term);
        }
    };
    NbSearchFieldComponent.prototype.emitSearchInput = function (term) {
        this.searchInput.emit(term);
    };
    NbSearchFieldComponent.prototype.focusInput = function () {
        if (this.show && this.inputElement) {
            this.inputElement.nativeElement.focus();
        }
    };
    var NbSearchFieldComponent_1;
    NbSearchFieldComponent.TYPE_MODAL_ZOOMIN = 'modal-zoomin';
    NbSearchFieldComponent.TYPE_ROTATE_LAYOUT = 'rotate-layout';
    NbSearchFieldComponent.TYPE_MODAL_MOVE = 'modal-move';
    NbSearchFieldComponent.TYPE_CURTAIN = 'curtain';
    NbSearchFieldComponent.TYPE_COLUMN_CURTAIN = 'column-curtain';
    NbSearchFieldComponent.TYPE_MODAL_DROP = 'modal-drop';
    NbSearchFieldComponent.TYPE_MODAL_HALF = 'modal-half';
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSearchFieldComponent.prototype, "type", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSearchFieldComponent.prototype, "placeholder", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSearchFieldComponent.prototype, "hint", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbSearchFieldComponent.prototype, "show", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbSearchFieldComponent.prototype, "close", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbSearchFieldComponent.prototype, "search", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbSearchFieldComponent.prototype, "searchInput", void 0);
    tslib.__decorate([
        i0.ViewChild('searchInput'),
        tslib.__metadata("design:type", i0.ElementRef)
    ], NbSearchFieldComponent.prototype, "inputElement", void 0);
    tslib.__decorate([
        i0.HostBinding('class.show'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSearchFieldComponent.prototype, "showClass", null);
    tslib.__decorate([
        i0.HostBinding('class.modal-zoomin'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSearchFieldComponent.prototype, "modalZoomin", null);
    tslib.__decorate([
        i0.HostBinding('class.rotate-layout'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSearchFieldComponent.prototype, "rotateLayout", null);
    tslib.__decorate([
        i0.HostBinding('class.modal-move'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSearchFieldComponent.prototype, "modalMove", null);
    tslib.__decorate([
        i0.HostBinding('class.curtain'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSearchFieldComponent.prototype, "curtain", null);
    tslib.__decorate([
        i0.HostBinding('class.column-curtain'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSearchFieldComponent.prototype, "columnCurtain", null);
    tslib.__decorate([
        i0.HostBinding('class.modal-drop'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSearchFieldComponent.prototype, "modalDrop", null);
    tslib.__decorate([
        i0.HostBinding('class.modal-half'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSearchFieldComponent.prototype, "modalHalf", null);
    NbSearchFieldComponent = NbSearchFieldComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'nb-search-field',
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            template: "\n    <div class=\"search\" (keyup.esc)=\"emitClose()\">\n      <button (click)=\"emitClose()\" nbButton ghost class=\"close-button\">\n        <nb-icon icon=\"close-outline\" pack=\"nebular-essentials\"></nb-icon>\n      </button>\n      <div class=\"form-wrapper\">\n        <form class=\"form\" (keyup.enter)=\"submitSearch(searchInput.value)\">\n          <div class=\"form-content\">\n            <input class=\"search-input\"\n                   #searchInput\n                   (input)=\"emitSearchInput(searchInput.value)\"\n                   autocomplete=\"off\"\n                   [attr.placeholder]=\"placeholder\"\n                   tabindex=\"-1\"\n                   (blur)=\"focusInput()\"/>\n          </div>\n          <span class=\"info\">{{ hint }}</span>\n        </form>\n      </div>\n    </div>\n  ",
            styles: [":host button{margin:0;padding:0;cursor:pointer;border:none;background:none}:host button:focus{box-shadow:none;outline:none}:host input{border-top:0;border-right:0;border-left:0;background:transparent;border-radius:0;line-height:1;display:inline-block;box-sizing:border-box;padding:0.05rem 0;-webkit-appearance:none}:host input:focus{outline:none}:host input::placeholder{opacity:0.3}:host span{font-size:90%;font-weight:bold;display:block;width:75%;margin:0 auto;padding:0.85rem 0;text-align:right}:host.modal-zoomin{display:block}:host.modal-zoomin .search{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;position:fixed;z-index:1050;top:0;left:0;width:100%;height:100vh;pointer-events:none;opacity:0;transition:opacity 0.5s}:host.modal-zoomin .search::before,:host.modal-zoomin .search::after{content:'';position:absolute;width:calc(100% + 15px);height:calc(100% + 15px);pointer-events:none}:host.modal-zoomin .search::before{top:0;left:0;border-right-width:0;border-bottom-width:0;transform:translate3d(-15px, -15px, 0)}:host.modal-zoomin .search::after{right:0;bottom:0;border-top-width:0;border-left-width:0;transform:translate3d(15px, 15px, 0)}:host.modal-zoomin .search button{position:absolute;top:3rem;font-size:2.5rem}[dir=ltr] :host.modal-zoomin .search button{right:3rem}[dir=rtl] :host.modal-zoomin .search button{left:3rem}:host.modal-zoomin .search input{font-size:10vw;width:75%}:host.modal-zoomin .search button{opacity:0;transform:scale3d(0.8, 0.8, 1);transition:opacity 0.5s, transform 0.5s}:host.modal-zoomin .search form{opacity:0;transform:scale3d(0.8, 0.8, 1);transition:opacity 0.5s, transform 0.5s}:host.modal-zoomin.show .search{pointer-events:auto;opacity:1}:host.modal-zoomin.show .search::before,:host.modal-zoomin.show .search::after{transform:translate3d(0, 0, 0);transition:transform 0.5s}:host.modal-zoomin.show .search button{opacity:1;transform:scale3d(1, 1, 1)}:host.modal-zoomin.show .search form{opacity:1;transform:scale3d(1, 1, 1)}@media screen and (max-width: 40rem){:host.modal-zoomin form{margin:5rem 0 1rem}:host.modal-zoomin span{text-align:left}}\n", "::ng-deep nb-layout.rotate-layout{position:fixed;overflow:hidden;width:100%}::ng-deep nb-layout.rotate-layout .scrollable-container{position:relative;z-index:10001;transition:transform 0.5s cubic-bezier(0.2, 1, 0.3, 1)}::ng-deep nb-layout.rotate-layout.with-search .scrollable-container{transition:transform 0.5s cubic-bezier(0.2, 1, 0.3, 1);transform-origin:50vw 50vh;transform:perspective(1000px) translate3d(0, 50vh, 0) rotate3d(1, 0, 0, 30deg);pointer-events:none}:host.rotate-layout{position:absolute;display:block;width:100vw;height:100vh;pointer-events:none;opacity:0;transition-property:opacity;transition-delay:0.4s}:host.rotate-layout .search{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;z-index:1050;position:fixed;top:0;left:0;width:100%;height:50vh;pointer-events:none;opacity:0;transition:opacity 0.5s;transition-timing-function:cubic-bezier(0.2, 1, 0.3, 1)}:host.rotate-layout .search button{position:absolute;top:3rem;font-size:2.5rem;opacity:0;transform:scale3d(0.8, 0.8, 1);transition:opacity 0.5s, transform 0.5s;transition-timing-function:cubic-bezier(0.2, 1, 0.3, 1)}[dir=ltr] :host.rotate-layout .search button{right:3rem}[dir=rtl] :host.rotate-layout .search button{left:3rem}:host.rotate-layout .search form{margin:5rem 0;opacity:0;transform:scale3d(0.7, 0.7, 1);transition:opacity 0.5s, transform 0.5s;transition-timing-function:cubic-bezier(0.2, 1, 0.3, 1)}:host.rotate-layout .search input{font-size:7vw;width:75%}:host.rotate-layout.show{opacity:1;transition-delay:0s}:host.rotate-layout.show .search{pointer-events:auto;opacity:1}:host.rotate-layout.show .search button{opacity:1;transform:scale3d(1, 1, 1)}:host.rotate-layout.show .search form{opacity:1;transform:scale3d(1, 1, 1)}\n", "::ng-deep nb-layout.modal-move .layout{transition:transform 0.5s}::ng-deep nb-layout.modal-move.with-search .layout{transform:scale3d(0.8, 0.8, 1);pointer-events:none}:host.modal-move .search{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;position:fixed;z-index:1050;top:0;left:0;width:100%;height:100vh;pointer-events:none;opacity:0;transition:opacity 0.5s}:host.modal-move .search button{position:absolute;top:3rem;font-size:2.5rem;opacity:0;transition:opacity 0.5s}[dir=ltr] :host.modal-move .search button{right:3rem}[dir=rtl] :host.modal-move .search button{left:3rem}:host.modal-move .search form{margin:5rem 0;opacity:0;transform:scale3d(0.8, 0.8, 1);transition:opacity 0.5s, transform 0.5s}:host.modal-move .search input{font-size:10vw;width:75%;transform:scale3d(0, 1, 1);transform-origin:0 50%;transition:transform 0.3s}:host.modal-move.show .search{pointer-events:auto;opacity:1}:host.modal-move.show .search button{opacity:1}:host.modal-move.show .search form{opacity:1;transform:scale3d(1, 1, 1)}:host.modal-move.show .search input{transform:scale3d(1, 1, 1);transition-duration:0.5s}@media screen and (max-width: 40rem){:host.modal-move span{text-align:left}}\n", ":host.curtain .search{position:fixed;z-index:1050;top:0;left:100%;overflow:hidden;height:100vh;width:100%;padding:3rem;pointer-events:none;transition:transform 0.3s;transition-delay:0.4s;transition-timing-function:ease-out}:host.curtain .search::after{content:'';position:absolute;top:0;left:0;width:100%;height:100%;transition:transform 0.3s;transition-timing-function:ease-out}:host.curtain .search button{font-size:2.5rem;position:absolute;top:3rem;transition:opacity 0.1s;transition-delay:0.3s}[dir=ltr] :host.curtain .search button{right:3rem}[dir=rtl] :host.curtain .search button{left:3rem}:host.curtain .search form{width:50%;opacity:0;transform:scale3d(0.8, 0.8, 1);transition:opacity 0.5s, transform 0.5s}:host.curtain .search input{width:100%;font-size:6vw}:host.curtain.show .search{width:100%;pointer-events:auto;transform:translate3d(-100%, 0, 0);transition-delay:0s}:host.curtain.show .search::after{transform:translate3d(100%, 0, 0);transition-delay:0.4s}:host.curtain.show .search button{opacity:1;transform:scale3d(1, 1, 1)}:host.curtain.show .search form{opacity:1;transform:scale3d(1, 1, 1)}@media screen and (max-width: 40em){:host.curtain span{width:90%}:host.curtain input{font-size:2em;width:90%}}::ng-deep nb-layout.curtain .scrollable-container{position:relative;z-index:0}\n", "::ng-deep nb-layout.column-curtain.with-search .layout{pointer-events:none}:host.column-curtain{display:block;position:fixed;z-index:1050;top:0;left:50%;overflow:hidden;width:50%;height:100vh;pointer-events:none}:host.column-curtain::before{content:'';position:absolute;top:0;left:0;width:100%;height:100%;transform:scale3d(0, 1, 1);transform-origin:0 50%;transition:transform 0.3s;transition-timing-function:cubic-bezier(0.86, 0, 0.07, 1)}:host.column-curtain .search{position:relative;padding:2.5rem 1.5rem 0;background:transparent}:host.column-curtain .search button{position:absolute;top:2rem;font-size:2.5rem;opacity:0;transition:opacity 0.5s}[dir=ltr] :host.column-curtain .search button{right:2rem}[dir=rtl] :host.column-curtain .search button{left:2rem}:host.column-curtain .search form{width:85%;transform:translate3d(-150%, 0, 0);transition:transform 0.3s}:host.column-curtain .search input{font-size:2.5rem;width:100%}:host.column-curtain .search span{font-size:85%}:host.column-curtain.show{pointer-events:auto}:host.column-curtain.show::before{transform:scale3d(1, 1, 1)}:host.column-curtain.show .search form{transform:translate3d(0, 0, 0);transition-delay:0.15s;transition-timing-function:cubic-bezier(0.86, 0, 0.07, 1)}:host.column-curtain.show .search button{opacity:1;z-index:100}@media screen and (max-width: 40rem){:host.column-curtain span{width:90%}:host.column-curtain input{font-size:2rem;width:90%}}\n", "::ng-deep nb-layout.modal-drop .layout{position:relative;transition:transform 0.4s, opacity 0.4s;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1)}::ng-deep nb-layout.modal-drop.with-search .layout{opacity:0;transform:scale3d(0.9, 0.9, 1);pointer-events:none}:host.modal-drop .search{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;z-index:1050;position:fixed;top:0;left:0;width:100%;height:100vh;background:none;pointer-events:none}:host.modal-drop .search::before{content:'';position:absolute;top:0;right:0;width:100%;height:100%;opacity:0;transition:opacity 0.4s}:host.modal-drop .search button{font-size:2.5rem;position:absolute;top:3rem;display:block;opacity:0;transition:opacity 0.4s}[dir=ltr] :host.modal-drop .search button{right:3rem}[dir=rtl] :host.modal-drop .search button{left:3rem}:host.modal-drop .search form{position:relative;margin:5rem 0 2rem}:host.modal-drop .search input{font-size:6vw;width:60%;padding:0.25rem;text-align:center;opacity:0;transition:opacity 0.4s}:host.modal-drop .search span{position:relative;z-index:9;display:block;width:60%;padding:0.85rem 0;opacity:0;transform:translate3d(0, -50px, 0);transition:opacity 0.4s, transform 0.4s}:host.modal-drop .search .form-content{position:relative;z-index:10;overflow:hidden;transform:translate3d(0, -50px, 0);transition:transform 0.4s}:host.modal-drop .search .form-content::after{content:'';position:absolute;top:0;left:20%;width:60%;height:105%;opacity:0;transform-origin:50% 0}:host.modal-drop.show .search{pointer-events:auto}:host.modal-drop.show .search::before{opacity:1}:host.modal-drop.show .search button{opacity:1}:host.modal-drop.show .search .form-content{transform:translate3d(0, 0, 0);transition:none}:host.modal-drop.show .search .form-content::after{animation:scaleUpDown 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards}:host.modal-drop.show .search input{opacity:1;transition:opacity 0s 0.4s}:host.modal-drop.show .search span{opacity:1;transform:translate3d(0, 0, 0);transition-delay:0.4s;transition-timing-function:ease-out}@keyframes scaleUpDown{0%{opacity:1;transform:scale3d(1, 0, 1)}50%{transform:scale3d(1, 1, 1);transform-origin:50% 0;transition-timing-function:ease-out}50.1%{transform-origin:50% 100%;transition-timing-function:ease-out}100%{opacity:1;transform:scale3d(1, 0, 1);transform-origin:50% 100%;transition-timing-function:ease-out}}@media screen and (max-width: 40rem){:host.modal-drop form{margin:2rem 0}:host.modal-drop input{width:100%;left:0}}\n", "::ng-deep nb-layout.modal-half .layout{transition:transform 0.6s, opacity 0.6s;transition-timing-function:cubic-bezier(0.2, 1, 0.3, 1)}::ng-deep nb-layout.modal-half.with-search .layout{transform:scale3d(0.8, 0.8, 1);pointer-events:none}:host.modal-half .search{text-align:center;position:fixed;z-index:1050;top:0;left:0;overflow:hidden;width:100%;height:100vh;background:none;pointer-events:none}:host.modal-half .search::before{content:'';position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;opacity:0;transition:opacity 0.6s;transition-timing-function:cubic-bezier(0.2, 1, 0.3, 1)}:host.modal-half .search button{font-size:2.5rem;position:absolute;top:3rem;display:block;z-index:100;opacity:0;transform:scale3d(0.8, 0.8, 1);transition:opacity 0.6s, transform 0.6s;transition-timing-function:cubic-bezier(0.2, 1, 0.3, 1)}[dir=ltr] :host.modal-half .search button{right:3rem}[dir=rtl] :host.modal-half .search button{left:3rem}:host.modal-half .search .form-wrapper{position:absolute;display:flex;justify-content:center;align-items:center;width:100%;height:50%;transition:transform 0.6s;transition-timing-function:cubic-bezier(0.2, 1, 0.3, 1);transform:translate3d(0, -100%, 0)}:host.modal-half .search form{width:75%;margin:0 auto}:host.modal-half .search input{font-size:7vw;width:100%}:host.modal-half.show .search{pointer-events:auto}:host.modal-half.show .search::before{opacity:1}:host.modal-half.show .search button{opacity:1;transform:scale3d(1, 1, 1)}:host.modal-half.show .search .form-wrapper{transform:translate3d(0, 0, 0)}\n"]
        })
    ], NbSearchFieldComponent);
    return NbSearchFieldComponent;
}());
/**
 * Beautiful full-page search control.
 *
 * @stacked-example(Showcase, search/search-showcase.component)
 *
 * Basic setup:
 *
 * ```ts
 *  <nb-search type="rotate-layout"></nb-search>
 * ```
 * ### Installation
 *
 * Import `NbSearchModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbSearchModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Several animation types are available:
 * modal-zoomin, rotate-layout, modal-move, curtain, column-curtain, modal-drop, modal-half
 *
 * It is also possible to handle search event using `NbSearchService`:
 *
 * @stacked-example(Search Event, search/search-event.component)
 *
 * @styles
 *
 * search-background-color:
 * search-divider-color:
 * search-divider-style:
 * search-divider-width:
 * search-extra-background-color:
 * search-text-color:
 * search-text-font-family:
 * search-text-font-size:
 * search-text-font-weight:
 * search-text-line-height:
 * search-placeholder-text-color:
 * search-info-text-color:
 * search-info-text-font-family:
 * search-info-text-font-size:
 * search-info-text-font-weight:
 * search-info-text-line-height:
 */
var NbSearchComponent = /** @class */ (function () {
    function NbSearchComponent(searchService, themeService, router, overlayService, changeDetector) {
        this.searchService = searchService;
        this.themeService = themeService;
        this.router = router;
        this.overlayService = overlayService;
        this.changeDetector = changeDetector;
        this.destroy$ = new rxjs.Subject();
        this.showSearchField = false;
        /**
         * Search input placeholder
         * @type {string}
         */
        this.placeholder = 'Search...';
        /**
         * Hint showing under the input field to improve user experience
         *
         * @type {string}
         */
        this.hint = 'Hit enter to search';
    }
    NbSearchComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.router.events
            .pipe(rxjs_operators.filter(function (event) { return event instanceof _angular_router.NavigationEnd; }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.hideSearch(); });
        this.searchService.onSearchActivate()
            .pipe(rxjs_operators.filter(function (data) { return !_this.tag || data.tag === _this.tag; }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.openSearch(); });
        this.searchService.onSearchDeactivate()
            .pipe(rxjs_operators.filter(function (data) { return !_this.tag || data.tag === _this.tag; }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.hideSearch(); });
    };
    NbSearchComponent.prototype.ngOnDestroy = function () {
        if (this.overlayRef && this.overlayRef.hasAttached()) {
            this.removeLayoutClasses();
            this.overlayRef.detach();
        }
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbSearchComponent.prototype.openSearch = function () {
        var _this = this;
        if (!this.overlayRef) {
            this.overlayRef = this.overlayService.create();
            this.overlayRef.attach(this.searchFieldPortal);
        }
        this.themeService.appendLayoutClass(this.type);
        rxjs.of(null).pipe(rxjs_operators.delay(0)).subscribe(function () {
            _this.themeService.appendLayoutClass('with-search');
            _this.showSearchField = true;
            _this.changeDetector.detectChanges();
        });
    };
    NbSearchComponent.prototype.hideSearch = function () {
        this.removeLayoutClasses();
        this.showSearchField = false;
        this.changeDetector.detectChanges();
        this.searchButton.nativeElement.focus();
    };
    NbSearchComponent.prototype.search = function (term) {
        this.searchService.submitSearch(term, this.tag);
        this.hideSearch();
    };
    NbSearchComponent.prototype.emitInput = function (term) {
        this.searchService.searchInput(term, this.tag);
    };
    NbSearchComponent.prototype.emitActivate = function () {
        this.searchService.activateSearch(this.type, this.tag);
    };
    NbSearchComponent.prototype.emitDeactivate = function () {
        this.searchService.deactivateSearch(this.type, this.tag);
    };
    NbSearchComponent.prototype.removeLayoutClasses = function () {
        var _this = this;
        this.themeService.removeLayoutClass('with-search');
        rxjs.of(null).pipe(rxjs_operators.delay(500)).subscribe(function () {
            _this.themeService.removeLayoutClass(_this.type);
        });
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSearchComponent.prototype, "tag", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSearchComponent.prototype, "placeholder", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSearchComponent.prototype, "hint", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSearchComponent.prototype, "type", void 0);
    tslib.__decorate([
        i0.ViewChild(NbPortalDirective),
        tslib.__metadata("design:type", NbPortalDirective)
    ], NbSearchComponent.prototype, "searchFieldPortal", void 0);
    tslib.__decorate([
        i0.ViewChild('searchButton', { read: i0.ElementRef }),
        tslib.__metadata("design:type", i0.ElementRef)
    ], NbSearchComponent.prototype, "searchButton", void 0);
    NbSearchComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-search',
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            template: "\n    <button #searchButton class=\"start-search\" (click)=\"emitActivate()\" nbButton ghost>\n      <nb-icon icon=\"search-outline\" pack=\"nebular-essentials\"></nb-icon>\n    </button>\n    <nb-search-field\n      *nbPortal\n      [show]=\"showSearchField\"\n      [type]=\"type\"\n      [placeholder]=\"placeholder\"\n      [hint]=\"hint\"\n      (search)=\"search($event)\"\n      (searchInput)=\"emitInput($event)\"\n      (close)=\"emitDeactivate()\">\n    </nb-search-field>\n  ",
            styles: [":host button{font-size:2rem;margin:0 auto;padding:0;cursor:pointer;border:none;background:none}:host button:focus{box-shadow:none;outline:none}::ng-deep nb-layout.with-search .scrollable-container{position:relative;z-index:0}\n"]
        }),
        tslib.__metadata("design:paramtypes", [NbSearchService,
            NbThemeService,
            _angular_router.Router,
            NbOverlayService,
            i0.ChangeDetectorRef])
    ], NbSearchComponent);
    return NbSearchComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbSearchModule = /** @class */ (function () {
    function NbSearchModule() {
    }
    NbSearchModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
                NbOverlayModule,
                NbIconModule,
                NbButtonModule,
            ],
            declarations: [
                NbSearchComponent,
                NbSearchFieldComponent,
            ],
            exports: [
                NbSearchComponent,
                NbSearchFieldComponent,
            ],
            providers: [
                NbSearchService,
            ],
            entryComponents: [
                NbSearchFieldComponent,
            ],
        })
    ], NbSearchModule);
    return NbSearchModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Styled checkbox component
 *
 * @stacked-example(Showcase, checkbox/checkbox-showcase.component)
 *
 * ### Installation
 *
 * Import `NbCheckboxComponent` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbCheckboxModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Checkbox is available in multiple colors using `status` property:
 * @stacked-example(Colored Checkboxes, checkbox/checkbox-status.component)
 *
 * Indeterminate state is also supported:
 * @stacked-example(Indeterminate Checkbox, checkbox/checkbox-indeterminate.component)
 *
 * Checkbox can be disabled via `disabled` attribute.
 * @stacked-example(Disabled Checkbox, checkbox/checkbox-disabled.component)
 *
 * @styles
 *
 * checkbox-height:
 * checkbox-width:
 * checkbox-border-style:
 * checkbox-border-width:
 * checkbox-border-radius:
 * checkbox-outline-width:
 * checkbox-outline-color:
 * checkbox-text-font-family:
 * checkbox-text-font-size:
 * checkbox-text-font-weight:
 * checkbox-text-line-height:
 * checkbox-text-space:
 * checkbox-padding:
 * checkbox-focus-inset-shadow-length:
 * checkbox-basic-text-color:
 * checkbox-basic-background-color:
 * checkbox-basic-border-color:
 * checkbox-basic-checked-background-color:
 * checkbox-basic-checked-border-color:
 * checkbox-basic-checked-checkmark-color:
 * checkbox-basic-indeterminate-background-color:
 * checkbox-basic-indeterminate-border-color:
 * checkbox-basic-indeterminate-checkmark-color:
 * checkbox-basic-focus-background-color:
 * checkbox-basic-focus-border-color:
 * checkbox-basic-focus-checked-background-color:
 * checkbox-basic-focus-checked-border-color:
 * checkbox-basic-hover-background-color:
 * checkbox-basic-hover-border-color:
 * checkbox-basic-hover-checked-background-color:
 * checkbox-basic-hover-checked-border-color:
 * checkbox-basic-active-background-color:
 * checkbox-basic-active-border-color:
 * checkbox-basic-active-checked-background-color:
 * checkbox-basic-active-checked-border-color:
 * checkbox-basic-disabled-background-color:
 * checkbox-basic-disabled-border-color:
 * checkbox-basic-disabled-checkmark-color:
 * checkbox-basic-disabled-text-color:
 * checkbox-basic-disabled-checked-background-color:
 * checkbox-primary-text-color:
 * checkbox-primary-background-color:
 * checkbox-primary-border-color:
 * checkbox-primary-checked-background-color:
 * checkbox-primary-checked-border-color:
 * checkbox-primary-checked-checkmark-color:
 * checkbox-primary-indeterminate-background-color:
 * checkbox-primary-indeterminate-border-color:
 * checkbox-primary-indeterminate-checkmark-color:
 * checkbox-primary-focus-background-color:
 * checkbox-primary-focus-border-color:
 * checkbox-primary-focus-checked-background-color:
 * checkbox-primary-focus-checked-border-color:
 * checkbox-primary-hover-background-color:
 * checkbox-primary-hover-border-color:
 * checkbox-primary-hover-checked-background-color:
 * checkbox-primary-hover-checked-border-color:
 * checkbox-primary-active-background-color:
 * checkbox-primary-active-border-color:
 * checkbox-primary-active-checked-background-color:
 * checkbox-primary-active-checked-border-color:
 * checkbox-primary-disabled-background-color:
 * checkbox-primary-disabled-border-color:
 * checkbox-primary-disabled-checkmark-color:
 * checkbox-primary-disabled-text-color:
 * checkbox-primary-disabled-checked-background-color:
 * checkbox-success-text-color:
 * checkbox-success-background-color:
 * checkbox-success-border-color:
 * checkbox-success-checked-background-color:
 * checkbox-success-checked-border-color:
 * checkbox-success-checked-checkmark-color:
 * checkbox-success-indeterminate-background-color:
 * checkbox-success-indeterminate-border-color:
 * checkbox-success-indeterminate-checkmark-color:
 * checkbox-success-focus-background-color:
 * checkbox-success-focus-border-color:
 * checkbox-success-focus-checked-background-color:
 * checkbox-success-focus-checked-border-color:
 * checkbox-success-hover-background-color:
 * checkbox-success-hover-border-color:
 * checkbox-success-hover-checked-background-color:
 * checkbox-success-hover-checked-border-color:
 * checkbox-success-active-background-color:
 * checkbox-success-active-border-color:
 * checkbox-success-active-checked-background-color:
 * checkbox-success-active-checked-border-color:
 * checkbox-success-disabled-background-color:
 * checkbox-success-disabled-border-color:
 * checkbox-success-disabled-checkmark-color:
 * checkbox-success-disabled-text-color:
 * checkbox-success-disabled-checked-background-color:
 * checkbox-info-text-color:
 * checkbox-info-background-color:
 * checkbox-info-border-color:
 * checkbox-info-checked-background-color:
 * checkbox-info-checked-border-color:
 * checkbox-info-checked-checkmark-color:
 * checkbox-info-indeterminate-background-color:
 * checkbox-info-indeterminate-border-color:
 * checkbox-info-indeterminate-checkmark-color:
 * checkbox-info-focus-background-color:
 * checkbox-info-focus-border-color:
 * checkbox-info-focus-checked-background-color:
 * checkbox-info-focus-checked-border-color:
 * checkbox-info-hover-background-color:
 * checkbox-info-hover-border-color:
 * checkbox-info-hover-checked-background-color:
 * checkbox-info-hover-checked-border-color:
 * checkbox-info-active-background-color:
 * checkbox-info-active-border-color:
 * checkbox-info-active-checked-background-color:
 * checkbox-info-active-checked-border-color:
 * checkbox-info-disabled-background-color:
 * checkbox-info-disabled-border-color:
 * checkbox-info-disabled-checkmark-color:
 * checkbox-info-disabled-text-color:
 * checkbox-info-disabled-checked-background-color:
 * checkbox-warning-text-color:
 * checkbox-warning-background-color:
 * checkbox-warning-border-color:
 * checkbox-warning-checked-background-color:
 * checkbox-warning-checked-border-color:
 * checkbox-warning-checked-checkmark-color:
 * checkbox-warning-indeterminate-background-color:
 * checkbox-warning-indeterminate-border-color:
 * checkbox-warning-indeterminate-checkmark-color:
 * checkbox-warning-focus-background-color:
 * checkbox-warning-focus-border-color:
 * checkbox-warning-focus-checked-background-color:
 * checkbox-warning-focus-checked-border-color:
 * checkbox-warning-hover-background-color:
 * checkbox-warning-hover-border-color:
 * checkbox-warning-hover-checked-background-color:
 * checkbox-warning-hover-checked-border-color:
 * checkbox-warning-active-background-color:
 * checkbox-warning-active-border-color:
 * checkbox-warning-active-checked-background-color:
 * checkbox-warning-active-checked-border-color:
 * checkbox-warning-disabled-background-color:
 * checkbox-warning-disabled-border-color:
 * checkbox-warning-disabled-checkmark-color:
 * checkbox-warning-disabled-text-color:
 * checkbox-warning-disabled-checked-background-color:
 * checkbox-danger-text-color:
 * checkbox-danger-background-color:
 * checkbox-danger-border-color:
 * checkbox-danger-checked-background-color:
 * checkbox-danger-checked-border-color:
 * checkbox-danger-checked-checkmark-color:
 * checkbox-danger-indeterminate-background-color:
 * checkbox-danger-indeterminate-border-color:
 * checkbox-danger-indeterminate-checkmark-color:
 * checkbox-danger-focus-background-color:
 * checkbox-danger-focus-border-color:
 * checkbox-danger-focus-checked-background-color:
 * checkbox-danger-focus-checked-border-color:
 * checkbox-danger-hover-background-color:
 * checkbox-danger-hover-border-color:
 * checkbox-danger-hover-checked-background-color:
 * checkbox-danger-hover-checked-border-color:
 * checkbox-danger-active-background-color:
 * checkbox-danger-active-border-color:
 * checkbox-danger-active-checked-background-color:
 * checkbox-danger-active-checked-border-color:
 * checkbox-danger-disabled-background-color:
 * checkbox-danger-disabled-border-color:
 * checkbox-danger-disabled-checkmark-color:
 * checkbox-danger-disabled-text-color:
 * checkbox-danger-disabled-checked-background-color:
 * checkbox-control-text-color:
 * checkbox-control-background-color:
 * checkbox-control-border-color:
 * checkbox-control-checked-background-color:
 * checkbox-control-checked-border-color:
 * checkbox-control-checked-checkmark-color:
 * checkbox-control-indeterminate-background-color:
 * checkbox-control-indeterminate-border-color:
 * checkbox-control-indeterminate-checkmark-color:
 * checkbox-control-focus-background-color:
 * checkbox-control-focus-border-color:
 * checkbox-control-focus-checked-background-color:
 * checkbox-control-focus-checked-border-color:
 * checkbox-control-hover-background-color:
 * checkbox-control-hover-border-color:
 * checkbox-control-hover-checked-background-color:
 * checkbox-control-hover-checked-border-color:
 * checkbox-control-active-background-color:
 * checkbox-control-active-border-color:
 * checkbox-control-active-checked-background-color:
 * checkbox-control-active-checked-border-color:
 * checkbox-control-disabled-background-color:
 * checkbox-control-disabled-border-color:
 * checkbox-control-disabled-checkmark-color:
 * checkbox-control-disabled-text-color:
 * checkbox-control-disabled-checked-background-color:
 */
var NbCheckboxComponent = /** @class */ (function () {
    function NbCheckboxComponent(changeDetector, renderer, hostElement, zone) {
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.zone = zone;
        this.onChange = function () { };
        this.onTouched = function () { };
        this._checked = false;
        this._disabled = false;
        this._status = 'basic';
        this._indeterminate = false;
        /**
         * Output when checked state is changed by a user
         * @type EventEmitter<boolean>
         */
        this.checkedChange = new i0.EventEmitter();
    }
    NbCheckboxComponent_1 = NbCheckboxComponent;
    Object.defineProperty(NbCheckboxComponent.prototype, "value", {
        /**
         * Checkbox value
         * @deprecated
         * @breaking-change Remove @5.0.0
         */
        get: function () {
            return this.checked;
        },
        /**
         * @deprecated
         * @breaking-change Remove @5.0.0
         */
        set: function (value) {
            console.warn('NbCheckbox: `value` is deprecated and will be removed in 5.0.0. Use `checked` instead.');
            this.checked = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCheckboxComponent.prototype, "checked", {
        get: function () {
            return this._checked;
        },
        set: function (value) {
            this._checked = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCheckboxComponent.prototype, "disabled", {
        /**
         * Controls input disabled state
         */
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            this._disabled = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCheckboxComponent.prototype, "status", {
        /**
         * Checkbox status.
         * Possible values are: `basic`, `primary`, `success`, `warning`, `danger`, `info`, `control`.
         */
        get: function () {
            return this._status;
        },
        set: function (value) {
            if (value === '') {
                emptyStatusWarning('NbCheckbox');
                this._status = 'basic';
            }
            else {
                this._status = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCheckboxComponent.prototype, "indeterminate", {
        /**
         * Controls checkbox indeterminate state
         */
        get: function () {
            return this._indeterminate;
        },
        set: function (value) {
            this._indeterminate = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCheckboxComponent.prototype, "valueChange", {
        /**
         * Output when checked state is changed by a user
         * @deprecated
         * @breaking-change Remove @5.0.0
         * @type EventEmitter<boolean>
         */
        get: function () {
            console.warn('NbCheckbox: `valueChange` is deprecated and will be removed in 5.0.0. Use `checkedChange` instead.');
            return this.checkedChange;
        },
        set: function (valueChange) {
            this.checkedChange = valueChange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCheckboxComponent.prototype, "primary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCheckboxComponent.prototype, "success", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCheckboxComponent.prototype, "warning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCheckboxComponent.prototype, "danger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCheckboxComponent.prototype, "info", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCheckboxComponent.prototype, "basic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbCheckboxComponent.prototype, "control", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    NbCheckboxComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // TODO: #2254
        this.zone.runOutsideAngular(function () { return setTimeout(function () {
            _this.renderer.addClass(_this.hostElement.nativeElement, 'nb-transition');
        }); });
    };
    NbCheckboxComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    NbCheckboxComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    NbCheckboxComponent.prototype.writeValue = function (val) {
        this._checked = val;
        this.changeDetector.markForCheck();
    };
    NbCheckboxComponent.prototype.setDisabledState = function (val) {
        this.disabled = convertToBoolProperty(val);
        this.changeDetector.markForCheck();
    };
    NbCheckboxComponent.prototype.setTouched = function () {
        this.onTouched();
    };
    NbCheckboxComponent.prototype.updateValueAndIndeterminate = function (event) {
        var input = event.target;
        this.checked = input.checked;
        this.checkedChange.emit(this.checked);
        this.onChange(this.checked);
        this.indeterminate = input.indeterminate;
    };
    var NbCheckboxComponent_1;
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbCheckboxComponent.prototype, "value", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbCheckboxComponent.prototype, "checked", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbCheckboxComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbCheckboxComponent.prototype, "status", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbCheckboxComponent.prototype, "indeterminate", null);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter),
        tslib.__metadata("design:paramtypes", [i0.EventEmitter])
    ], NbCheckboxComponent.prototype, "valueChange", null);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbCheckboxComponent.prototype, "checkedChange", void 0);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCheckboxComponent.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCheckboxComponent.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCheckboxComponent.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCheckboxComponent.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCheckboxComponent.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCheckboxComponent.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbCheckboxComponent.prototype, "control", null);
    NbCheckboxComponent = NbCheckboxComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'nb-checkbox',
            template: "\n    <label class=\"label\">\n      <input type=\"checkbox\" class=\"native-input visually-hidden\"\n             [disabled]=\"disabled\"\n             [checked]=\"checked\"\n             (change)=\"updateValueAndIndeterminate($event)\"\n             (blur)=\"setTouched()\"\n             (click)=\"$event.stopPropagation()\"\n             [indeterminate]=\"indeterminate\">\n      <span [class.indeterminate]=\"indeterminate\" [class.checked]=\"checked\" class=\"custom-checkbox\">\n        <nb-icon *ngIf=\"indeterminate\" icon=\"minus-bold-outline\" pack=\"nebular-essentials\"></nb-icon>\n        <nb-icon *ngIf=\"checked && !indeterminate\" icon=\"checkmark-bold-outline\" pack=\"nebular-essentials\"></nb-icon>\n      </span>\n      <span class=\"text\">\n        <ng-content></ng-content>\n      </span>\n    </label>\n  ",
            providers: [{
                    provide: _angular_forms.NG_VALUE_ACCESSOR,
                    useExisting: i0.forwardRef(function () { return NbCheckboxComponent_1; }),
                    multi: true,
                }],
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: [":host .label{position:relative;display:inline-flex;align-items:center;margin:0;min-height:inherit}:host .custom-checkbox{flex-shrink:0}:host(.nb-transition) .custom-checkbox{transition-duration:0.15s;transition-property:background-color,border,box-shadow;transition-timing-function:ease-in}:host(.nb-transition) .text{transition-duration:0.15s;transition-property:color;transition-timing-function:ease-in}\n"]
        }),
        tslib.__metadata("design:paramtypes", [i0.ChangeDetectorRef,
            i0.Renderer2,
            i0.ElementRef,
            i0.NgZone])
    ], NbCheckboxComponent);
    return NbCheckboxComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbCheckboxModule = /** @class */ (function () {
    function NbCheckboxModule() {
    }
    NbCheckboxModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
                NbIconModule,
            ],
            declarations: [NbCheckboxComponent],
            exports: [NbCheckboxComponent],
        })
    ], NbCheckboxModule);
    return NbCheckboxModule;
}());

var NbDynamicOverlay = /** @class */ (function () {
    function NbDynamicOverlay(overlay, componentFactoryResolver, zone, overlayContainer) {
        this.overlay = overlay;
        this.componentFactoryResolver = componentFactoryResolver;
        this.zone = zone;
        this.overlayContainer = overlayContainer;
        this.context = {};
        this.overlayConfig = {};
        this.positionStrategyChange$ = new rxjs.Subject();
        this.isShown$ = new rxjs.BehaviorSubject(false);
        this.destroy$ = new rxjs.Subject();
    }
    Object.defineProperty(NbDynamicOverlay.prototype, "isAttached", {
        get: function () {
            return this.ref && this.ref.hasAttached();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbDynamicOverlay.prototype, "isShown", {
        get: function () {
            return this.isShown$.pipe(rxjs_operators.distinctUntilChanged());
        },
        enumerable: true,
        configurable: true
    });
    NbDynamicOverlay.prototype.create = function (componentType, content, context, positionStrategy, overlayConfig) {
        if (overlayConfig === void 0) { overlayConfig = {}; }
        this.setContentAndContext(content, context);
        this.setComponent(componentType);
        this.setPositionStrategy(positionStrategy);
        this.setOverlayConfig(overlayConfig);
        return this;
    };
    NbDynamicOverlay.prototype.setContent = function (content) {
        this.content = content;
        if (this.container) {
            this.updateContext();
        }
    };
    NbDynamicOverlay.prototype.setContext = function (context) {
        this.context = context;
        if (this.container) {
            this.updateContext();
        }
    };
    NbDynamicOverlay.prototype.setContentAndContext = function (content, context) {
        this.content = content;
        this.context = context;
        if (this.container) {
            this.updateContext();
        }
    };
    NbDynamicOverlay.prototype.setComponent = function (componentType) {
        this.componentType = componentType;
        // in case the component is shown we recreate it and show it back
        var wasAttached = this.isAttached;
        this.disposeOverlayRef();
        if (wasAttached) {
            this.show();
        }
    };
    NbDynamicOverlay.prototype.setPositionStrategy = function (positionStrategy) {
        var _this = this;
        this.positionStrategyChange$.next();
        this.positionStrategy = positionStrategy;
        this.positionStrategy.positionChange
            .pipe(rxjs_operators.filter(function () { return !!_this.container; }), rxjs_operators.takeUntil(rxjs.merge(this.positionStrategyChange$, this.destroy$)))
            .subscribe(function (position) {
            _this.lastAppliedPosition = position;
            patch(_this.container, { position: position });
        });
        if (this.ref) {
            this.ref.updatePositionStrategy(this.positionStrategy);
        }
    };
    NbDynamicOverlay.prototype.setOverlayConfig = function (overlayConfig) {
        this.overlayConfig = overlayConfig;
        var wasAttached = this.isAttached;
        this.disposeOverlayRef();
        if (wasAttached) {
            this.show();
        }
    };
    NbDynamicOverlay.prototype.show = function () {
        if (!this.ref) {
            this.createOverlay();
        }
        this.renderContainer();
        if (!this.hasOverlayInContainer()) {
            // Dispose overlay ref as it refers to the old overlay container and create new by calling `show`
            this.disposeOverlayRef();
            return this.show();
        }
        this.isShown$.next(true);
    };
    NbDynamicOverlay.prototype.hide = function () {
        if (!this.ref) {
            return;
        }
        this.ref.detach();
        this.container = null;
        this.isShown$.next(false);
    };
    NbDynamicOverlay.prototype.toggle = function () {
        if (this.isAttached) {
            this.hide();
        }
        else {
            this.show();
        }
    };
    NbDynamicOverlay.prototype.dispose = function () {
        this.destroy$.next();
        this.destroy$.complete();
        this.hide();
        this.disposeOverlayRef();
        this.isShown$.complete();
        this.positionStrategyChange$.complete();
    };
    NbDynamicOverlay.prototype.getContainer = function () {
        return this.container;
    };
    NbDynamicOverlay.prototype.createOverlay = function () {
        this.ref = this.overlay.create(tslib.__assign({ positionStrategy: this.positionStrategy, scrollStrategy: this.overlay.scrollStrategies.reposition() }, this.overlayConfig));
        this.updatePositionWhenStable();
    };
    NbDynamicOverlay.prototype.renderContainer = function () {
        var containerContext = this.createContainerContext();
        if (!this.container) {
            this.container = createContainer(this.ref, this.componentType, containerContext, this.componentFactoryResolver);
        }
        this.container.instance.renderContent();
    };
    NbDynamicOverlay.prototype.updateContext = function () {
        var containerContext = this.createContainerContext();
        Object.assign(this.container.instance, containerContext);
        this.container.instance.renderContent();
        this.container.changeDetectorRef.detectChanges();
    };
    NbDynamicOverlay.prototype.createContainerContext = function () {
        return {
            content: this.content,
            context: this.context,
            cfr: this.componentFactoryResolver,
            position: this.lastAppliedPosition,
        };
    };
    /**
     * Dimensions of the container may change after content update. So we listen to zone.stable event to
     * reposition the container.
     */
    NbDynamicOverlay.prototype.updatePositionWhenStable = function () {
        var _this = this;
        this.zone.onStable
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () {
            _this.ref && _this.ref.updatePosition();
        });
    };
    NbDynamicOverlay.prototype.hasOverlayInContainer = function () {
        return this.overlayContainer.getContainerElement().contains(this.ref.hostElement);
    };
    NbDynamicOverlay.prototype.disposeOverlayRef = function () {
        if (this.ref) {
            this.ref.dispose();
            this.ref = null;
            this.container = null;
        }
    };
    NbDynamicOverlay = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [NbOverlayService,
            i0.ComponentFactoryResolver,
            i0.NgZone,
            NbOverlayContainer])
    ], NbDynamicOverlay);
    return NbDynamicOverlay;
}());

var NbDynamicOverlayChange = /** @class */ (function (_super) {
    tslib.__extends(NbDynamicOverlayChange, _super);
    function NbDynamicOverlayChange(previousValue, currentValue, firstChange) {
        if (firstChange === void 0) { firstChange = false; }
        return _super.call(this, previousValue, currentValue, firstChange) || this;
    }
    NbDynamicOverlayChange.prototype.isChanged = function () {
        return this.currentValue !== this.previousValue;
    };
    return NbDynamicOverlayChange;
}(i0.SimpleChange));
var NbDynamicOverlayHandler = /** @class */ (function () {
    function NbDynamicOverlayHandler(positionBuilder, triggerStrategyBuilder, dynamicOverlayService) {
        this.positionBuilder = positionBuilder;
        this.triggerStrategyBuilder = triggerStrategyBuilder;
        this.dynamicOverlayService = dynamicOverlayService;
        this._context = {};
        this._trigger = exports.NbTrigger.NOOP;
        this._position = exports.NbPosition.TOP;
        this._adjustment = exports.NbAdjustment.NOOP;
        this._offset = 15;
        this._overlayConfig = {};
        this.changes = {};
    }
    NbDynamicOverlayHandler.prototype.host = function (host) {
        this.changes.host = new NbDynamicOverlayChange(this._host, host);
        this._host = host;
        return this;
    };
    NbDynamicOverlayHandler.prototype.trigger = function (trigger$$1) {
        this.changes.trigger = new NbDynamicOverlayChange(this._trigger, trigger$$1);
        this._trigger = trigger$$1;
        return this;
    };
    NbDynamicOverlayHandler.prototype.position = function (position) {
        this.changes.position = new NbDynamicOverlayChange(this._position, position);
        this._position = position;
        return this;
    };
    NbDynamicOverlayHandler.prototype.adjustment = function (adjustment) {
        this.changes.adjustment = new NbDynamicOverlayChange(this._adjustment, adjustment);
        this._adjustment = adjustment;
        return this;
    };
    NbDynamicOverlayHandler.prototype.componentType = function (componentType) {
        this.changes.componentType = new NbDynamicOverlayChange(this._componentType, componentType);
        this._componentType = componentType;
        return this;
    };
    NbDynamicOverlayHandler.prototype.content = function (content) {
        this.changes.content = new NbDynamicOverlayChange(this._content, content);
        this._content = content;
        return this;
    };
    NbDynamicOverlayHandler.prototype.context = function (context) {
        this.changes.context = new NbDynamicOverlayChange(this._context, context);
        this._context = context;
        return this;
    };
    NbDynamicOverlayHandler.prototype.offset = function (offset) {
        this.changes.offset = new NbDynamicOverlayChange(this._offset, offset);
        this._offset = offset;
        return this;
    };
    NbDynamicOverlayHandler.prototype.overlayConfig = function (overlayConfig) {
        this.changes.overlayConfig = new NbDynamicOverlayChange(this._overlayConfig, overlayConfig);
        this._overlayConfig = overlayConfig;
        return this;
    };
    NbDynamicOverlayHandler.prototype.build = function () {
        if (!this._componentType || !this._host) {
            throw Error("NbDynamicOverlayHandler: at least 'componentType' and 'host' should be\n      passed before building a dynamic overlay.");
        }
        this.dynamicOverlay = this.dynamicOverlayService.create(this._componentType, this._content, this._context, this.createPositionStrategy(), this._overlayConfig);
        this.connect();
        this.clearChanges();
        return this.dynamicOverlay;
    };
    NbDynamicOverlayHandler.prototype.rebuild = function () {
        /**
         * we should not throw here
         * as we use rebuilt in lifecycle hooks
         * which it could be called before the build
         * so we just ignore this call
         */
        if (!this.dynamicOverlay) {
            return;
        }
        if (this.isPositionStrategyUpdateRequired()) {
            this.dynamicOverlay.setPositionStrategy(this.createPositionStrategy());
        }
        if (this.isTriggerStrategyUpdateRequired()) {
            this.connect();
        }
        if (this.isContainerRerenderRequired()) {
            this.dynamicOverlay.setContentAndContext(this._content, this._context);
        }
        if (this.isComponentTypeUpdateRequired()) {
            this.dynamicOverlay.setComponent(this._componentType);
        }
        if (this.isOverlayConfigUpdateRequired()) {
            this.dynamicOverlay.setOverlayConfig(this._overlayConfig);
        }
        this.clearChanges();
        return this.dynamicOverlay;
    };
    NbDynamicOverlayHandler.prototype.connect = function () {
        if (!this.dynamicOverlay) {
            throw new Error("NbDynamicOverlayHandler: cannot connect to DynamicOverlay\n      as it is not created yet. Call build() first");
        }
        this.disconnect();
        this.subscribeOnTriggers(this.dynamicOverlay);
    };
    NbDynamicOverlayHandler.prototype.disconnect = function () {
        if (this.triggerStrategy) {
            this.triggerStrategy.destroy();
        }
    };
    NbDynamicOverlayHandler.prototype.destroy = function () {
        this.disconnect();
        this.clearChanges();
        if (this.dynamicOverlay) {
            this.dynamicOverlay.dispose();
        }
    };
    NbDynamicOverlayHandler.prototype.createPositionStrategy = function () {
        return this.positionBuilder
            .connectedTo(this._host)
            .position(this._position)
            .adjustment(this._adjustment)
            .offset(this._offset);
    };
    NbDynamicOverlayHandler.prototype.subscribeOnTriggers = function (dynamicOverlay) {
        this.triggerStrategy = this.triggerStrategyBuilder
            .trigger(this._trigger)
            .host(this._host.nativeElement)
            .container(function () { return dynamicOverlay.getContainer(); })
            .build();
        this.triggerStrategy.show$.subscribe(function () { return dynamicOverlay.show(); });
        this.triggerStrategy.hide$.subscribe(function () { return dynamicOverlay.hide(); });
    };
    NbDynamicOverlayHandler.prototype.isContainerRerenderRequired = function () {
        return this.isContentUpdated()
            || this.isContextUpdated()
            || this.isPositionStrategyUpdateRequired();
    };
    NbDynamicOverlayHandler.prototype.isPositionStrategyUpdateRequired = function () {
        return this.isAdjustmentUpdated() || this.isPositionUpdated() || this.isOffsetUpdated() || this.isHostUpdated();
    };
    NbDynamicOverlayHandler.prototype.isTriggerStrategyUpdateRequired = function () {
        return this.isTriggerUpdated() || this.isHostUpdated();
    };
    NbDynamicOverlayHandler.prototype.isComponentTypeUpdateRequired = function () {
        return this.isComponentTypeUpdated();
    };
    NbDynamicOverlayHandler.prototype.isOverlayConfigUpdateRequired = function () {
        return this.isOverlayConfigUpdated();
    };
    NbDynamicOverlayHandler.prototype.isComponentTypeUpdated = function () {
        return this.changes.componentType && this.changes.componentType.isChanged();
    };
    NbDynamicOverlayHandler.prototype.isContentUpdated = function () {
        return this.changes.content && this.changes.content.isChanged();
    };
    NbDynamicOverlayHandler.prototype.isContextUpdated = function () {
        return this.changes.context && this.changes.context.isChanged();
    };
    NbDynamicOverlayHandler.prototype.isAdjustmentUpdated = function () {
        return this.changes.adjustment && this.changes.adjustment.isChanged();
    };
    NbDynamicOverlayHandler.prototype.isPositionUpdated = function () {
        return this.changes.position && this.changes.position.isChanged();
    };
    NbDynamicOverlayHandler.prototype.isHostUpdated = function () {
        return this.changes.host && this.changes.host.isChanged();
    };
    NbDynamicOverlayHandler.prototype.isTriggerUpdated = function () {
        return this.changes.trigger && this.changes.trigger.isChanged();
    };
    NbDynamicOverlayHandler.prototype.isOffsetUpdated = function () {
        return this.changes.offset && this.changes.offset.isChanged();
    };
    NbDynamicOverlayHandler.prototype.isOverlayConfigUpdated = function () {
        return this.changes.overlayConfig && this.changes.overlayConfig.isChanged();
    };
    NbDynamicOverlayHandler.prototype.clearChanges = function () {
        this.changes = {};
    };
    NbDynamicOverlayHandler = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [NbPositionBuilderService,
            NbTriggerStrategyBuilderService,
            NbDynamicOverlay])
    ], NbDynamicOverlayHandler);
    return NbDynamicOverlayHandler;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Overlay container.
 * Renders provided content inside.
 *
 * @styles
 *
 * popover-text-color:
 * popover-text-font-family:
 * popover-text-font-size:
 * popover-text-font-weight:
 * popover-text-line-height:
 * popover-background-color:
 * popover-border-width:
 * popover-border-color:
 * popover-border-radius:
 * popover-shadow:
 * popover-arrow-size:
 * popover-padding:
 * */
var NbPopoverComponent = /** @class */ (function (_super) {
    tslib.__extends(NbPopoverComponent, _super);
    function NbPopoverComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbPopoverComponent.prototype.renderContent = function () {
        this.detachContent();
        this.attachContent();
    };
    NbPopoverComponent.prototype.detachContent = function () {
        this.overlayContainer.detach();
    };
    NbPopoverComponent.prototype.attachContent = function () {
        if (this.content instanceof i0.TemplateRef) {
            this.attachTemplate();
        }
        else if (this.content instanceof i0.Type) {
            this.attachComponent();
        }
        else {
            this.attachString();
        }
    };
    NbPopoverComponent.prototype.attachTemplate = function () {
        this.overlayContainer
            .attachTemplatePortal(new NbTemplatePortal(this.content, null, { $implicit: this.context }));
    };
    NbPopoverComponent.prototype.attachComponent = function () {
        var portal = new NbComponentPortal(this.content, null, null, this.cfr);
        var ref = this.overlayContainer.attachComponentPortal(portal, this.context);
        ref.changeDetectorRef.detectChanges();
    };
    NbPopoverComponent.prototype.attachString = function () {
        this.overlayContainer.attachStringContent(this.content);
    };
    tslib.__decorate([
        i0.ViewChild(NbOverlayContainerComponent),
        tslib.__metadata("design:type", NbOverlayContainerComponent)
    ], NbPopoverComponent.prototype, "overlayContainer", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbPopoverComponent.prototype, "content", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbPopoverComponent.prototype, "context", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.ComponentFactoryResolver)
    ], NbPopoverComponent.prototype, "cfr", void 0);
    NbPopoverComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-popover',
            template: "\n    <span class=\"arrow\"></span>\n    <nb-overlay-container></nb-overlay-container>\n  ",
            styles: [":host .arrow{position:absolute;width:0;height:0}\n"]
        })
    ], NbPopoverComponent);
    return NbPopoverComponent;
}(NbPositionedContainer));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Powerful popover directive, which provides the best UX for your users.
 *
 * @stacked-example(Showcase, popover/popover-showcase.component)
 *
 * Popover can accept different content such as:
 * TemplateRef
 *
 * ```html
 * <button [nbPopover]="templateRef"></button>
 * <ng-template #templateRef>
 *   <span>Hello, Popover!</span>
 * </ng-template>
 * ```
 * ### Installation
 *
 * Import `NbPopoverModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbPopoverModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Custom components
 *
 * ```html
 * <button [nbPopover]="MyPopoverComponent"></button>
 * ```
 *
 * Both custom components and templateRef popovers can receive *contentContext* property
 * that will be passed to the content props.
 *
 * Primitive types
 *
 * ```html
 * <button nbPopover="Hello, Popover!"></button>
 * ```
 *
 * Popover has different placements, such as: top, bottom, left, right, start and end
 * which can be used as following:
 *
 * @stacked-example(Placements, popover/popover-placements.component)
 *
 * By default popover will try to adjust itself to maximally fit viewport
 * and provide the best user experience. It will try to change position of the popover container.
 * If you want to disable this behaviour set it `noop`.
 *
 * ```html
 * <button nbPopover="Hello, Popover!" nbPopoverAdjustment="noop"></button>
 * ```
 *
 * Popover has a number of triggers which provides an ability to show and hide the component in different ways:
 *
 * - Click mode shows the component when a user clicks on the host element and hides when the user clicks
 * somewhere on the document outside the component.
 * - Hint provides capability to show the component when the user hovers over the host element
 * and hide when the user hovers out of the host.
 * - Hover works like hint mode with one exception - when the user moves mouse from host element to
 * the container element the component remains open, so that it is possible to interact with it content.
 * - Focus mode is applied when user focuses the element.
 * - Noop mode - the component won't react to the user interaction.
 *
 * @stacked-example(Available Triggers, popover/popover-modes.component.html)
 *
 * Noop mode is especially useful when you need to control Popover programmatically, for example show/hide
 * as a result of some third-party action, like HTTP request or validation check:
 *
 * @stacked-example(Manual Control, popover/popover-noop.component)
 *
 * Below are examples for manual popover settings control, both via template binding and code.
 * @stacked-example(Popover Settings, popover/popover-dynamic.component)
 *
 * Please note, while manipulating Popover setting via code, you need to call `rebuild()` method to apply the settings
 * changed.
 * @stacked-example(Popover Settings Code, popover/popover-dynamic-code.component)
 *
 * @additional-example(Template Ref, popover/popover-template-ref.component)
 * @additional-example(Custom Component, popover/popover-custom-component.component)
 * */
var NbPopoverDirective = /** @class */ (function () {
    function NbPopoverDirective(hostRef, dynamicOverlayHandler) {
        this.hostRef = hostRef;
        this.dynamicOverlayHandler = dynamicOverlayHandler;
        this.popoverComponent = NbPopoverComponent;
        this.destroy$ = new rxjs.Subject();
        /**
         * Container content context. Will be applied to the rendered component.
         * */
        this.context = {};
        /**
         * Position will be calculated relatively host element based on the position.
         * Can be top, right, bottom, left, start or end.
         * */
        this.position = exports.NbPosition.TOP;
        this._adjustment = exports.NbAdjustment.CLOCKWISE;
        /**
         * Describes when the container will be shown.
         * Available options: `click`, `hover`, `hint`, `focus` and `noop`
         * */
        this.trigger = exports.NbTrigger.CLICK;
        /**
         * Sets popover offset
         * */
        this.offset = 15;
        this.popoverClass = '';
        this.nbPopoverShowStateChange = new i0.EventEmitter();
    }
    Object.defineProperty(NbPopoverDirective.prototype, "adjustment", {
        /**
         * Container position will be changes automatically based on this strategy if container can't fit view port.
         * Set this property to `noop` value if you want to disable automatically adjustment.
         * Available values: `clockwise` (default), `counterclockwise`, `vertical`, `horizontal`, `noop`.
         * */
        get: function () {
            return this._adjustment;
        },
        set: function (value) {
            if (!value) {
                // @breaking-change Remove @5.0.0
                console.warn("Falsy values for 'nbPopoverAdjustment' are deprecated and will be removed in Nebular 5.\n Use 'noop' instead.");
                value = exports.NbAdjustment.NOOP;
            }
            this._adjustment = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbPopoverDirective.prototype, "isShown", {
        get: function () {
            return !!(this.dynamicOverlay && this.dynamicOverlay.isAttached);
        },
        enumerable: true,
        configurable: true
    });
    NbPopoverDirective.prototype.ngOnInit = function () {
        this.dynamicOverlayHandler
            .host(this.hostRef)
            .componentType(this.popoverComponent);
    };
    NbPopoverDirective.prototype.ngOnChanges = function () {
        this.rebuild();
    };
    NbPopoverDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.dynamicOverlay = this.configureDynamicOverlay()
            .build();
        this.dynamicOverlay.isShown
            .pipe(rxjs_operators.skip(1), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (isShown) { return _this.nbPopoverShowStateChange.emit({ isShown: isShown }); });
    };
    NbPopoverDirective.prototype.rebuild = function () {
        this.dynamicOverlay = this.configureDynamicOverlay()
            .rebuild();
    };
    NbPopoverDirective.prototype.show = function () {
        this.dynamicOverlay.show();
    };
    NbPopoverDirective.prototype.hide = function () {
        this.dynamicOverlay.hide();
    };
    NbPopoverDirective.prototype.toggle = function () {
        this.dynamicOverlay.toggle();
    };
    NbPopoverDirective.prototype.ngOnDestroy = function () {
        this.dynamicOverlayHandler.destroy();
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbPopoverDirective.prototype.configureDynamicOverlay = function () {
        return this.dynamicOverlayHandler
            .position(this.position)
            .trigger(this.trigger)
            .offset(this.offset)
            .adjustment(this.adjustment)
            .content(this.content)
            .context(this.context)
            .overlayConfig({ panelClass: this.popoverClass });
    };
    tslib.__decorate([
        i0.Input('nbPopover'),
        tslib.__metadata("design:type", Object)
    ], NbPopoverDirective.prototype, "content", void 0);
    tslib.__decorate([
        i0.Input('nbPopoverContext'),
        tslib.__metadata("design:type", Object)
    ], NbPopoverDirective.prototype, "context", void 0);
    tslib.__decorate([
        i0.Input('nbPopoverPlacement'),
        tslib.__metadata("design:type", String)
    ], NbPopoverDirective.prototype, "position", void 0);
    tslib.__decorate([
        i0.Input('nbPopoverAdjustment'),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbPopoverDirective.prototype, "adjustment", null);
    tslib.__decorate([
        i0.Input('nbPopoverTrigger'),
        tslib.__metadata("design:type", String)
    ], NbPopoverDirective.prototype, "trigger", void 0);
    tslib.__decorate([
        i0.Input('nbPopoverOffset'),
        tslib.__metadata("design:type", Object)
    ], NbPopoverDirective.prototype, "offset", void 0);
    tslib.__decorate([
        i0.Input('nbPopoverClass'),
        tslib.__metadata("design:type", String)
    ], NbPopoverDirective.prototype, "popoverClass", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbPopoverDirective.prototype, "nbPopoverShowStateChange", void 0);
    NbPopoverDirective = tslib.__decorate([
        i0.Directive({
            selector: '[nbPopover]',
            exportAs: 'nbPopover',
            providers: [NbDynamicOverlayHandler, NbDynamicOverlay],
        }),
        tslib.__metadata("design:paramtypes", [i0.ElementRef,
            NbDynamicOverlayHandler])
    ], NbPopoverDirective);
    return NbPopoverDirective;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbPopoverModule = /** @class */ (function () {
    function NbPopoverModule() {
    }
    NbPopoverModule = tslib.__decorate([
        i0.NgModule({
            imports: [NbOverlayModule],
            declarations: [NbPopoverDirective, NbPopoverComponent],
            exports: [NbPopoverDirective],
            entryComponents: [NbPopoverComponent],
        })
    ], NbPopoverModule);
    return NbPopoverModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Context menu component used as content within NbContextMenuDirective.
 *
 * @styles
 *
 * context-menu-background-color:
 * context-menu-border-color:
 * context-menu-border-style:
 * context-menu-border-width:
 * context-menu-border-radius:
 * context-menu-text-align:
 * context-menu-min-width:
 * context-menu-max-width:
 * context-menu-shadow:
 * */
var NbContextMenuComponent = /** @class */ (function (_super) {
    tslib.__extends(NbContextMenuComponent, _super);
    function NbContextMenuComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.items = [];
        _this.context = { items: [] };
        return _this;
    }
    /**
     * The method is empty since we don't need to do anything additionally
     * render is handled by change detection
     */
    NbContextMenuComponent.prototype.renderContent = function () { };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Array)
    ], NbContextMenuComponent.prototype, "items", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbContextMenuComponent.prototype, "tag", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbContextMenuComponent.prototype, "context", void 0);
    NbContextMenuComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-context-menu',
            template: "\n    <nb-menu class=\"context-menu\" [items]=\"context.items\" [tag]=\"context.tag\"></nb-menu>\n  "
        })
    ], NbContextMenuComponent);
    return NbContextMenuComponent;
}(NbPositionedContainer));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Full featured context menu directive.
 *
 * @stacked-example(Showcase, context-menu/context-menu-showcase.component)
 *
 * Just pass menu items array:
 *
 * ```html
 * <button [nbContextMenu]="items"></button>
 * ...
 * items = [{ title: 'Profile' }, { title: 'Log out' }];
 * ```
 * ### Installation
 *
 * Import `NbContextMenuModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbContextMenuModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * Also make sure `NbMenuModule` is imported to your `app.module`.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbMenuModule.forRoot(),
 *   ],
 * })
 * export class AppModule { }
 * ```
 *
 * ### Usage
 *
 * If you want to handle context menu clicks you have to pass `nbContextMenuTag`
 * param and register to events using NbMenuService.
 * `NbContextMenu` renders plain `NbMenu` inside, so
 * you have to work with it just like with `NbMenu` component:
 *
 * @stacked-example(Menu item click, context-menu/context-menu-click.component)
 *
 * Context menu has different placements, such as: top, bottom, left and right
 * which can be used as following:
 *
 * ```html
 * <button [nbContextMenu]="items" nbContextMenuPlacement="right"></button>
 * ```
 *
 * ```ts
 * items = [{ title: 'Profile' }, { title: 'Log out' }];
 * ```
 *
 * By default context menu will try to adjust itself to maximally fit viewport
 * and provide the best user experience. It will try to change position of the context menu.
 * If you wanna disable this behaviour just set it falsy value.
 *
 * ```html
 * <button [nbContextMenu]="items" nbContextMenuAdjustment="counterclockwise"></button>
 * ```
 *
 * ```ts
 * items = [{ title: 'Profile' }, { title: 'Log out' }];
 * ```
 * Context menu has a number of triggers which provides an ability to show and hide the component in different ways:
 *
 * - Click mode shows the component when a user clicks on the host element and hides when the user clicks
 * somewhere on the document outside the component.
 * - Hint provides capability to show the component when the user hovers over the host element
 * and hide when the user hovers out of the host.
 * - Hover works like hint mode with one exception - when the user moves mouse from host element to
 * the container element the component remains open, so that it is possible to interact with it content.
 * - Focus mode is applied when user focuses the element.
 * - Noop mode - the component won't react to the user interaction.
 *
 * @stacked-example(Available Triggers, context-menu/context-menu-modes.component.html)
 *
 * Noop mode is especially useful when you need to control Popover programmatically, for example show/hide
 * as a result of some third-party action, like HTTP request or validation check:
 *
 * @stacked-example(Manual Control, context-menu/context-menu-noop.component)
 *
 * @stacked-example(Manual Control, context-menu/context-menu-right-click.component)
 * */
var NbContextMenuDirective = /** @class */ (function () {
    function NbContextMenuDirective(hostRef, menuService, dynamicOverlayHandler) {
        this.hostRef = hostRef;
        this.menuService = menuService;
        this.dynamicOverlayHandler = dynamicOverlayHandler;
        this.contextMenuHost = true;
        /**
         * Position will be calculated relatively host element based on the position.
         * Can be top, right, bottom and left.
         * */
        this.position = exports.NbPosition.BOTTOM;
        /**
         * Container position will be changes automatically based on this strategy if container can't fit view port.
         * Set this property to any falsy value if you want to disable automatically adjustment.
         * Available values: clockwise, counterclockwise.
         * */
        this.adjustment = exports.NbAdjustment.CLOCKWISE;
        /**
         * Describes when the container will be shown.
         * Available options: `click`, `hover`, `hint`, `focus` and `noop`
         * */
        this.trigger = exports.NbTrigger.CLICK;
        this.contextMenuClass = '';
        this.destroy$ = new rxjs.Subject();
        this._items = [];
    }
    Object.defineProperty(NbContextMenuDirective.prototype, "items", {
        /**
         * Basic menu items, will be passed to the internal NbMenuComponent.
         * */
        set: function (items) {
            this.validateItems(items);
            this._items = items;
        },
        enumerable: true,
        configurable: true
    });
    
    NbContextMenuDirective.prototype.ngOnInit = function () {
        this.dynamicOverlayHandler
            .host(this.hostRef)
            .componentType(NbContextMenuComponent);
    };
    NbContextMenuDirective.prototype.ngOnChanges = function () {
        this.rebuild();
    };
    NbContextMenuDirective.prototype.ngAfterViewInit = function () {
        this.dynamicOverlay = this.configureDynamicOverlay()
            .build();
        this.subscribeOnItemClick();
    };
    NbContextMenuDirective.prototype.rebuild = function () {
        this.dynamicOverlay = this.configureDynamicOverlay()
            .rebuild();
    };
    NbContextMenuDirective.prototype.show = function () {
        this.dynamicOverlay.show();
    };
    NbContextMenuDirective.prototype.hide = function () {
        this.dynamicOverlay.hide();
    };
    NbContextMenuDirective.prototype.toggle = function () {
        this.dynamicOverlay.toggle();
    };
    NbContextMenuDirective.prototype.ngOnDestroy = function () {
        this.dynamicOverlayHandler.destroy();
    };
    NbContextMenuDirective.prototype.configureDynamicOverlay = function () {
        return this.dynamicOverlayHandler
            .position(this.position)
            .trigger(this.trigger)
            .adjustment(this.adjustment)
            .context({
            position: this.position,
            items: this._items,
            tag: this.tag,
        })
            .overlayConfig({ panelClass: this.contextMenuClass });
    };
    /*
     * NbMenuComponent will crash if don't pass menu items to it.
     * So, we just validating them and throw custom obvious error.
     * */
    NbContextMenuDirective.prototype.validateItems = function (items) {
        if (!items || !items.length) {
            throw Error("List of menu items expected, but given: " + items);
        }
    };
    NbContextMenuDirective.prototype.subscribeOnItemClick = function () {
        var _this = this;
        this.menuService.onItemClick()
            .pipe(rxjs_operators.filter(function (_a) {
            var tag = _a.tag;
            return tag === _this.tag;
        }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.hide(); });
    };
    tslib.__decorate([
        i0.HostBinding('class.context-menu-host'),
        tslib.__metadata("design:type", Object)
    ], NbContextMenuDirective.prototype, "contextMenuHost", void 0);
    tslib.__decorate([
        i0.Input('nbContextMenuPlacement'),
        tslib.__metadata("design:type", String)
    ], NbContextMenuDirective.prototype, "position", void 0);
    tslib.__decorate([
        i0.Input('nbContextMenuAdjustment'),
        tslib.__metadata("design:type", String)
    ], NbContextMenuDirective.prototype, "adjustment", void 0);
    tslib.__decorate([
        i0.Input('nbContextMenuTag'),
        tslib.__metadata("design:type", String)
    ], NbContextMenuDirective.prototype, "tag", void 0);
    tslib.__decorate([
        i0.Input('nbContextMenu'),
        tslib.__metadata("design:type", Array),
        tslib.__metadata("design:paramtypes", [Array])
    ], NbContextMenuDirective.prototype, "items", null);
    tslib.__decorate([
        i0.Input('nbContextMenuTrigger'),
        tslib.__metadata("design:type", String)
    ], NbContextMenuDirective.prototype, "trigger", void 0);
    tslib.__decorate([
        i0.Input('nbContextMenuClass'),
        tslib.__metadata("design:type", String)
    ], NbContextMenuDirective.prototype, "contextMenuClass", void 0);
    NbContextMenuDirective = tslib.__decorate([
        i0.Directive({
            selector: '[nbContextMenu]',
            providers: [NbDynamicOverlayHandler, NbDynamicOverlay],
        }),
        tslib.__metadata("design:paramtypes", [i0.ElementRef,
            NbMenuService,
            NbDynamicOverlayHandler])
    ], NbContextMenuDirective);
    return NbContextMenuDirective;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbContextMenuModule = /** @class */ (function () {
    function NbContextMenuModule() {
    }
    NbContextMenuModule = tslib.__decorate([
        i0.NgModule({
            imports: [_angular_common.CommonModule, NbOverlayModule, NbMenuModule],
            exports: [NbContextMenuDirective],
            declarations: [NbContextMenuDirective, NbContextMenuComponent],
            entryComponents: [NbContextMenuComponent],
        })
    ], NbContextMenuModule);
    return NbContextMenuModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Progress Bar is a component for indicating progress.
 *
 * Simple usage:
 *
 * ```html
 * <nb-progress-bar [value]="50"></nb-progress-bar>
 * ```
 * ### Installation
 *
 * Import `NbProgressBarModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbProgressBarModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Progress bar accepts property `value` in range 0-100
 * @stacked-example(Progress bar, progress-bar/progress-bar-showcase.component)
 *
 * Progress bar background could be configured by providing a `status` property:
 * @stacked-example(Progress bar status, progress-bar/progress-bar-status.component)
 *
 * Progress bar size (height and font-size) could be configured by providing a `size` property:
 * @stacked-example(Progress bar size, progress-bar/progress-bar-size.component)
 *
 * `displayValue` property shows current value inside progress bar. It's also possible to add custom text inside:
 * @stacked-example(Progress bar value, progress-bar/progress-bar-value.component)
 *
 * Progress bar supports `width` and `background-color` transition:
 * @stacked-example(Progress bar interactive, progress-bar/progress-bar-interactive.component)
 *
 * @styles
 *
 * progress-bar-animation-duration:
 * progress-bar-border-radius:
 * progress-bar-text-font-family:
 * progress-bar-tiny-height:
 * progress-bar-tiny-text-font-size:
 * progress-bar-tiny-text-font-weight:
 * progress-bar-tiny-text-line-height:
 * progress-bar-small-height:
 * progress-bar-small-text-font-size:
 * progress-bar-small-text-font-weight:
 * progress-bar-small-text-line-height:
 * progress-bar-medium-height:
 * progress-bar-medium-text-font-size:
 * progress-bar-medium-text-font-weight:
 * progress-bar-medium-text-line-height:
 * progress-bar-large-height:
 * progress-bar-large-text-font-size:
 * progress-bar-large-text-font-weight:
 * progress-bar-large-text-line-height:
 * progress-bar-giant-height:
 * progress-bar-giant-text-font-size:
 * progress-bar-giant-text-font-weight:
 * progress-bar-giant-text-line-height:
 * progress-bar-basic-background-color:
 * progress-bar-basic-filled-background-color:
 * progress-bar-basic-text-color:
 * progress-bar-primary-background-color:
 * progress-bar-primary-filled-background-color:
 * progress-bar-primary-text-color:
 * progress-bar-success-background-color:
 * progress-bar-success-filled-background-color:
 * progress-bar-success-text-color:
 * progress-bar-info-background-color:
 * progress-bar-info-filled-background-color:
 * progress-bar-info-text-color:
 * progress-bar-warning-background-color:
 * progress-bar-warning-filled-background-color:
 * progress-bar-warning-text-color:
 * progress-bar-danger-background-color:
 * progress-bar-danger-filled-background-color:
 * progress-bar-danger-text-color:
 * progress-bar-control-background-color:
 * progress-bar-control-filled-background-color:
 * progress-bar-control-text-color:
 */
var NbProgressBarComponent = /** @class */ (function () {
    function NbProgressBarComponent() {
        /**
         * Progress bar value in percent (0 - 100)
         */
        this.value = 0;
        /**
         * Progress bar background (`basic` (default), `primary`, `info`, `success`, `warning`, `danger`, `control`)
         */
        this.status = 'basic';
        /**
         * Progress bar size (`tiny`, `small`, `medium` (default), `large`, `giant`)
         */
        this.size = 'medium';
        /**
         * Displays value inside progress bar
         */
        this.displayValue = false;
    }
    Object.defineProperty(NbProgressBarComponent.prototype, "tiny", {
        get: function () {
            return this.size === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbProgressBarComponent.prototype, "small", {
        get: function () {
            return this.size === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbProgressBarComponent.prototype, "medium", {
        get: function () {
            return this.size === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbProgressBarComponent.prototype, "large", {
        get: function () {
            return this.size === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbProgressBarComponent.prototype, "giant", {
        get: function () {
            return this.size === 'giant';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbProgressBarComponent.prototype, "primary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbProgressBarComponent.prototype, "success", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbProgressBarComponent.prototype, "info", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbProgressBarComponent.prototype, "warning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbProgressBarComponent.prototype, "danger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbProgressBarComponent.prototype, "basic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbProgressBarComponent.prototype, "control", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number)
    ], NbProgressBarComponent.prototype, "value", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbProgressBarComponent.prototype, "status", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbProgressBarComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbProgressBarComponent.prototype, "displayValue", void 0);
    tslib.__decorate([
        i0.HostBinding('class.size-tiny'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbProgressBarComponent.prototype, "tiny", null);
    tslib.__decorate([
        i0.HostBinding('class.size-small'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbProgressBarComponent.prototype, "small", null);
    tslib.__decorate([
        i0.HostBinding('class.size-medium'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbProgressBarComponent.prototype, "medium", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbProgressBarComponent.prototype, "large", null);
    tslib.__decorate([
        i0.HostBinding('class.size-giant'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbProgressBarComponent.prototype, "giant", null);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbProgressBarComponent.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbProgressBarComponent.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbProgressBarComponent.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbProgressBarComponent.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbProgressBarComponent.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbProgressBarComponent.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbProgressBarComponent.prototype, "control", null);
    NbProgressBarComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-progress-bar',
            template: "\n    <div class=\"progress-container\">\n      <div class=\"progress-value\" [style.width.%]=\"value\">\n        <span *ngIf=\"displayValue\">{{ value }}%</span>\n        <ng-content></ng-content>\n      </div>\n    </div>\n  ",
            styles: [":host{display:block}.progress-container{overflow:hidden}.progress-value{height:100%;text-align:center;overflow:hidden}\n"]
        })
    ], NbProgressBarComponent);
    return NbProgressBarComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbProgressBarModule = /** @class */ (function () {
    function NbProgressBarModule() {
    }
    NbProgressBarModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
            ],
            declarations: [NbProgressBarComponent],
            exports: [NbProgressBarComponent],
        })
    ], NbProgressBarModule);
    return NbProgressBarModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Alert component.
 *
 * Basic alert example:
 * @stacked-example(Showcase, alert/alert-showcase.component)
 *
 * Alert configuration:
 *
 * ```html
 * <nb-alert status="success">
 *   You have been successfully authenticated!
 * </nb-alert>
 * ```
 * ### Installation
 *
 * Import `NbAlertModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbAlertModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Alert could additionally have a `close` button when `closable` property is set:
 * ```html
 * <nb-alert status="success" closable (close)="onClose()">
 *   You have been successfully authenticated!
 * </nb-alert>
 * ```
 *
 * Colored alerts could be simply configured by providing a `status` property:
 * @stacked-example(Alert status, alert/alert-colors.component)
 *
 * It is also possible to assign an `accent` property for a slight alert highlight
 * as well as combine it with `status`:
 * @stacked-example(Alert accent, alert/alert-accents.component)
 *
 * And `outline` property:
 * @stacked-example(Outline Alert, alert/alert-outline.component)
 *
 * @additional-example(Multiple Sizes, alert/alert-sizes.component)
 *
 * @styles
 *
 * alert-border-radius:
 * alert-bottom-margin:
 * alert-padding:
 * alert-scrollbar-color:
 * alert-scrollbar-background-color:
 * alert-scrollbar-width:
 * alert-shadow:
 * alert-text-font-family:
 * alert-text-font-size:
 * alert-text-font-weight:
 * alert-text-line-height:
 * alert-closable-start-padding:
 * alert-tiny-height:
 * alert-small-height:
 * alert-medium-height:
 * alert-medium-padding:
 * alert-large-height:
 * alert-giant-height:
 * alert-basic-background-color:
 * alert-basic-text-color:
 * alert-primary-background-color:
 * alert-primary-text-color:
 * alert-success-background-color:
 * alert-success-text-color:
 * alert-info-background-color:
 * alert-info-text-color:
 * alert-warning-background-color:
 * alert-warning-text-color:
 * alert-danger-background-color:
 * alert-danger-text-color:
 * alert-control-background-color:
 * alert-control-text-color:
 * alert-accent-basic-color:
 * alert-accent-primary-color:
 * alert-accent-info-color:
 * alert-accent-success-color:
 * alert-accent-warning-color:
 * alert-accent-danger-color:
 * alert-accent-control-color:
 * alert-outline-width:
 * alert-outline-basic-color:
 * alert-outline-primary-color:
 * alert-outline-info-color:
 * alert-outline-success-color:
 * alert-outline-warning-color:
 * alert-outline-danger-color:
 * alert-outline-control-color:
 */
var NbAlertComponent = /** @class */ (function () {
    function NbAlertComponent() {
        /**
         * Alert size, available sizes:
         * `tiny`, `small`, `medium`, `large`, `giant`
         * Unset by default.
         */
        this.size = '';
        this._status = 'basic';
        /**
         * Alert accent (color of the top border):
         * `basic`, `primary`, `success`, `info`, `warning`, `danger`, `control`.
         * Unset by default.
         */
        this.accent = '';
        /**
         * Alert outline (color of the border):
         * `basic`, `primary`, `success`, `info`, `warning`, `danger`, `control`.
         * Unset by default.
         */
        this.outline = '';
        this._closable = false;
        /**
         * Emits when chip is removed
         * @type EventEmitter<any>
         */
        this.close = new i0.EventEmitter();
    }
    Object.defineProperty(NbAlertComponent.prototype, "status", {
        /**
         * Alert status (adds specific styles):
         * `basic` (default), `primary`, `success`, `info`, `warning`, `danger`, `control`.
         */
        get: function () {
            return this._status;
        },
        set: function (value) {
            if (value === '') {
                emptyStatusWarning('NbAlert');
                value = 'basic';
            }
            this._status = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "closable", {
        /**
         * Shows `close` icon
         */
        get: function () {
            return this._closable;
        },
        set: function (value) {
            this._closable = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Emits the removed chip event
     */
    NbAlertComponent.prototype.onClose = function () {
        this.close.emit();
    };
    Object.defineProperty(NbAlertComponent.prototype, "tiny", {
        get: function () {
            return this.size === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "small", {
        get: function () {
            return this.size === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "medium", {
        get: function () {
            return this.size === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "large", {
        get: function () {
            return this.size === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "giant", {
        get: function () {
            return this.size === 'giant';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "primary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "success", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "info", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "warning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "danger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "basic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "control", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "primaryAccent", {
        get: function () {
            return this.accent === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "successAccent", {
        get: function () {
            return this.accent === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "infoAccent", {
        get: function () {
            return this.accent === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "warningAccent", {
        get: function () {
            return this.accent === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "dangerAccent", {
        get: function () {
            return this.accent === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "basicAccent", {
        get: function () {
            return this.accent === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "controlAccent", {
        get: function () {
            return this.accent === 'control';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "primaryOutline", {
        get: function () {
            return this.outline === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "successOutline", {
        get: function () {
            return this.outline === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "infoOutline", {
        get: function () {
            return this.outline === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "warningOutline", {
        get: function () {
            return this.outline === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "dangerOutline", {
        get: function () {
            return this.outline === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "basicOutline", {
        get: function () {
            return this.outline === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAlertComponent.prototype, "controlOutline", {
        get: function () {
            return this.outline === 'control';
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbAlertComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbAlertComponent.prototype, "status", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbAlertComponent.prototype, "accent", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbAlertComponent.prototype, "outline", void 0);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.closable'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbAlertComponent.prototype, "closable", null);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbAlertComponent.prototype, "close", void 0);
    tslib.__decorate([
        i0.HostBinding('class.size-tiny'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "tiny", null);
    tslib.__decorate([
        i0.HostBinding('class.size-small'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "small", null);
    tslib.__decorate([
        i0.HostBinding('class.size-medium'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "medium", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "large", null);
    tslib.__decorate([
        i0.HostBinding('class.size-giant'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "giant", null);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "control", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-primary'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "primaryAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-success'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "successAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-info'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "infoAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-warning'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "warningAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-danger'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "dangerAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-basic'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "basicAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.accent-control'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "controlAccent", null);
    tslib.__decorate([
        i0.HostBinding('class.outline-primary'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "primaryOutline", null);
    tslib.__decorate([
        i0.HostBinding('class.outline-success'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "successOutline", null);
    tslib.__decorate([
        i0.HostBinding('class.outline-info'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "infoOutline", null);
    tslib.__decorate([
        i0.HostBinding('class.outline-warning'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "warningOutline", null);
    tslib.__decorate([
        i0.HostBinding('class.outline-danger'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "dangerOutline", null);
    tslib.__decorate([
        i0.HostBinding('class.outline-basic'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "basicOutline", null);
    tslib.__decorate([
        i0.HostBinding('class.outline-control'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAlertComponent.prototype, "controlOutline", null);
    NbAlertComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-alert',
            template: "\n    <button *ngIf=\"closable\" type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"onClose()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n    <ng-content></ng-content>\n  ",
            styles: [":host{display:flex;flex-direction:column;position:relative}[dir=ltr] :host .close{right:0}[dir=rtl] :host .close{left:0}.close{position:absolute;top:0;color:inherit;background-color:transparent;border:0;appearance:none}\n"]
        })
    ], NbAlertComponent);
    return NbAlertComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbAlertModule = /** @class */ (function () {
    function NbAlertModule() {
    }
    NbAlertModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
            ],
            declarations: [
                NbAlertComponent,
            ],
            exports: [
                NbAlertComponent,
            ],
        })
    ], NbAlertModule);
    return NbAlertModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Chat form component.
 *
 * Show a message form with a send message button.
 *
 * ```ts
 * <nb-chat-form showButton="true" buttonIcon="nb-send">
 * </nb-chat-form>
 * ```
 *
 * When `[dropFiles]="true"` handles files drag&drop with a file preview.
 *
 * Drag & drop available for files and images:
 * @stacked-example(Drag & Drop Chat, chat/chat-drop.component)
 *
 * New message could be tracked outside by using `(send)` output.
 *
 * ```ts
 * <nb-chat-form (send)="onNewMessage($event)">
 * </nb-chat-form>
 *
 * // ...
 *
 * onNewMessage({ message: string, files: any[] }) {
 *   this.service.sendToServer(message, files);
 * }
 * ```
 */
var NbChatFormComponent = /** @class */ (function () {
    function NbChatFormComponent(cd, domSanitizer) {
        this.cd = cd;
        this.domSanitizer = domSanitizer;
        this.status = 'basic';
        this.inputFocus = false;
        this.inputHover = false;
        this.droppedFiles = [];
        this.imgDropTypes = ['image/png', 'image/jpeg', 'image/gif'];
        /**
         * Predefined message text
         * @type {string}
         */
        this.message = '';
        /**
         * Message placeholder text
         * @type {string}
         */
        this.messagePlaceholder = 'Type a message';
        /**
         * Send button title
         * @type {string}
         */
        this.buttonTitle = '';
        /**
         * Send button icon, shown if `buttonTitle` is empty
         * @type {string}
         */
        this.buttonIcon = 'paper-plane-outline';
        /**
         * Show send button
         * @type {boolean}
         */
        this.showButton = true;
        /**
         * Show send button
         * @type {boolean}
         */
        this.dropFiles = false;
        /**
         * File drop placeholder text
         * @type {string}
         */
        this.dropFilePlaceholder = 'Drop file to send';
        /**
         *
         * @type {EventEmitter<{ message: string, files: File[] }>}
         */
        this.send = new i0.EventEmitter();
        this.fileOver = false;
    }
    NbChatFormComponent.prototype.onDrop = function (event) {
        var _this = this;
        if (this.dropFiles) {
            event.preventDefault();
            event.stopPropagation();
            this.fileOver = false;
            if (event.dataTransfer && event.dataTransfer.files) {
                var _loop_1 = function (file) {
                    var res = file;
                    if (this_1.imgDropTypes.includes(file.type)) {
                        var fr = new FileReader();
                        fr.onload = function (e) {
                            res.src = e.target.result;
                            res.urlStyle = _this.domSanitizer.bypassSecurityTrustStyle("url(" + res.src + ")");
                            _this.cd.detectChanges();
                        };
                        fr.readAsDataURL(file);
                    }
                    this_1.droppedFiles.push(res);
                };
                var this_1 = this;
                for (var _i = 0, _a = event.dataTransfer.files; _i < _a.length; _i++) {
                    var file = _a[_i];
                    _loop_1(file);
                }
            }
        }
    };
    NbChatFormComponent.prototype.removeFile = function (file) {
        var index = this.droppedFiles.indexOf(file);
        if (index >= 0) {
            this.droppedFiles.splice(index, 1);
        }
    };
    NbChatFormComponent.prototype.onDragOver = function () {
        if (this.dropFiles) {
            this.fileOver = true;
        }
    };
    NbChatFormComponent.prototype.onDragLeave = function () {
        if (this.dropFiles) {
            this.fileOver = false;
        }
    };
    NbChatFormComponent.prototype.sendMessage = function () {
        if (this.droppedFiles.length || String(this.message).trim().length) {
            this.send.emit({ message: this.message, files: this.droppedFiles });
            this.message = '';
            this.droppedFiles = [];
        }
    };
    NbChatFormComponent.prototype.setStatus = function (status) {
        if (this.status !== status) {
            this.status = status;
            this.cd.detectChanges();
        }
    };
    NbChatFormComponent.prototype.getInputStatus = function () {
        if (this.fileOver) {
            return this.getHighlightStatus();
        }
        if (this.inputFocus || this.inputHover) {
            return this.status;
        }
        return 'basic';
    };
    NbChatFormComponent.prototype.getButtonStatus = function () {
        return this.getHighlightStatus();
    };
    NbChatFormComponent.prototype.getHighlightStatus = function () {
        if (this.status === 'basic' || this.status === 'control') {
            return 'primary';
        }
        return this.status;
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatFormComponent.prototype, "message", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatFormComponent.prototype, "messagePlaceholder", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatFormComponent.prototype, "buttonTitle", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatFormComponent.prototype, "buttonIcon", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbChatFormComponent.prototype, "showButton", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbChatFormComponent.prototype, "dropFiles", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatFormComponent.prototype, "dropFilePlaceholder", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbChatFormComponent.prototype, "send", void 0);
    tslib.__decorate([
        i0.HostBinding('class.file-over'),
        tslib.__metadata("design:type", Object)
    ], NbChatFormComponent.prototype, "fileOver", void 0);
    tslib.__decorate([
        i0.HostListener('drop', ['$event']),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], NbChatFormComponent.prototype, "onDrop", null);
    tslib.__decorate([
        i0.HostListener('dragover'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbChatFormComponent.prototype, "onDragOver", null);
    tslib.__decorate([
        i0.HostListener('dragleave'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbChatFormComponent.prototype, "onDragLeave", null);
    NbChatFormComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-chat-form',
            template: "\n    <div class=\"dropped-files\" *ngIf=\"droppedFiles?.length\">\n      <ng-container *ngFor=\"let file of droppedFiles\">\n        <div *ngIf=\"file.urlStyle\" [style.background-image]=\"file.urlStyle\">\n          <span class=\"remove\" (click)=\"removeFile(file)\">&times;</span>\n        </div>\n\n        <div>\n          <nb-icon *ngIf=\"!file.urlStyle\" icon=\"file-text-outline\" pack=\"nebular-essentials\"></nb-icon>\n          <span class=\"remove\" (click)=\"removeFile(file)\">&times;</span>\n        </div>\n      </ng-container>\n    </div>\n    <div class=\"message-row\">\n      <input nbInput\n             fullWidth\n             [status]=\"getInputStatus()\"\n             (focus)=\"inputFocus = true\"\n             (blur)=\"inputFocus = false\"\n             (mouseenter)=\"inputHover = true\"\n             (mouseleave)=\"inputHover = false\"\n             [(ngModel)]=\"message\"\n             [class.with-button]=\"showButton\"\n             type=\"text\"\n             placeholder=\"{{ fileOver ? dropFilePlaceholder : messagePlaceholder }}\"\n             (keyup.enter)=\"sendMessage()\">\n      <button nbButton\n              [status]=\"getButtonStatus()\"\n              *ngIf=\"showButton\"\n              [class.with-icon]=\"!buttonTitle\"\n              (click)=\"sendMessage()\"\n              class=\"send-button\">\n        <nb-icon *ngIf=\"!buttonTitle; else title\" [icon]=\"buttonIcon\" pack=\"nebular-essentials\"></nb-icon>\n        <ng-template #title>{{ buttonTitle }}</ng-template>\n      </button>\n    </div>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [i0.ChangeDetectorRef, _angular_platformBrowser.DomSanitizer])
    ], NbChatFormComponent);
    return NbChatFormComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Chat message component.
 *
 * Multiple message types are available through a `type` property, such as
 * - text - simple text message
 * - file - could be a file preview or a file icon
 * if multiple files are provided grouped files are shown
 * - quote - quotes a message with specific quote styles
 * - map - shows a google map picture by provided [latitude] and [longitude] properties
 *
 * @stacked-example(Available Types, chat/chat-message-types-showcase.component)
 *
 * Message with attached files:
 * ```html
 * <nb-chat-message
 *   type="file"
 *   [files]="[ { url: '...' } ]"
 *   message="Hello world!">
 * </nb-chat-message>
 * ```
 *
 * Map message:
 * ```html
 * <nb-chat-message
 *   type="map"
 *   [latitude]="53.914"
 *   [longitude]="27.59"
 *   message="Here I am">
 * </nb-chat-message>
 * ```
 *
 * @styles
 *
 * chat-message-background:
 * chat-message-text-color:
 * chat-message-reply-background-color:
 * chat-message-reply-text-color:
 * chat-message-avatar-background-color:
 * chat-message-sender-text-color:
 * chat-message-quote-background-color:
 * chat-message-quote-text-color:
 * chat-message-file-text-color:
 * chat-message-file-background-color:
 */
var NbChatMessageComponent = /** @class */ (function () {
    function NbChatMessageComponent(domSanitizer) {
        this.domSanitizer = domSanitizer;
        this._reply = false;
    }
    Object.defineProperty(NbChatMessageComponent.prototype, "flyInOut", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatMessageComponent.prototype, "notReply", {
        get: function () {
            return !this.reply;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatMessageComponent.prototype, "reply", {
        /**
         * Determines if a message is a reply
         */
        get: function () {
            return this._reply;
        },
        set: function (value) {
            this._reply = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatMessageComponent.prototype, "avatar", {
        /**
         * Message send avatar
         * @type {string}
         */
        set: function (value) {
            this.avatarStyle = value ? this.domSanitizer.bypassSecurityTrustStyle("url(" + value + ")") : null;
        },
        enumerable: true,
        configurable: true
    });
    NbChatMessageComponent.prototype.getInitials = function () {
        if (this.sender) {
            var names = this.sender.split(' ');
            return names.map(function (n) { return n.charAt(0); }).splice(0, 2).join('').toUpperCase();
        }
        return '';
    };
    tslib.__decorate([
        i0.HostBinding('@flyInOut'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatMessageComponent.prototype, "flyInOut", null);
    tslib.__decorate([
        i0.HostBinding('class.not-reply'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatMessageComponent.prototype, "notReply", null);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.reply'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbChatMessageComponent.prototype, "reply", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageComponent.prototype, "message", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageComponent.prototype, "sender", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Date)
    ], NbChatMessageComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageComponent.prototype, "dateFormat", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Array)
    ], NbChatMessageComponent.prototype, "files", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageComponent.prototype, "quote", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number)
    ], NbChatMessageComponent.prototype, "latitude", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number)
    ], NbChatMessageComponent.prototype, "longitude", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbChatMessageComponent.prototype, "avatar", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageComponent.prototype, "type", void 0);
    NbChatMessageComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-chat-message',
            template: "\n    <div class=\"avatar\" [style.background-image]=\"avatarStyle\" *ngIf=\"!reply\">\n      <ng-container *ngIf=\"!avatarStyle\">\n        {{ getInitials() }}\n      </ng-container>\n    </div>\n    <div class=\"message\">\n      <ng-container [ngSwitch]=\"type\">\n\n        <nb-chat-message-file *ngSwitchCase=\"'file'\"\n                              [sender]=\"sender\" [date]=\"date\" [dateFormat]=\"dateFormat\"\n                              [message]=\"message\" [files]=\"files\">\n        </nb-chat-message-file>\n\n        <nb-chat-message-quote *ngSwitchCase=\"'quote'\"\n                              [sender]=\"sender\" [date]=\"date\" [dateFormat]=\"dateFormat\"\n                              [message]=\"message\" [quote]=\"quote\">\n        </nb-chat-message-quote>\n\n        <nb-chat-message-map *ngSwitchCase=\"'map'\"\n                              [sender]=\"sender\" [date]=\"date\"\n                              [message]=\"message\" [latitude]=\"latitude\" [longitude]=\"longitude\">\n        </nb-chat-message-map>\n\n        <nb-chat-message-text *ngSwitchDefault\n                              [sender]=\"sender\" [date]=\"date\" [dateFormat]=\"dateFormat\"\n                              [message]=\"message\">\n        </nb-chat-message-text>\n      </ng-container>\n    </div>\n  ",
            animations: [
                _angular_animations.trigger('flyInOut', [
                    _angular_animations.state('in', _angular_animations.style({ transform: 'translateX(0)' })),
                    _angular_animations.transition('void => *', [
                        _angular_animations.style({ transform: 'translateX(-100%)' }),
                        _angular_animations.animate(80),
                    ]),
                    _angular_animations.transition('* => void', [
                        _angular_animations.animate(80, _angular_animations.style({ transform: 'translateX(100%)' })),
                    ]),
                ]),
            ],
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [_angular_platformBrowser.DomSanitizer])
    ], NbChatMessageComponent);
    return NbChatMessageComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Conversational UI collection - a set of components for chat-like UI construction.
 *
 * Main features:
 * - different message types support (text, image, file, file group, map, etc)
 * - drag & drop for images and files with preview
 * - different UI styles
 * - custom action buttons (coming soon)
 *
 * Here's a complete example build in a bot-like app. Type `help` to be able to receive different message types.
 * Enjoy the conversation and the beautiful UI.
 * @stacked-example(Showcase, chat/chat-showcase.component)
 *
 * Basic chat configuration and usage:
 * ```ts
 * <nb-chat title="Nebular Conversational UI">
 *       <nb-chat-message *ngFor="let msg of messages"
 *                        [type]="msg.type"
 *                        [message]="msg.text"
 *                        [reply]="msg.reply"
 *                        [sender]="msg.user.name"
 *                        [date]="msg.date"
 *                        [files]="msg.files"
 *                        [quote]="msg.quote"
 *                        [latitude]="msg.latitude"
 *                        [longitude]="msg.longitude"
 *                        [avatar]="msg.user.avatar">
 *   </nb-chat-message>
 *
 *   <nb-chat-form (send)="sendMessage($event)" [dropFiles]="true">
 *   </nb-chat-form>
 * </nb-chat>
 * ```
 * ### Installation
 *
 * Import `NbChatModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbChatModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 *
 * If you need to provide an API key for a `map` message type (which is required by Google Maps)
 * you may use `NbChatModule.forRoot({ ... })` call if this is a global app configuration
 * or `NbChatModule.forChild({ ... })` for a feature module configuration:
 *
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbChatModule.forRoot({ messageGoogleMapKey: 'MAP_KEY' }),
 *   ],
 * })
 * export class AppModule { }
 * ```
 *
 * ### Usage
 *
 * There are three main components:
 * ```ts
 * <nb-chat>
 * </nb-chat> // chat container
 *
 * <nb-chat-form>
 * </nb-chat-form> // chat form with drag&drop files feature
 *
 * <nb-chat-message>
 * </nb-chat-message> // chat message, available multiple types
 * ```
 *
 * Two users conversation showcase:
 * @stacked-example(Conversation, chat/chat-conversation-showcase.component)
 *
 * Chat UI is also available in different colors by specifying a `[status]` input:
 *
 * @stacked-example(Colored Chat, chat/chat-colors.component)
 *
 * Also it is possible to configure sizes through `[size]` input:
 *
 * @stacked-example(Chat Sizes, chat/chat-sizes.component)
 *
 * @styles
 *
 * chat-background-color:
 * chat-border:
 * chat-border-radius:
 * chat-shadow:
 * chat-padding:
 * chat-scrollbar-color:
 * chat-scrollbar-background-color:
 * chat-scrollbar-width:
 * chat-text-color:
 * chat-text-font-family:
 * chat-text-font-size:
 * chat-text-font-weight:
 * chat-text-line-height:
 * chat-header-text-font-family:
 * chat-header-text-font-size:
 * chat-header-text-font-weight:
 * chat-header-text-line-height:
 * chat-tiny-height:
 * chat-small-height:
 * chat-medium-height:
 * chat-large-height:
 * chat-giant-height:
 * chat-basic-background-color:
 * chat-basic-text-color:
 * chat-primary-background-color:
 * chat-primary-text-color:
 * chat-success-background-color:
 * chat-success-text-color:
 * chat-info-background-color:
 * chat-info-text-color:
 * chat-warning-background-color:
 * chat-warning-text-color:
 * chat-danger-background-color:
 * chat-danger-text-color:
 * chat-control-background-color:
 * chat-control-text-color:
 * chat-divider-color:
 * chat-divider-style:
 * chat-divider-width:
 * chat-message-background:
 * chat-message-text-color:
 * chat-message-reply-background-color:
 * chat-message-reply-text-color:
 * chat-message-avatar-background-color:
 * chat-message-sender-text-color:
 * chat-message-quote-background-color:
 * chat-message-quote-text-color:
 * chat-message-file-text-color:
 * chat-message-file-background-color:
 */
var NbChatComponent = /** @class */ (function () {
    function NbChatComponent() {
        this._status = 'basic';
        this.noMessagesPlaceholder = 'No messages yet.';
        this._scrollBottom = true;
    }
    Object.defineProperty(NbChatComponent.prototype, "status", {
        /**
         * Chat status color (adds specific styles):
         * `basic` (default), `primary`, `success`, `info`, `warning`, `danger`, `control`.
         */
        get: function () {
            return this._status;
        },
        set: function (value) {
            if (!value) {
                emptyStatusWarning('NbChat');
                value = 'basic';
            }
            this._status = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatComponent.prototype, "scrollBottom", {
        /**
         * Scroll chat to the bottom of the list when a new message arrives
         */
        get: function () {
            return this._scrollBottom;
        },
        set: function (value) {
            this._scrollBottom = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NbChatComponent.prototype.ngOnChanges = function (changes) {
        if ('status' in changes) {
            this.updateFormStatus();
        }
    };
    NbChatComponent.prototype.ngAfterContentInit = function () {
        this.updateFormStatus();
    };
    NbChatComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.messages.changes
            .subscribe(function (messages) {
            _this.messages = messages;
            _this.updateView();
        });
        this.updateView();
    };
    NbChatComponent.prototype.updateView = function () {
        if (this.scrollBottom) {
            this.scrollListBottom();
        }
    };
    NbChatComponent.prototype.scrollListBottom = function () {
        this.scrollable.nativeElement.scrollTop = this.scrollable.nativeElement.scrollHeight;
    };
    NbChatComponent.prototype.updateFormStatus = function () {
        if (this.chatForm) {
            this.chatForm.setStatus(this.status);
        }
    };
    Object.defineProperty(NbChatComponent.prototype, "tiny", {
        get: function () {
            return this.size === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatComponent.prototype, "small", {
        get: function () {
            return this.size === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatComponent.prototype, "medium", {
        get: function () {
            return this.size === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatComponent.prototype, "large", {
        get: function () {
            return this.size === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatComponent.prototype, "giant", {
        get: function () {
            return this.size === 'giant';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatComponent.prototype, "primary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatComponent.prototype, "success", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatComponent.prototype, "info", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatComponent.prototype, "warning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatComponent.prototype, "danger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatComponent.prototype, "basic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbChatComponent.prototype, "control", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatComponent.prototype, "title", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbChatComponent.prototype, "status", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatComponent.prototype, "noMessagesPlaceholder", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbChatComponent.prototype, "scrollBottom", null);
    tslib.__decorate([
        i0.ViewChild('scrollable'),
        tslib.__metadata("design:type", i0.ElementRef)
    ], NbChatComponent.prototype, "scrollable", void 0);
    tslib.__decorate([
        i0.ContentChildren(NbChatMessageComponent),
        tslib.__metadata("design:type", i0.QueryList)
    ], NbChatComponent.prototype, "messages", void 0);
    tslib.__decorate([
        i0.ContentChild(NbChatFormComponent),
        tslib.__metadata("design:type", NbChatFormComponent)
    ], NbChatComponent.prototype, "chatForm", void 0);
    tslib.__decorate([
        i0.HostBinding('class.size-tiny'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatComponent.prototype, "tiny", null);
    tslib.__decorate([
        i0.HostBinding('class.size-small'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatComponent.prototype, "small", null);
    tslib.__decorate([
        i0.HostBinding('class.size-medium'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatComponent.prototype, "medium", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatComponent.prototype, "large", null);
    tslib.__decorate([
        i0.HostBinding('class.size-giant'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatComponent.prototype, "giant", null);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatComponent.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatComponent.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatComponent.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatComponent.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatComponent.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatComponent.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbChatComponent.prototype, "control", null);
    NbChatComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-chat',
            template: "\n    <div class=\"header\">{{ title }}</div>\n    <div class=\"scrollable\" #scrollable>\n      <div class=\"messages\">\n        <ng-content select=\"nb-chat-message\"></ng-content>\n        <p class=\"no-messages\" *ngIf=\"!messages?.length\">{{ noMessagesPlaceholder }}</p>\n      </div>\n    </div>\n    <div class=\"form\">\n      <ng-content select=\"nb-chat-form\"></ng-content>\n    </div>\n  ",
            styles: [":host{display:flex;flex-direction:column;position:relative;height:100%}\n"]
        })
    ], NbChatComponent);
    return NbChatComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbChatOptions = /** @class */ (function () {
    function NbChatOptions() {
    }
    return NbChatOptions;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Chat message component.
 */
var NbChatMessageMapComponent = /** @class */ (function () {
    function NbChatMessageMapComponent(options) {
        /**
         * Message send date format, default 'shortTime'
         * @type {string}
         */
        this.dateFormat = 'shortTime';
        this.mapKey = options.messageGoogleMapKey;
    }
    Object.defineProperty(NbChatMessageMapComponent.prototype, "file", {
        get: function () {
            return {
                // tslint:disable-next-line:max-line-length
                url: "https://maps.googleapis.com/maps/api/staticmap?center=" + this.latitude + "," + this.longitude + "&zoom=12&size=400x400&key=" + this.mapKey,
                type: 'image/png',
                icon: 'location',
            };
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageMapComponent.prototype, "message", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageMapComponent.prototype, "sender", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Date)
    ], NbChatMessageMapComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageMapComponent.prototype, "dateFormat", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number)
    ], NbChatMessageMapComponent.prototype, "latitude", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number)
    ], NbChatMessageMapComponent.prototype, "longitude", void 0);
    NbChatMessageMapComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-chat-message-map',
            template: "\n    <nb-chat-message-file [files]=\"[file]\" [message]=\"message\" [sender]=\"sender\" [date]=\"date\"\n     [dateFormat]=\"dateFormat\"></nb-chat-message-file>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [NbChatOptions])
    ], NbChatMessageMapComponent);
    return NbChatMessageMapComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Chat message component.
 */
var NbChatMessageFileComponent = /** @class */ (function () {
    function NbChatMessageFileComponent(cd, domSanitizer) {
        this.cd = cd;
        this.domSanitizer = domSanitizer;
        /**
         * Message send date format, default 'shortTime'
         * @type {string}
         */
        this.dateFormat = 'shortTime';
    }
    Object.defineProperty(NbChatMessageFileComponent.prototype, "files", {
        /**
         * Message file path
         * @type {Date}
         */
        set: function (files) {
            var _this = this;
            this.readyFiles = (files || []).map(function (file) {
                var isImage = _this.isImage(file);
                return tslib.__assign(tslib.__assign({}, file), { urlStyle: isImage && _this.domSanitizer.bypassSecurityTrustStyle("url(" + file.url + ")"), isImage: isImage });
            });
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    NbChatMessageFileComponent.prototype.isImage = function (file) {
        var type = file.type;
        if (type) {
            return ['image/png', 'image/jpeg', 'image/gif'].includes(type);
        }
        return false;
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageFileComponent.prototype, "message", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageFileComponent.prototype, "sender", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Date)
    ], NbChatMessageFileComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageFileComponent.prototype, "dateFormat", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Array),
        tslib.__metadata("design:paramtypes", [Array])
    ], NbChatMessageFileComponent.prototype, "files", null);
    NbChatMessageFileComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-chat-message-file',
            template: "\n    <nb-chat-message-text [sender]=\"sender\" [date]=\"date\" [dateFormat]=\"dateFormat\" [message]=\"message\">\n      {{ message }}\n    </nb-chat-message-text>\n\n    <ng-container *ngIf=\"readyFiles?.length > 1\">\n      <div class=\"message-content-group\">\n        <a *ngFor=\"let file of readyFiles\" [href]=\"file.url\" target=\"_blank\">\n          <nb-icon [icon]=\"file.icon\" *ngIf=\"!file.urlStyle && file.icon\"></nb-icon>\n          <div *ngIf=\"file.urlStyle\" [style.background-image]=\"file.urlStyle\"></div>\n        </a>\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"readyFiles?.length === 1\">\n      <a [href]=\"readyFiles[0].url\" target=\"_blank\">\n        <nb-icon [icon]=\"readyFiles[0].icon\" *ngIf=\"!readyFiles[0].urlStyle && readyFiles[0].icon\"></nb-icon>\n        <div *ngIf=\"readyFiles[0].urlStyle\" [style.background-image]=\"readyFiles[0].urlStyle\"></div>\n      </a>\n    </ng-container>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__metadata("design:paramtypes", [i0.ChangeDetectorRef, _angular_platformBrowser.DomSanitizer])
    ], NbChatMessageFileComponent);
    return NbChatMessageFileComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Chat message component.
 */
var NbChatMessageQuoteComponent = /** @class */ (function () {
    function NbChatMessageQuoteComponent() {
        /**
          * Message send date format, default 'shortTime'
          * @type {string}
          */
        this.dateFormat = 'shortTime';
    }
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageQuoteComponent.prototype, "message", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageQuoteComponent.prototype, "sender", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Date)
    ], NbChatMessageQuoteComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageQuoteComponent.prototype, "dateFormat", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageQuoteComponent.prototype, "quote", void 0);
    NbChatMessageQuoteComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-chat-message-quote',
            template: "\n    <p class=\"sender\" *ngIf=\"sender || date\">{{ sender }} <time>{{ date | date: dateFormat }}</time></p>\n    <p class=\"quote\">\n      {{ quote }}\n    </p>\n    <nb-chat-message-text [message]=\"message\">\n      {{ message }}\n    </nb-chat-message-text>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        })
    ], NbChatMessageQuoteComponent);
    return NbChatMessageQuoteComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Chat message component.
 */
var NbChatMessageTextComponent = /** @class */ (function () {
    function NbChatMessageTextComponent() {
        /**
         * Message send date format, default 'shortTime'
         * @type {string}
         */
        this.dateFormat = 'shortTime';
    }
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageTextComponent.prototype, "sender", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageTextComponent.prototype, "message", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Date)
    ], NbChatMessageTextComponent.prototype, "date", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbChatMessageTextComponent.prototype, "dateFormat", void 0);
    NbChatMessageTextComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-chat-message-text',
            template: "\n    <p class=\"sender\" *ngIf=\"sender || date\">{{ sender }} <time>{{ date  | date: dateFormat }}</time></p>\n    <p class=\"text\" *ngIf=\"message\">{{ message }}</p>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        })
    ], NbChatMessageTextComponent);
    return NbChatMessageTextComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/*
 * Class used as injection token to provide form element.
 **/
var NbFormFieldControl = /** @class */ (function () {
    function NbFormFieldControl() {
    }
    NbFormFieldControl = tslib.__decorate([
        i0.Injectable()
    ], NbFormFieldControl);
    return NbFormFieldControl;
}());
/*
 * Optional config to be provided on NbFormFieldControl to alter default settings.
 **/
var NbFormFieldControlConfig = /** @class */ (function () {
    function NbFormFieldControlConfig() {
        this.supportsPrefix = true;
        this.supportsSuffix = true;
    }
    NbFormFieldControlConfig = tslib.__decorate([
        i0.Injectable()
    ], NbFormFieldControlConfig);
    return NbFormFieldControlConfig;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Basic input directive.
 *
 * ```html
 * <input nbInput></input>
 * ```
 *
 * ### Installation
 *
 * Import `NbInputModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbInputModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Default input size is `medium`:
 * @stacked-example(Showcase, input/input-showcase.component)
 *
 * Inputs are available in multiple colors using `status` property:
 * @stacked-example(Input Colors, input/input-colors.component)
 *
 * There are three input sizes:
 *
 * @stacked-example(Input Sizes, input/input-sizes.component)
 *
 * Inputs available in different shapes, which could be combined with the other properties:
 * @stacked-example(Input Shapes, input/input-shapes.component)
 *
 * `nbInput` could be applied to the following selectors - `input`, `textarea`:
 * @stacked-example(Input Elements, input/input-types.component)
 *
 * You can add `fullWidth` attribute to make element fill container:
 * @stacked-example(Full width inputs, input/input-full-width.component)
 *
 * Or you can bind control with form controls or ngModel:
 * @stacked-example(Input form binding, input/input-form.component)
 *
 * Use `<nb-form-field>` to add custom content to the input field.
 * First import `NbFormFieldModule`. Then put the input field and custom content into
 * `<nb-form-field>` and add `nbPrefix` or `nbSuffix` directive to the custom content.
 * `nbPrefix` puts content before input and `nbSuffix` after.
 *
 * @stacked-example(Input with icon, form-field/form-field-input.component)
 * @stacked-example(Input with button, form-field/form-field-password.component)
 *
 * @styles
 *
 * input-border-style:
 * input-border-width:
 * input-outline-color:
 * input-outline-width:
 * input-placeholder-text-font-family:
 * input-text-font-family:
 * input-basic-text-color:
 * input-basic-placeholder-text-color:
 * input-basic-background-color:
 * input-basic-border-color:
 * input-basic-focus-background-color:
 * input-basic-focus-border-color:
 * input-basic-hover-background-color:
 * input-basic-hover-border-color:
 * input-basic-disabled-background-color:
 * input-basic-disabled-border-color:
 * input-basic-disabled-text-color:
 * input-basic-disabled-placeholder-text-color:
 * input-primary-text-color:
 * input-primary-placeholder-text-color:
 * input-primary-background-color:
 * input-primary-border-color:
 * input-primary-focus-background-color:
 * input-primary-focus-border-color:
 * input-primary-hover-background-color:
 * input-primary-hover-border-color:
 * input-primary-disabled-background-color:
 * input-primary-disabled-border-color:
 * input-primary-disabled-text-color:
 * input-primary-disabled-placeholder-text-color:
 * input-success-text-color:
 * input-success-placeholder-text-color:
 * input-success-background-color:
 * input-success-border-color:
 * input-success-focus-background-color:
 * input-success-focus-border-color:
 * input-success-hover-background-color:
 * input-success-hover-border-color:
 * input-success-disabled-background-color:
 * input-success-disabled-border-color:
 * input-success-disabled-text-color:
 * input-success-disabled-placeholder-text-color:
 * input-info-text-color:
 * input-info-placeholder-text-color:
 * input-info-background-color:
 * input-info-border-color:
 * input-info-focus-background-color:
 * input-info-focus-border-color:
 * input-info-hover-background-color:
 * input-info-hover-border-color:
 * input-info-disabled-background-color:
 * input-info-disabled-border-color:
 * input-info-disabled-text-color:
 * input-info-disabled-placeholder-text-color:
 * input-warning-text-color:
 * input-warning-placeholder-text-color:
 * input-warning-background-color:
 * input-warning-border-color:
 * input-warning-focus-background-color:
 * input-warning-focus-border-color:
 * input-warning-hover-background-color:
 * input-warning-hover-border-color:
 * input-warning-disabled-background-color:
 * input-warning-disabled-border-color:
 * input-warning-disabled-text-color:
 * input-warning-disabled-placeholder-text-color:
 * input-danger-text-color:
 * input-danger-placeholder-text-color:
 * input-danger-background-color:
 * input-danger-border-color:
 * input-danger-focus-background-color:
 * input-danger-focus-border-color:
 * input-danger-hover-background-color:
 * input-danger-hover-border-color:
 * input-danger-disabled-background-color:
 * input-danger-disabled-border-color:
 * input-danger-disabled-text-color:
 * input-danger-disabled-placeholder-text-color:
 * input-control-text-color:
 * input-control-placeholder-text-color:
 * input-control-background-color:
 * input-control-border-color:
 * input-control-focus-background-color:
 * input-control-focus-border-color:
 * input-control-hover-background-color:
 * input-control-hover-border-color:
 * input-control-disabled-background-color:
 * input-control-disabled-border-color:
 * input-control-disabled-text-color:
 * input-control-disabled-placeholder-text-color:
 * input-rectangle-border-radius:
 * input-semi-round-border-radius:
 * input-round-border-radius:
 * input-tiny-text-font-size:
 * input-tiny-text-font-weight:
 * input-tiny-text-line-height:
 * input-tiny-placeholder-text-font-size:
 * input-tiny-placeholder-text-font-weight:
 * input-tiny-placeholder-text-line-height:
 * input-tiny-padding:
 * input-tiny-max-width:
 * input-small-text-font-size:
 * input-small-text-font-weight:
 * input-small-text-line-height:
 * input-small-placeholder-text-font-size:
 * input-small-placeholder-text-font-weight:
 * input-small-placeholder-text-line-height:
 * input-small-padding:
 * input-small-max-width:
 * input-medium-text-font-size:
 * input-medium-text-font-weight:
 * input-medium-text-line-height:
 * input-medium-placeholder-text-font-size:
 * input-medium-placeholder-text-font-weight:
 * input-medium-placeholder-text-line-height:
 * input-medium-padding:
 * input-medium-max-width:
 * input-large-text-font-size:
 * input-large-text-font-weight:
 * input-large-text-line-height:
 * input-large-placeholder-text-font-size:
 * input-large-placeholder-text-font-weight:
 * input-large-placeholder-text-line-height:
 * input-large-padding:
 * input-large-max-width:
 * input-giant-text-font-size:
 * input-giant-text-font-weight:
 * input-giant-text-line-height:
 * input-giant-placeholder-text-font-size:
 * input-giant-placeholder-text-font-weight:
 * input-giant-placeholder-text-line-height:
 * input-giant-padding:
 * input-giant-max-width:
 */
var NbInputDirective = /** @class */ (function () {
    function NbInputDirective(elementRef, focusMonitor, renderer, zone) {
        this.elementRef = elementRef;
        this.focusMonitor = focusMonitor;
        this.renderer = renderer;
        this.zone = zone;
        this.destroy$ = new rxjs.Subject();
        /**
         * Field size modifications. Possible values: `small`, `medium` (default), `large`.
         */
        this.fieldSize = 'medium';
        this._status = 'basic';
        /**
         * Field shapes modifications. Possible values: `rectangle` (default), `round`, `semi-round`.
         */
        this.shape = 'rectangle';
        this._fullWidth = false;
        /*
         * @docs-private
         **/
        this.status$ = new rxjs.BehaviorSubject(this.status);
        /*
         * @docs-private
         **/
        this.size$ = new rxjs.BehaviorSubject(this.fieldSize);
        /*
         * @docs-private
         **/
        this.focused$ = new rxjs.BehaviorSubject(false);
        /*
         * @docs-private
         **/
        this.disabled$ = new rxjs.BehaviorSubject(false);
    }
    NbInputDirective_1 = NbInputDirective;
    Object.defineProperty(NbInputDirective.prototype, "status", {
        /**
         * Field status (adds specific styles):
         * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`
         */
        get: function () {
            return this._status;
        },
        set: function (value) {
            if (value === '') {
                emptyStatusWarning('NbInput');
                this._status = 'basic';
            }
            else {
                this._status = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "fullWidth", {
        /**
         * If set element will fill container. `false` by default.
         */
        get: function () {
            return this._fullWidth;
        },
        set: function (value) {
            this._fullWidth = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NbInputDirective.prototype.ngDoCheck = function () {
        var isDisabled = this.elementRef.nativeElement.disabled;
        if (isDisabled !== this.disabled$.value) {
            this.disabled$.next(isDisabled);
        }
    };
    NbInputDirective.prototype.ngOnChanges = function (_a) {
        var status = _a.status, fieldSize = _a.fieldSize;
        if (status) {
            this.status$.next(this.status);
        }
        if (fieldSize) {
            this.size$.next(this.fieldSize);
        }
    };
    NbInputDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.focusMonitor.monitor(this.elementRef)
            .pipe(rxjs_operators.map(function (origin) { return !!origin; }), rxjs_operators.finalize(function () { return _this.focusMonitor.stopMonitoring(_this.elementRef); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(this.focused$);
    };
    NbInputDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        // TODO: #2254
        this.zone.runOutsideAngular(function () { return setTimeout(function () {
            _this.renderer.addClass(_this.elementRef.nativeElement, 'nb-transition');
        }); });
    };
    NbInputDirective.prototype.ngOnDestroy = function () {
        this.destroy$.next();
    };
    Object.defineProperty(NbInputDirective.prototype, "tiny", {
        get: function () {
            return this.fieldSize === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "small", {
        get: function () {
            return this.fieldSize === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "medium", {
        get: function () {
            return this.fieldSize === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "large", {
        get: function () {
            return this.fieldSize === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "giant", {
        get: function () {
            return this.fieldSize === 'giant';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "primary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "info", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "success", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "warning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "danger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "basic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "control", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "rectangle", {
        get: function () {
            return this.shape === 'rectangle';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "semiRound", {
        get: function () {
            return this.shape === 'semi-round';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInputDirective.prototype, "round", {
        get: function () {
            return this.shape === 'round';
        },
        enumerable: true,
        configurable: true
    });
    var NbInputDirective_1;
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbInputDirective.prototype, "fieldSize", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbInputDirective.prototype, "status", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbInputDirective.prototype, "shape", void 0);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.input-full-width'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbInputDirective.prototype, "fullWidth", null);
    tslib.__decorate([
        i0.HostBinding('class.size-tiny'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "tiny", null);
    tslib.__decorate([
        i0.HostBinding('class.size-small'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "small", null);
    tslib.__decorate([
        i0.HostBinding('class.size-medium'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "medium", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "large", null);
    tslib.__decorate([
        i0.HostBinding('class.size-giant'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "giant", null);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "control", null);
    tslib.__decorate([
        i0.HostBinding('class.shape-rectangle'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "rectangle", null);
    tslib.__decorate([
        i0.HostBinding('class.shape-semi-round'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "semiRound", null);
    tslib.__decorate([
        i0.HostBinding('class.shape-round'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbInputDirective.prototype, "round", null);
    NbInputDirective = NbInputDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: 'input[nbInput],textarea[nbInput]',
            providers: [
                { provide: NbFormFieldControl, useExisting: NbInputDirective_1 },
            ],
        }),
        tslib.__metadata("design:paramtypes", [i0.ElementRef,
            NbFocusMonitor,
            i0.Renderer2,
            i0.NgZone])
    ], NbInputDirective);
    return NbInputDirective;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_INPUT_COMPONENTS = [
    NbInputDirective,
];
var NbInputModule = /** @class */ (function () {
    function NbInputModule() {
    }
    NbInputModule = tslib.__decorate([
        i0.NgModule({
            imports: [NbSharedModule],
            declarations: NB_INPUT_COMPONENTS,
            exports: NB_INPUT_COMPONENTS,
        })
    ], NbInputModule);
    return NbInputModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_CHAT_COMPONENTS = [
    NbChatComponent,
    NbChatMessageComponent,
    NbChatFormComponent,
    NbChatMessageTextComponent,
    NbChatMessageFileComponent,
    NbChatMessageQuoteComponent,
    NbChatMessageMapComponent,
];
var NbChatModule = /** @class */ (function () {
    function NbChatModule() {
    }
    NbChatModule_1 = NbChatModule;
    NbChatModule.forRoot = function (options) {
        return {
            ngModule: NbChatModule_1,
            providers: [
                { provide: NbChatOptions, useValue: options || {} },
            ],
        };
    };
    NbChatModule.forChild = function (options) {
        return {
            ngModule: NbChatModule_1,
            providers: [
                { provide: NbChatOptions, useValue: options || {} },
            ],
        };
    };
    var NbChatModule_1;
    NbChatModule = NbChatModule_1 = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
                NbIconModule,
                NbInputModule,
                NbButtonModule,
            ],
            declarations: tslib.__spreadArrays(NB_CHAT_COMPONENTS),
            exports: tslib.__spreadArrays(NB_CHAT_COMPONENTS),
        })
    ], NbChatModule);
    return NbChatModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Styled spinner component
 *
 * @styles
 *
 * spinner-text-color:
 * spinner-text-font-family:
 * spinner-text-font-size:
 * spinner-text-font-weight:
 * spinner-text-line-height:
 * spinner-basic-background-color:
 * spinner-basic-circle-filled-color:
 * spinner-basic-circle-empty-color:
 * spinner-primary-background-color:
 * spinner-primary-circle-filled-color:
 * spinner-primary-circle-empty-color:
 * spinner-info-background-color:
 * spinner-info-circle-filled-color:
 * spinner-info-circle-empty-color:
 * spinner-success-background-color:
 * spinner-success-circle-filled-color:
 * spinner-success-circle-empty-color:
 * spinner-warning-background-color:
 * spinner-warning-circle-filled-color:
 * spinner-warning-circle-empty-color:
 * spinner-danger-background-color:
 * spinner-danger-circle-filled-color:
 * spinner-danger-circle-empty-color:
 * spinner-control-background-color:
 * spinner-control-circle-filled-color:
 * spinner-control-circle-empty-color:
 * spinner-height-tiny:
 * spinner-height-small:
 * spinner-height-medium:
 * spinner-height-large:
 * spinner-height-giant:
 */
var NbSpinnerComponent = /** @class */ (function () {
    function NbSpinnerComponent() {
        /**
         * Loading text that is shown near the icon
         * @type string
         */
        this.message = 'Loading...';
        /**
         * Spinner size, available sizes:
         * tiny, small, medium, large, giant
         * @param {string} value
         */
        this.size = 'medium';
        this._status = 'basic';
    }
    Object.defineProperty(NbSpinnerComponent.prototype, "status", {
        /**
         * Spinner status (adds specific styles):
         * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`.
         */
        get: function () {
            return this._status;
        },
        set: function (value) {
            if (value === '') {
                emptyStatusWarning('NbSpinner');
                value = 'basic';
            }
            this._status = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSpinnerComponent.prototype, "tiny", {
        get: function () {
            return this.size === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSpinnerComponent.prototype, "small", {
        get: function () {
            return this.size === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSpinnerComponent.prototype, "medium", {
        get: function () {
            return this.size === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSpinnerComponent.prototype, "large", {
        get: function () {
            return this.size === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSpinnerComponent.prototype, "giant", {
        get: function () {
            return this.size === 'giant';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSpinnerComponent.prototype, "primary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSpinnerComponent.prototype, "info", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSpinnerComponent.prototype, "success", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSpinnerComponent.prototype, "warning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSpinnerComponent.prototype, "danger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSpinnerComponent.prototype, "basic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSpinnerComponent.prototype, "control", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSpinnerComponent.prototype, "message", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSpinnerComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbSpinnerComponent.prototype, "status", null);
    tslib.__decorate([
        i0.HostBinding('class.size-tiny'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSpinnerComponent.prototype, "tiny", null);
    tslib.__decorate([
        i0.HostBinding('class.size-small'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSpinnerComponent.prototype, "small", null);
    tslib.__decorate([
        i0.HostBinding('class.size-medium'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSpinnerComponent.prototype, "medium", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSpinnerComponent.prototype, "large", null);
    tslib.__decorate([
        i0.HostBinding('class.size-giant'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSpinnerComponent.prototype, "giant", null);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSpinnerComponent.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSpinnerComponent.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSpinnerComponent.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSpinnerComponent.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSpinnerComponent.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSpinnerComponent.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbSpinnerComponent.prototype, "control", null);
    NbSpinnerComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-spinner',
            template: "\n    <span class=\"spin-circle\"></span>\n    <span class=\"message\" *ngIf=\"message\">{{ message }}</span>\n  ",
            styles: [":host{opacity:1;position:absolute;border-radius:inherit;top:0;right:0;left:0;bottom:0;overflow:hidden;z-index:9999;display:flex;justify-content:center;align-items:center;visibility:visible}:host .spin-circle{animation:spin 0.8s infinite linear;border-radius:50%;border-style:solid;border-width:0.125em;width:1em;height:1em}:host .message{margin-left:0.5rem}\n"]
        })
    ], NbSpinnerComponent);
    return NbSpinnerComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Styled spinner directive
 *
 * @stacked-example(Spinner Showcase, spinner/spinner-card.component)
 *
 *
 * ```ts
 * <nb-card [nbSpinner]="loading" nbSpinnerStatus="danger">
 *   <nb-card-body>Card Content</nb-card-body>
 * </nb-card>
 * ```
 *
 * ### Installation
 *
 * Import `NbSpinnerModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbSpinnerModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Could be colored using `status` property
 *
 * @stacked-example(Spinner Colors, spinner/spinner-colors.component)
 *
 * Available in different sizes with `size` property:
 *
 * @stacked-example(Spinner Sizes, spinner/spinner-sizes.component)
 *
 * It is also possible to place it into the button:
 * @stacked-example(Buttons with spinner, spinner/spinner-button.component)
 *
 * Or tabs:
 * @stacked-example(Spinner in tabs, spinner/spinner-tabs.component)
 */
var NbSpinnerDirective = /** @class */ (function () {
    function NbSpinnerDirective(directiveView, componentFactoryResolver, renderer, directiveElement) {
        this.directiveView = directiveView;
        this.componentFactoryResolver = componentFactoryResolver;
        this.renderer = renderer;
        this.directiveElement = directiveElement;
        this.shouldShow = false;
        /**
         * Spinner status color
         * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`.
         */
        this.spinnerStatus = 'basic';
        /**
         * Spinner size. Possible values: `tiny`, `small`, `medium` (default), `large`, `giant`
         */
        this.spinnerSize = 'medium';
        this.isSpinnerExist = false;
    }
    Object.defineProperty(NbSpinnerDirective.prototype, "nbSpinner", {
        /**
         * Directive value - show or hide spinner
         * @param {boolean} val
         */
        set: function (val) {
            if (this.componentFactory) {
                if (val) {
                    this.show();
                }
                else {
                    this.hide();
                }
            }
            else {
                this.shouldShow = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    NbSpinnerDirective.prototype.ngOnInit = function () {
        this.componentFactory = this.componentFactoryResolver.resolveComponentFactory(NbSpinnerComponent);
        if (this.shouldShow) {
            this.show();
        }
    };
    NbSpinnerDirective.prototype.hide = function () {
        if (this.isSpinnerExist) {
            this.directiveView.remove();
            this.isSpinnerExist = false;
        }
    };
    NbSpinnerDirective.prototype.show = function () {
        if (!this.isSpinnerExist) {
            this.spinner = this.directiveView.createComponent(this.componentFactory);
            this.setInstanceInputs(this.spinner.instance);
            this.spinner.changeDetectorRef.detectChanges();
            this.renderer.appendChild(this.directiveElement.nativeElement, this.spinner.location.nativeElement);
            this.isSpinnerExist = true;
        }
    };
    NbSpinnerDirective.prototype.setInstanceInputs = function (instance) {
        instance.message = this.spinnerMessage;
        typeof this.spinnerStatus !== 'undefined' && (instance.status = this.spinnerStatus);
        typeof this.spinnerSize !== 'undefined' && (instance.size = this.spinnerSize);
    };
    tslib.__decorate([
        i0.Input('nbSpinnerMessage'),
        tslib.__metadata("design:type", String)
    ], NbSpinnerDirective.prototype, "spinnerMessage", void 0);
    tslib.__decorate([
        i0.Input('nbSpinnerStatus'),
        tslib.__metadata("design:type", String)
    ], NbSpinnerDirective.prototype, "spinnerStatus", void 0);
    tslib.__decorate([
        i0.Input('nbSpinnerSize'),
        tslib.__metadata("design:type", String)
    ], NbSpinnerDirective.prototype, "spinnerSize", void 0);
    tslib.__decorate([
        i0.Input('nbSpinner'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSpinnerDirective.prototype, "nbSpinner", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-spinner-container'),
        tslib.__metadata("design:type", Object)
    ], NbSpinnerDirective.prototype, "isSpinnerExist", void 0);
    NbSpinnerDirective = tslib.__decorate([
        i0.Directive({ selector: '[nbSpinner]' }),
        tslib.__metadata("design:paramtypes", [i0.ViewContainerRef,
            i0.ComponentFactoryResolver,
            i0.Renderer2,
            i0.ElementRef])
    ], NbSpinnerDirective);
    return NbSpinnerDirective;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbSpinnerModule = /** @class */ (function () {
    function NbSpinnerModule() {
    }
    NbSpinnerModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
            ],
            exports: [NbSpinnerComponent, NbSpinnerDirective],
            declarations: [NbSpinnerComponent, NbSpinnerDirective],
            entryComponents: [NbSpinnerComponent],
        })
    ], NbSpinnerModule);
    return NbSpinnerModule;
}());

var NB_STEPPER = new i0.InjectionToken('Nebular Stepper Component');

/**
 * Component intended to be used within  the `<nb-stepper>` component.
 * Container for a step
 */
var NbStepComponent = /** @class */ (function () {
    function NbStepComponent(stepper) {
        this._hidden = false;
        this._completed = false;
        this.interacted = false;
        this.stepper = stepper;
    }
    Object.defineProperty(NbStepComponent.prototype, "hidden", {
        /**
         * Whether step will be displayed in wizard
         *
         * @type {boolean}
         */
        get: function () {
            return this._hidden;
        },
        set: function (value) {
            this._hidden = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbStepComponent.prototype, "isLabelTemplate", {
        /**
         * Check that label is a TemplateRef.
         *
         * @return boolean
         * */
        get: function () {
            return this.label instanceof i0.TemplateRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbStepComponent.prototype, "completed", {
        /**
         * Whether step is marked as completed.
         *
         * @type {boolean}
         */
        get: function () {
            return this._completed || this.isCompleted;
        },
        set: function (value) {
            this._completed = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbStepComponent.prototype, "isCompleted", {
        get: function () {
            return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Mark step as selected
     * */
    NbStepComponent.prototype.select = function () {
        this.stepper.selected = this;
    };
    /**
     * Reset step and stepControl state
     * */
    NbStepComponent.prototype.reset = function () {
        this.interacted = false;
        if (this.stepControl) {
            this.stepControl.reset();
        }
    };
    tslib.__decorate([
        i0.ViewChild(i0.TemplateRef, { static: true }),
        tslib.__metadata("design:type", i0.TemplateRef)
    ], NbStepComponent.prototype, "content", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbStepComponent.prototype, "stepControl", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbStepComponent.prototype, "label", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbStepComponent.prototype, "hidden", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbStepComponent.prototype, "completed", null);
    NbStepComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-step',
            template: "\n    <ng-template>\n      <ng-content></ng-content>\n    </ng-template>\n  "
        }),
        tslib.__param(0, i0.Inject(NB_STEPPER)),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbStepComponent);
    return NbStepComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Stepper component
 *
 * @stacked-example(Showcase, stepper/stepper-showcase.component)
 *
 * ### Installation
 *
 * Import `NbStepperModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbStepperModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * If step label is string you can pass it as `label` attribute. Otherwise ng-template should be used:
 * ```html
 * // ...
 * <nb-stepper orientation="horizontal">
 *   <nb-step label="step number one">
 *       // ... step content here
 *   </nb-step>
 *   <nb-step label="stepLabel">
 *       <ng-template #stepLabel>
 *           <div>
 *               step number two
 *           </div>
 *       </ng-template>
 *       // ... step content here
 *   </nb-step>
 * </nb-stepper>
 * ```
 *
 * When linear mode enabled user can't move forward unless current step is complete.
 * @stacked-example(Linear, stepper/stepper-linear.component)
 *
 * Specify `[stepControl]="form"` and stepper allow go to the next step only if form is valid.
 * You can disable it via `linear` mode setting.
 * ```html
 * // ...
 * <nb-stepper  orientation="horizontal">
 *   <nb-step label="step number one" [stepControl]="form">
 *     <form [formGroup]="form">
 *       // ...
 *     </form>
 *   </nb-step>
 *    // ...
 * </nb-stepper>
 * ```
 *
 * @stacked-example(Validation, stepper/stepper-validation.component)
 *
 * Stepper component has two layout options - `vertical` & `horizontal`
 * @stacked-example(Vertical, stepper/stepper-vertical.component)
 *
 * `disableStepNavigation` disables navigation by clicking on steps, so user can navigate only using
 * 'nbStepperPrevious' and 'nbStepperNext' buttons.
 * @stacked-example(Disabled steps navigation, stepper/stepper-disabled-step-nav.component)
 *
 * @styles
 *
 * stepper-step-text-color:
 * stepper-step-text-font-family:
 * stepper-step-text-font-size:
 * stepper-step-text-font-weight:
 * stepper-step-text-line-height:
 * stepper-step-active-text-color:
 * stepper-step-completed-text-color:
 * stepper-step-index-border-color:
 * stepper-step-index-border-style:
 * stepper-step-index-border-width:
 * stepper-step-index-border-radius:
 * stepper-step-index-width:
 * stepper-step-index-active-border-color:
 * stepper-step-index-completed-background-color:
 * stepper-step-index-completed-border-color:
 * stepper-step-index-completed-text-color:
 * stepper-connector-background-color:
 * stepper-connector-completed-background-color:
 * stepper-horizontal-connector-margin:
 * stepper-vertical-connector-margin:
 * stepper-step-content-padding:
 */
var NbStepperComponent = /** @class */ (function () {
    function NbStepperComponent() {
        this._selectedIndex = 0;
        this._disableStepNavigation = false;
        /**
         * Stepper orientation - `horizontal`|`vertical`
         */
        this.orientation = 'horizontal';
        this._linear = true;
    }
    NbStepperComponent_1 = NbStepperComponent;
    Object.defineProperty(NbStepperComponent.prototype, "selectedIndex", {
        /**
         * Selected step index
         */
        get: function () {
            return this._selectedIndex;
        },
        set: function (index) {
            if (!this.steps) {
                this._selectedIndex = index;
                return;
            }
            this.markCurrentStepInteracted();
            if (this.canBeSelected(index)) {
                this._selectedIndex = index;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbStepperComponent.prototype, "disableStepNavigation", {
        get: function () {
            return this._disableStepNavigation;
        },
        /**
         * Disables navigation by clicking on steps. False by default
         * @param {boolean} value
         */
        set: function (value) {
            this._disableStepNavigation = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbStepperComponent.prototype, "selected", {
        /**
         * Selected step component
         */
        get: function () {
            return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined;
        },
        set: function (step) {
            if (!this.steps) {
                return;
            }
            this.selectedIndex = this.steps.toArray().indexOf(step);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbStepperComponent.prototype, "linear", {
        get: function () {
            return this._linear;
        },
        /**
         * Allow moving forward only if the current step is complete
         * @default true
         */
        set: function (value) {
            this._linear = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbStepperComponent.prototype, "vertical", {
        get: function () {
            return this.orientation === 'vertical';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbStepperComponent.prototype, "horizontal", {
        get: function () {
            return this.orientation === 'horizontal';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Navigate to next step
     * */
    NbStepperComponent.prototype.next = function () {
        this.selectedIndex = Math.min(this.selectedIndex + 1, this.steps.length - 1);
    };
    /**
     * Navigate to previous step
     * */
    NbStepperComponent.prototype.previous = function () {
        this.selectedIndex = Math.max(this.selectedIndex - 1, 0);
    };
    /**
     * Reset stepper and stepControls to initial state
     * */
    NbStepperComponent.prototype.reset = function () {
        this._selectedIndex = 0;
        this.steps.forEach(function (step) { return step.reset(); });
    };
    NbStepperComponent.prototype.isStepSelected = function (step) {
        return this.selected === step;
    };
    /*
     * @docs-private
     **/
    NbStepperComponent.prototype.getStepTemplate = function (step) {
        if (step.isLabelTemplate) {
            return step.label;
        }
        return null;
    };
    NbStepperComponent.prototype.isStepValid = function (index) {
        return this.steps.toArray()[index].completed;
    };
    NbStepperComponent.prototype.canBeSelected = function (indexToCheck) {
        var noSteps = !this.steps || this.steps.length === 0;
        if (noSteps || indexToCheck < 0 || indexToCheck >= this.steps.length) {
            return false;
        }
        if (indexToCheck <= this.selectedIndex || !this.linear) {
            return true;
        }
        var isAllStepsValid = true;
        for (var i = this.selectedIndex; i < indexToCheck; i++) {
            if (!this.isStepValid(i)) {
                isAllStepsValid = false;
                break;
            }
        }
        return isAllStepsValid;
    };
    NbStepperComponent.prototype.markCurrentStepInteracted = function () {
        if (this.selected) {
            this.selected.interacted = true;
        }
    };
    var NbStepperComponent_1;
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number),
        tslib.__metadata("design:paramtypes", [Number])
    ], NbStepperComponent.prototype, "selectedIndex", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbStepperComponent.prototype, "disableStepNavigation", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", NbStepComponent),
        tslib.__metadata("design:paramtypes", [NbStepComponent])
    ], NbStepperComponent.prototype, "selected", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbStepperComponent.prototype, "orientation", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbStepperComponent.prototype, "linear", null);
    tslib.__decorate([
        i0.HostBinding('class.vertical'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbStepperComponent.prototype, "vertical", null);
    tslib.__decorate([
        i0.HostBinding('class.horizontal'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbStepperComponent.prototype, "horizontal", null);
    tslib.__decorate([
        i0.ContentChildren(NbStepComponent),
        tslib.__metadata("design:type", i0.QueryList)
    ], NbStepperComponent.prototype, "steps", void 0);
    NbStepperComponent = NbStepperComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'nb-stepper',
            template: "<ng-template><ng-content select=\"nb-step\"></ng-content></ng-template>\n<div class=\"header\">\n  <ng-container *ngFor=\"let step of steps; let index = index; let first = first\">\n\n    <div *ngIf=\"!first && !step.hidden\"\n         [class.connector-past]=\"index <= selectedIndex\"\n         class=\"connector\"></div>\n\n    <div *ngIf=\"!step.hidden\" class=\"step\"\n         [class.selected]=\"isStepSelected(step)\"\n         [class.completed]=\"!isStepSelected(step) && step.completed\"\n         [class.noninteractive]=\"disableStepNavigation\"\n         (click)=\"!disableStepNavigation && step.select()\">\n      <div class=\"label-index\">\n        <span *ngIf=\"!step.completed || isStepSelected(step)\">{{ index + 1 }}</span>\n        <nb-icon *ngIf=\"!isStepSelected(step) && step.completed\" icon=\"checkmark-outline\" pack=\"nebular-essentials\">\n        </nb-icon>\n      </div>\n      <div class=\"label\">\n        <ng-container *ngIf=\"step.isLabelTemplate\">\n          <ng-container *ngTemplateOutlet=\"getStepTemplate(step)\"></ng-container>\n        </ng-container>\n        <span *ngIf=\"!step.isLabelTemplate\">{{ step.label }}</span>\n      </div>\n    </div>\n  </ng-container>\n</div>\n<div class=\"step-content\">\n  <ng-container [ngTemplateOutlet]=\"selected?.content\"></ng-container>\n</div>\n",
            providers: [{ provide: NB_STEPPER, useExisting: NbStepperComponent_1 }],
            styles: [":host(.horizontal) .header .step{flex-direction:column}:host(.horizontal) .header .connector{height:2px}:host(.horizontal) .label-index{margin-bottom:10px}:host(.vertical){display:flex;height:100%}:host(.vertical) .header{flex-direction:column}:host(.vertical) .header .label{margin:0 10px}:host(.vertical) .header .connector{width:2px}.header{display:flex;justify-content:space-between;align-items:flex-start;margin-bottom:10px}.header .connector{flex:auto}.header .step{display:flex;align-items:center;cursor:pointer}.header .step.noninteractive{cursor:default}.header .label-index{display:flex;justify-content:center;align-items:center}.header .label{width:max-content}\n"]
        })
    ], NbStepperComponent);
    return NbStepperComponent;
}());

var NbStepperNextDirective = /** @class */ (function () {
    function NbStepperNextDirective(stepper) {
        this.stepper = stepper;
        this.type = 'submit';
    }
    NbStepperNextDirective.prototype.onClick = function () {
        this.stepper.next();
    };
    tslib.__decorate([
        i0.Input(), i0.HostBinding('attr.type'),
        tslib.__metadata("design:type", String)
    ], NbStepperNextDirective.prototype, "type", void 0);
    tslib.__decorate([
        i0.HostListener('click'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbStepperNextDirective.prototype, "onClick", null);
    NbStepperNextDirective = tslib.__decorate([
        i0.Directive({
            selector: 'button[nbStepperNext]',
        }),
        tslib.__metadata("design:paramtypes", [NbStepperComponent])
    ], NbStepperNextDirective);
    return NbStepperNextDirective;
}());
var NbStepperPreviousDirective = /** @class */ (function () {
    function NbStepperPreviousDirective(stepper) {
        this.stepper = stepper;
        this.type = 'button';
    }
    NbStepperPreviousDirective.prototype.onClick = function () {
        this.stepper.previous();
    };
    tslib.__decorate([
        i0.Input(), i0.HostBinding('attr.type'),
        tslib.__metadata("design:type", String)
    ], NbStepperPreviousDirective.prototype, "type", void 0);
    tslib.__decorate([
        i0.HostListener('click'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbStepperPreviousDirective.prototype, "onClick", null);
    NbStepperPreviousDirective = tslib.__decorate([
        i0.Directive({
            selector: 'button[nbStepperPrevious]',
        }),
        tslib.__metadata("design:paramtypes", [NbStepperComponent])
    ], NbStepperPreviousDirective);
    return NbStepperPreviousDirective;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbStepperModule = /** @class */ (function () {
    function NbStepperModule() {
    }
    NbStepperModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
                NbIconModule,
            ],
            declarations: [
                NbStepperComponent,
                NbStepComponent,
                NbStepperNextDirective,
                NbStepperPreviousDirective,
            ],
            exports: [
                NbStepperComponent,
                NbStepComponent,
                NbStepperNextDirective,
                NbStepperPreviousDirective,
            ],
        })
    ], NbStepperModule);
    return NbStepperModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * An accordion allows to toggle the display of sections of content
 *
 * Basic example
 * @stacked-example(Showcase, accordion/accordion-showcase.component)
 *
 * ```ts
 * <nb-accordion>
 *  <nb-accordion-item>
 *   <nb-accordion-item-header>Product Details</nb-accordion-item-header>
 *   <nb-accordion-item-body>
 *     Item Content
 *   </nb-accordion-item-body>
 *  </nb-accordion-item>
 * </nb-accordion>
 * ```
 * ### Installation
 *
 * Import `NbAccordionModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbAccordionModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * With `multi` mode accordion can have multiple items expanded:
 * @stacked-example(Multiple expanded items, accordion/accordion-multi.component)
 *
 * `NbAccordionItemComponent` has several methods, for example it is possible to trigger item click/toggle:
 * @stacked-example(Expand API, accordion/accordion-toggle.component)
 *
 * @styles
 *
 * accordion-border-radius:
 * accordion-padding:
 * accordion-shadow:
 * accordion-header-text-color:
 * accordion-header-text-font-family:
 * accordion-header-text-font-size:
 * accordion-header-text-font-weight:
 * accordion-header-text-line-height:
 * accordion-header-disabled-text-color:
 * accordion-header-border-color:
 * accordion-header-border-style:
 * accordion-header-border-width:
 * accordion-item-background-color:
 * accordion-item-text-color:
 * accordion-item-text-font-family:
 * accordion-item-text-font-size:
 * accordion-item-text-font-weight:
 * accordion-item-text-line-height:
 */
var NbAccordionComponent = /** @class */ (function () {
    function NbAccordionComponent() {
        this.openCloseItems = new rxjs.Subject();
        this.multiValue = false;
    }
    Object.defineProperty(NbAccordionComponent.prototype, "multi", {
        /**
         *  Allow multiple items to be expanded at the same time.
         * @type {boolean}
         */
        get: function () {
            return this.multiValue;
        },
        set: function (val) {
            this.multiValue = convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens all enabled accordion items.
     */
    NbAccordionComponent.prototype.openAll = function () {
        if (this.multi) {
            this.openCloseItems.next(false);
        }
    };
    /**
     * Closes all enabled accordion items.
     */
    NbAccordionComponent.prototype.closeAll = function () {
        this.openCloseItems.next(true);
    };
    tslib.__decorate([
        i0.Input('multi'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbAccordionComponent.prototype, "multi", null);
    NbAccordionComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-accordion',
            template: "\n    <ng-content select=\"nb-accordion-item\"></ng-content>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        })
    ], NbAccordionComponent);
    return NbAccordionComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Component intended to be used within `<nb-accordion>` component
 */
var NbAccordionItemComponent = /** @class */ (function () {
    function NbAccordionItemComponent(accordion, cd) {
        this.accordion = accordion;
        this.cd = cd;
        /**
         * Emits whenever the expanded state of the accordion changes.
         * Primarily used to facilitate two-way binding.
         */
        this.collapsedChange = new i0.EventEmitter();
        this.accordionItemInvalidate = new rxjs.Subject();
        this.collapsedValue = true;
        this.disabledValue = false;
        this.destroy$ = new rxjs.Subject();
    }
    Object.defineProperty(NbAccordionItemComponent.prototype, "collapsed", {
        /**
         * Item is collapse (`true` by default)
         * @type {boolean}
         */
        get: function () {
            return this.collapsedValue;
        },
        set: function (val) {
            this.collapsedValue = convertToBoolProperty(val);
            this.collapsedChange.emit(this.collapsedValue);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAccordionItemComponent.prototype, "expanded", {
        /**
         * Item is expanded (`false` by default)
         * @type {boolean}
         */
        get: function () {
            return !this.collapsed;
        },
        set: function (val) {
            this.collapsedValue = !convertToBoolProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAccordionItemComponent.prototype, "disabled", {
        /**
         * Item is disabled and cannot be opened.
         * @type {boolean}
         */
        get: function () {
            return this.disabledValue;
        },
        set: function (val) {
            this.disabledValue = convertToBoolProperty(val);
            this.invalidate();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Open/close the item
     */
    NbAccordionItemComponent.prototype.toggle = function () {
        if (!this.disabled) {
            // we need this temporary variable as `openCloseItems.next` will change current value we need to save
            var willSet = !this.collapsed;
            if (!this.accordion.multi) {
                this.accordion.openCloseItems.next(true);
            }
            this.collapsed = willSet;
        }
    };
    /**
     * Open the item.
     */
    NbAccordionItemComponent.prototype.open = function () {
        !this.disabled && (this.collapsed = false);
    };
    /**
     * Collapse the item.
     */
    NbAccordionItemComponent.prototype.close = function () {
        !this.disabled && (this.collapsed = true);
    };
    NbAccordionItemComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.accordion.openCloseItems
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (collapsed) {
            !_this.disabled && (_this.collapsed = collapsed);
        });
    };
    NbAccordionItemComponent.prototype.ngOnChanges = function (changes) {
        this.accordionItemInvalidate.next(true);
    };
    NbAccordionItemComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
        this.accordionItemInvalidate.complete();
    };
    NbAccordionItemComponent.prototype.invalidate = function () {
        this.accordionItemInvalidate.next(true);
        this.cd.markForCheck();
    };
    tslib.__decorate([
        i0.Input('collapsed'),
        i0.HostBinding('class.collapsed'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbAccordionItemComponent.prototype, "collapsed", null);
    tslib.__decorate([
        i0.Input('expanded'),
        i0.HostBinding('class.expanded'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbAccordionItemComponent.prototype, "expanded", null);
    tslib.__decorate([
        i0.Input('disabled'),
        i0.HostBinding('class.disabled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbAccordionItemComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbAccordionItemComponent.prototype, "collapsedChange", void 0);
    NbAccordionItemComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-accordion-item',
            template: "\n    <ng-content select=\"nb-accordion-item-header\"></ng-content>\n    <ng-content select=\"nb-accordion-item-body\"></ng-content>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: [":host{display:flex;flex-direction:column}\n"]
        }),
        tslib.__param(0, i0.Host()),
        tslib.__metadata("design:paramtypes", [NbAccordionComponent, i0.ChangeDetectorRef])
    ], NbAccordionItemComponent);
    return NbAccordionItemComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var accordionItemBodyTrigger = _angular_animations.trigger('accordionItemBody', [
    _angular_animations.state('collapsed', _angular_animations.style({
        overflow: 'hidden',
        visibility: 'hidden',
        height: 0,
    })),
    _angular_animations.state('expanded', _angular_animations.style({
        overflow: 'hidden',
        visibility: 'visible',
    })),
    _angular_animations.transition('collapsed => expanded', _angular_animations.animate('100ms ease-in')),
    _angular_animations.transition('expanded => collapsed', _angular_animations.animate('100ms ease-out')),
]);
/**
 * Component intended to be used within `<nb-accordion-item>` component
 */
var NbAccordionItemBodyComponent = /** @class */ (function () {
    function NbAccordionItemBodyComponent(accordionItem, cd) {
        this.accordionItem = accordionItem;
        this.cd = cd;
        this.destroy$ = new rxjs.Subject();
    }
    Object.defineProperty(NbAccordionItemBodyComponent.prototype, "state", {
        get: function () {
            return this.accordionItem.collapsed ? 'collapsed' : 'expanded';
        },
        enumerable: true,
        configurable: true
    });
    NbAccordionItemBodyComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.accordionItem.accordionItemInvalidate
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.cd.markForCheck(); });
    };
    NbAccordionItemBodyComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbAccordionItemBodyComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-accordion-item-body',
            template: "\n    <div [@accordionItemBody]=\"{ value: state }\">\n      <div class=\"item-body\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  ",
            animations: [accordionItemBodyTrigger],
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__param(0, i0.Host()),
        tslib.__metadata("design:paramtypes", [NbAccordionItemComponent, i0.ChangeDetectorRef])
    ], NbAccordionItemBodyComponent);
    return NbAccordionItemBodyComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Component intended to be used within `<nb-accordion-item>` component
 */
var NbAccordionItemHeaderComponent = /** @class */ (function () {
    function NbAccordionItemHeaderComponent(accordionItem, cd) {
        this.accordionItem = accordionItem;
        this.cd = cd;
        this.destroy$ = new rxjs.Subject();
    }
    Object.defineProperty(NbAccordionItemHeaderComponent.prototype, "isCollapsed", {
        get: function () {
            return this.accordionItem.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAccordionItemHeaderComponent.prototype, "expanded", {
        get: function () {
            return !this.accordionItem.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAccordionItemHeaderComponent.prototype, "tabbable", {
        // issue #794
        get: function () {
            return this.accordionItem.disabled ? '-1' : '0';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAccordionItemHeaderComponent.prototype, "disabled", {
        get: function () {
            return this.accordionItem.disabled;
        },
        enumerable: true,
        configurable: true
    });
    NbAccordionItemHeaderComponent.prototype.toggle = function () {
        this.accordionItem.toggle();
    };
    Object.defineProperty(NbAccordionItemHeaderComponent.prototype, "state", {
        get: function () {
            if (this.isCollapsed) {
                return 'collapsed';
            }
            if (this.expanded) {
                return 'expanded';
            }
        },
        enumerable: true,
        configurable: true
    });
    NbAccordionItemHeaderComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.accordionItem.accordionItemInvalidate
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.cd.markForCheck(); });
    };
    NbAccordionItemHeaderComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    tslib.__decorate([
        i0.HostBinding('class.accordion-item-header-collapsed'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbAccordionItemHeaderComponent.prototype, "isCollapsed", null);
    tslib.__decorate([
        i0.HostBinding('class.accordion-item-header-expanded'),
        i0.HostBinding('attr.aria-expanded'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbAccordionItemHeaderComponent.prototype, "expanded", null);
    tslib.__decorate([
        i0.HostBinding('attr.tabindex'),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [])
    ], NbAccordionItemHeaderComponent.prototype, "tabbable", null);
    tslib.__decorate([
        i0.HostBinding('attr.aria-disabled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbAccordionItemHeaderComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.HostListener('click'),
        i0.HostListener('keydown.space'),
        i0.HostListener('keydown.enter'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbAccordionItemHeaderComponent.prototype, "toggle", null);
    NbAccordionItemHeaderComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-accordion-item-header',
            template: "\n    <ng-content select=\"nb-accordion-item-title\"></ng-content>\n    <ng-content select=\"nb-accordion-item-description\"></ng-content>\n    <ng-content></ng-content>\n    <nb-icon icon=\"chevron-down-outline\"\n             pack=\"nebular-essentials\"\n             [@expansionIndicator]=\"state\"\n             *ngIf=\"!disabled\"\n             class=\"expansion-indicator\">\n    </nb-icon>\n  ",
            animations: [
                _angular_animations.trigger('expansionIndicator', [
                    _angular_animations.state('expanded', _angular_animations.style({
                        transform: 'rotate(180deg)',
                    })),
                    _angular_animations.transition('collapsed => expanded', _angular_animations.animate('100ms ease-in')),
                    _angular_animations.transition('expanded => collapsed', _angular_animations.animate('100ms ease-out')),
                ]),
            ],
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: [":host{display:flex;align-items:center;cursor:pointer}:host:focus{outline:0}\n"]
        }),
        tslib.__param(0, i0.Host()),
        tslib.__metadata("design:paramtypes", [NbAccordionItemComponent, i0.ChangeDetectorRef])
    ], NbAccordionItemHeaderComponent);
    return NbAccordionItemHeaderComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_ACCORDION_COMPONENTS = [
    NbAccordionComponent,
    NbAccordionItemComponent,
    NbAccordionItemHeaderComponent,
    NbAccordionItemBodyComponent,
];
var NbAccordionModule = /** @class */ (function () {
    function NbAccordionModule() {
    }
    NbAccordionModule = tslib.__decorate([
        i0.NgModule({
            imports: [_angular_common.CommonModule, NbIconModule],
            exports: tslib.__spreadArrays(NB_ACCORDION_COMPONENTS),
            declarations: tslib.__spreadArrays(NB_ACCORDION_COMPONENTS),
            providers: [],
        })
    ], NbAccordionModule);
    return NbAccordionModule;
}());

/**
 * List is a container component that wraps `nb-list-item` component.
 *
 * Basic example:
 * @stacked-example(Simple list, list/simple-list-showcase.component)
 *
 * `nb-list-item` accepts arbitrary content, so you can create a list of any components.
 *
 * ### Installation
 *
 * Import `NbListModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbListModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * List of users:
 * @stacked-example(Users list, list/users-list-showcase.component)
 *
 * @styles
 *
 * list-item-divider-color:
 * list-item-divider-style:
 * list-item-divider-width:
 * list-item-padding:
 * list-item-text-color:
 * list-item-font-family:
 * list-item-font-size:
 * list-item-font-weight:
 * list-item-line-height:
 */
var NbListComponent = /** @class */ (function () {
    function NbListComponent() {
        /**
         * Role attribute value
         *
         * @type {string}
         */
        this.role = 'list';
    }
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('attr.role'),
        tslib.__metadata("design:type", Object)
    ], NbListComponent.prototype, "role", void 0);
    NbListComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-list',
            template: "<ng-content select=\"nb-list-item\"></ng-content>",
            styles: [":host{display:flex;flex-direction:column;flex:1 1 auto;overflow:auto}\n"]
        })
    ], NbListComponent);
    return NbListComponent;
}());
/**
 * List item component is a grouping component that accepts arbitrary content.
 * It should be direct child of `nb-list` componet.
 */
var NbListItemComponent = /** @class */ (function () {
    function NbListItemComponent() {
        /**
         * Role attribute value
         *
         * @type {string}
         */
        this.role = 'listitem';
    }
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('attr.role'),
        tslib.__metadata("design:type", Object)
    ], NbListItemComponent.prototype, "role", void 0);
    NbListItemComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-list-item',
            template: "<ng-content></ng-content>",
            styles: [":host{display:flex;align-items:center;flex-shrink:0}\n"]
        })
    ], NbListItemComponent);
    return NbListItemComponent;
}());

/**
 * List pager directive
 *
 * Directive allows you to determine page of currently viewing items.
 *
 */
var NbListPageTrackerDirective = /** @class */ (function () {
    function NbListPageTrackerDirective() {
        var _this = this;
        this.destroy$ = new rxjs.Subject();
        /**
         * Page to start counting with.
         */
        this.startPage = 1;
        /**
         * Emits when another page become visible.
         */
        this.pageChange = new i0.EventEmitter();
        this.observer = new IntersectionObserver(function (entries) { return _this.checkForPageChange(entries); }, { threshold: 0.5 });
    }
    NbListPageTrackerDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.listItems && this.listItems.length) {
            this.observeItems();
        }
        this.listItems.changes
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.observeItems(); });
    };
    NbListPageTrackerDirective.prototype.ngOnDestroy = function () {
        this.observer.disconnect && this.observer.disconnect();
    };
    NbListPageTrackerDirective.prototype.observeItems = function () {
        var _this = this;
        this.listItems.forEach(function (i) { return _this.observer.observe(i.nativeElement); });
    };
    NbListPageTrackerDirective.prototype.checkForPageChange = function (entries) {
        var mostVisiblePage = this.findMostVisiblePage(entries);
        if (mostVisiblePage && this.currentPage !== mostVisiblePage) {
            this.currentPage = mostVisiblePage;
            this.pageChange.emit(this.currentPage);
        }
    };
    NbListPageTrackerDirective.prototype.findMostVisiblePage = function (entries) {
        var intersectionRatioByPage = new Map();
        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
            var entry = entries_1[_i];
            if (entry.intersectionRatio < 0.5) {
                continue;
            }
            var elementIndex = this.elementIndex(entry.target);
            if (elementIndex === -1) {
                continue;
            }
            var page = this.startPage + Math.floor(elementIndex / this.pageSize);
            var ratio = entry.intersectionRatio;
            if (intersectionRatioByPage.has(page)) {
                ratio += intersectionRatioByPage.get(page);
            }
            intersectionRatioByPage.set(page, ratio);
        }
        var maxRatio = 0;
        var mostVisiblePage;
        intersectionRatioByPage.forEach(function (ratio, page) {
            if (ratio > maxRatio) {
                maxRatio = ratio;
                mostVisiblePage = page;
            }
        });
        return mostVisiblePage;
    };
    NbListPageTrackerDirective.prototype.elementIndex = function (element) {
        return element.parentElement && element.parentElement.children
            ? Array.from(element.parentElement.children).indexOf(element)
            : -1;
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number)
    ], NbListPageTrackerDirective.prototype, "pageSize", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number)
    ], NbListPageTrackerDirective.prototype, "startPage", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbListPageTrackerDirective.prototype, "pageChange", void 0);
    tslib.__decorate([
        i0.ContentChildren(NbListItemComponent, { read: i0.ElementRef }),
        tslib.__metadata("design:type", i0.QueryList)
    ], NbListPageTrackerDirective.prototype, "listItems", void 0);
    NbListPageTrackerDirective = tslib.__decorate([
        i0.Directive({
            selector: '[nbListPageTracker]',
        }),
        tslib.__metadata("design:paramtypes", [])
    ], NbListPageTrackerDirective);
    return NbListPageTrackerDirective;
}());

var NbScrollableContainerDimentions = /** @class */ (function () {
    function NbScrollableContainerDimentions() {
    }
    return NbScrollableContainerDimentions;
}());
/**
 * Infinite List Directive
 *
 * ```html
 *  <nb-list nbInfiniteList [threshold]="500" (bottomThreshold)="loadNext()">
 *    <nb-list-item *ngFor="let item of items"></nb-list-item>
 *  </nb-list>
 * ```
 *
 * @stacked-example(Simple infinite list, infinite-list/infinite-list-showcase.component)
 *
 * Directive will notify when list scrolled up or down to a given threshold.
 * By default it listen to scroll of list on which applied, but also can be set to listen to window scroll.
 *
 * @stacked-example(Scroll modes, infinite-list/infinite-list-scroll-modes.component)
 *
 * To improve UX of infinite lists, it's better to keep current page in url,
 * so user able to return to the last viewed page or to share a link to this page.
 * `nbListPageTracker` directive will help you to know, what page user currently viewing.
 * Just put it on a list, set page size and it will calculate page that currently in viewport.
 * You can [open the example](example/infinite-list/infinite-news-list.component)
 * in a new tab to check out this feature.
 *
 * @stacked-example(Infinite list with pager, infinite-list/infinite-news-list.component)
 *
 * @stacked-example(Infinite list with placeholders at the top, infinite-list/infinite-list-placeholders.component)
 *
 */
var NbInfiniteListDirective = /** @class */ (function () {
    function NbInfiniteListDirective(elementRef, scrollService, dimensionsService) {
        this.elementRef = elementRef;
        this.scrollService = scrollService;
        this.dimensionsService = dimensionsService;
        this.destroy$ = new rxjs.Subject();
        this.windowScroll = false;
        /**
         * Emits when distance between list bottom and current scroll position is less than threshold.
         */
        this.bottomThreshold = new i0.EventEmitter(true);
        /**
         * Emits when distance between list top and current scroll position is less than threshold.
         */
        this.topThreshold = new i0.EventEmitter(true);
    }
    Object.defineProperty(NbInfiniteListDirective.prototype, "elementScroll", {
        get: function () {
            return !this.windowScroll;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbInfiniteListDirective.prototype, "listenWindowScroll", {
        /**
         * By default component observes list scroll position.
         * If set to `true`, component will observe position of page scroll instead.
         */
        set: function (value) {
            this.windowScroll = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NbInfiniteListDirective.prototype.onElementScroll = function () {
        if (this.elementScroll) {
            this.checkPosition(this.elementRef.nativeElement);
        }
    };
    NbInfiniteListDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.scrollService.onScroll()
            .pipe(rxjs_operators.filter(function () { return _this.windowScroll; }), rxjs_operators.switchMap(function () { return _this.getContainerDimensions(); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (dimentions) { return _this.checkPosition(dimentions); });
        this.listItems.changes
            .pipe(
        // For some reason, changes are emitted before list item removed from dom,
        // so dimensions will be incorrect.
        // Check every 50ms for a second if dom and query are in sync.
        // Once they synchronized, we can get proper dimensions.
        rxjs_operators.switchMap(function () { return rxjs.interval(50).pipe(rxjs_operators.filter(function () { return _this.inSyncWithDom(); }), rxjs_operators.take(1), rxjs_operators.takeUntil(rxjs.timer(1000))); }), rxjs_operators.switchMap(function () { return _this.getContainerDimensions(); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (dimentions) { return _this.checkPosition(dimentions); });
        this.getContainerDimensions().subscribe(function (dimentions) { return _this.checkPosition(dimentions); });
    };
    NbInfiniteListDirective.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbInfiniteListDirective.prototype.checkPosition = function (_a) {
        var scrollHeight = _a.scrollHeight, scrollTop = _a.scrollTop, clientHeight = _a.clientHeight;
        var initialCheck = this.lastScrollPosition == null;
        var manualCheck = this.lastScrollPosition === scrollTop;
        var scrollUp = scrollTop < this.lastScrollPosition;
        var scrollDown = scrollTop > this.lastScrollPosition;
        var distanceToBottom = scrollHeight - scrollTop - clientHeight;
        if ((initialCheck || manualCheck || scrollDown) && distanceToBottom <= this.threshold) {
            this.bottomThreshold.emit();
        }
        if ((initialCheck || scrollUp) && scrollTop <= this.threshold) {
            this.topThreshold.emit();
        }
        this.lastScrollPosition = scrollTop;
    };
    NbInfiniteListDirective.prototype.getContainerDimensions = function () {
        if (this.elementScroll) {
            var _a = this.elementRef.nativeElement, scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
            return rxjs.of({ scrollTop: scrollTop, scrollHeight: scrollHeight, clientHeight: clientHeight });
        }
        return rxjs.forkJoin(this.scrollService.getPosition(), this.dimensionsService.getDimensions())
            .pipe(rxjs_operators.map(function (_a) {
            var scrollPosition = _a[0], dimensions = _a[1];
            return ({
                scrollTop: scrollPosition.y,
                scrollHeight: dimensions.scrollHeight,
                clientHeight: dimensions.clientHeight,
            });
        }));
    };
    NbInfiniteListDirective.prototype.inSyncWithDom = function () {
        return this.elementRef.nativeElement.children.length === this.listItems.length;
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number)
    ], NbInfiniteListDirective.prototype, "threshold", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbInfiniteListDirective.prototype, "listenWindowScroll", null);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbInfiniteListDirective.prototype, "bottomThreshold", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbInfiniteListDirective.prototype, "topThreshold", void 0);
    tslib.__decorate([
        i0.HostListener('scroll'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbInfiniteListDirective.prototype, "onElementScroll", null);
    tslib.__decorate([
        i0.ContentChildren(NbListItemComponent),
        tslib.__metadata("design:type", i0.QueryList)
    ], NbInfiniteListDirective.prototype, "listItems", void 0);
    NbInfiniteListDirective = tslib.__decorate([
        i0.Directive({
            selector: '[nbInfiniteList]',
        }),
        tslib.__metadata("design:paramtypes", [i0.ElementRef,
            NbLayoutScrollService,
            NbLayoutRulerService])
    ], NbInfiniteListDirective);
    return NbInfiniteListDirective;
}());

var components = [
    NbListComponent,
    NbListItemComponent,
    NbListPageTrackerDirective,
    NbInfiniteListDirective,
];
var NbListModule = /** @class */ (function () {
    function NbListModule() {
    }
    NbListModule = tslib.__decorate([
        i0.NgModule({
            declarations: components,
            exports: components,
        })
    ], NbListModule);
    return NbListModule;
}());

var NbDirectionality = /** @class */ (function (_super) {
    tslib.__extends(NbDirectionality, _super);
    function NbDirectionality() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbDirectionality = tslib.__decorate([
        i0.Injectable()
    ], NbDirectionality);
    return NbDirectionality;
}(_angular_cdk_bidi.Directionality));

var NbBidiModule = /** @class */ (function (_super) {
    tslib.__extends(NbBidiModule, _super);
    function NbBidiModule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbBidiModule = tslib.__decorate([
        i0.NgModule({
            providers: [
                { provide: NbDirectionality, useExisting: _angular_cdk_bidi.Directionality },
            ],
        })
    ], NbBidiModule);
    return NbBidiModule;
}(_angular_cdk_bidi.BidiModule));

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license infornbion.
 */
/**
 * Cell definition for the nb-table.
 * Captures the template of a column's data row cell as well as cell-specific properties.
 */
var NbCellDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbCellDefDirective, _super);
    function NbCellDefDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbCellDefDirective_1 = NbCellDefDirective;
    var NbCellDefDirective_1;
    NbCellDefDirective = NbCellDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbCellDef]',
            providers: [{ provide: _angular_cdk_table.CdkCellDef, useExisting: NbCellDefDirective_1 }],
        })
    ], NbCellDefDirective);
    return NbCellDefDirective;
}(_angular_cdk_table.CdkCellDef));
/**
 * Header cell definition for the nb-table.
 * Captures the template of a column's header cell and as well as cell-specific properties.
 */
var NbHeaderCellDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbHeaderCellDefDirective, _super);
    function NbHeaderCellDefDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbHeaderCellDefDirective_1 = NbHeaderCellDefDirective;
    var NbHeaderCellDefDirective_1;
    NbHeaderCellDefDirective = NbHeaderCellDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbHeaderCellDef]',
            providers: [{ provide: _angular_cdk_table.CdkHeaderCellDef, useExisting: NbHeaderCellDefDirective_1 }],
        })
    ], NbHeaderCellDefDirective);
    return NbHeaderCellDefDirective;
}(_angular_cdk_table.CdkHeaderCellDef));
/**
 * Footer cell definition for the nb-table.
 * Captures the template of a column's footer cell and as well as cell-specific properties.
 */
var NbFooterCellDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbFooterCellDefDirective, _super);
    function NbFooterCellDefDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbFooterCellDefDirective_1 = NbFooterCellDefDirective;
    var NbFooterCellDefDirective_1;
    NbFooterCellDefDirective = NbFooterCellDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbFooterCellDef]',
            providers: [{ provide: _angular_cdk_table.CdkFooterCellDef, useExisting: NbFooterCellDefDirective_1 }],
        })
    ], NbFooterCellDefDirective);
    return NbFooterCellDefDirective;
}(_angular_cdk_table.CdkFooterCellDef));
var NB_SORT_HEADER_COLUMN_DEF = new i0.InjectionToken('NB_SORT_HEADER_COLUMN_DEF');
/**
 * Column definition for the nb-table.
 * Defines a set of cells available for a table column.
 */
var NbColumnDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbColumnDefDirective, _super);
    function NbColumnDefDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbColumnDefDirective_1 = NbColumnDefDirective;
    var NbColumnDefDirective_1;
    tslib.__decorate([
        i0.Input('nbColumnDef'),
        tslib.__metadata("design:type", String)
    ], NbColumnDefDirective.prototype, "name", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbColumnDefDirective.prototype, "sticky", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbColumnDefDirective.prototype, "stickyEnd", void 0);
    NbColumnDefDirective = NbColumnDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbColumnDef]',
            providers: [
                { provide: _angular_cdk_table.CdkColumnDef, useExisting: NbColumnDefDirective_1 },
                { provide: NB_SORT_HEADER_COLUMN_DEF, useExisting: NbColumnDefDirective_1 },
            ],
        })
    ], NbColumnDefDirective);
    return NbColumnDefDirective;
}(_angular_cdk_table.CdkColumnDef));
/** Header cell template container that adds the right classes and role. */
var NbHeaderCellDirective = /** @class */ (function (_super) {
    tslib.__extends(NbHeaderCellDirective, _super);
    function NbHeaderCellDirective(columnDef, elementRef) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        elementRef.nativeElement.classList.add("nb-column-" + columnDef.cssClassFriendlyName);
        return _this;
    }
    NbHeaderCellDirective = tslib.__decorate([
        i0.Directive({
            selector: 'nb-header-cell, th[nbHeaderCell]',
            host: {
                'class': 'nb-header-cell',
                'role': 'columnheader',
            },
        }),
        tslib.__metadata("design:paramtypes", [NbColumnDefDirective,
            i0.ElementRef])
    ], NbHeaderCellDirective);
    return NbHeaderCellDirective;
}(_angular_cdk_table.CdkHeaderCell));
/** Footer cell template container that adds the right classes and role. */
var NbFooterCellDirective = /** @class */ (function (_super) {
    tslib.__extends(NbFooterCellDirective, _super);
    function NbFooterCellDirective(columnDef, elementRef) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        elementRef.nativeElement.classList.add("nb-column-" + columnDef.cssClassFriendlyName);
        return _this;
    }
    NbFooterCellDirective = tslib.__decorate([
        i0.Directive({
            selector: 'nb-footer-cell, td[nbFooterCell]',
            host: {
                'class': 'nb-footer-cell',
                'role': 'gridcell',
            },
        }),
        tslib.__metadata("design:paramtypes", [NbColumnDefDirective,
            i0.ElementRef])
    ], NbFooterCellDirective);
    return NbFooterCellDirective;
}(_angular_cdk_table.CdkFooterCell));
/** Cell template container that adds the right classes and role. */
var NbCellDirective = /** @class */ (function (_super) {
    tslib.__extends(NbCellDirective, _super);
    function NbCellDirective(columnDef, elementRef) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        elementRef.nativeElement.classList.add("nb-column-" + columnDef.cssClassFriendlyName);
        return _this;
    }
    NbCellDirective = tslib.__decorate([
        i0.Directive({
            selector: 'nb-cell, td[nbCell]',
            host: {
                'class': 'nb-cell',
                'role': 'gridcell',
            },
        }),
        tslib.__metadata("design:paramtypes", [NbColumnDefDirective,
            i0.ElementRef])
    ], NbCellDirective);
    return NbCellDirective;
}(_angular_cdk_table.CdkCell));

var NbDataSource = /** @class */ (function (_super) {
    tslib.__extends(NbDataSource, _super);
    function NbDataSource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NbDataSource;
}(_angular_cdk_table.DataSource));

var NbDataRowOutletDirective = /** @class */ (function (_super) {
    tslib.__extends(NbDataRowOutletDirective, _super);
    function NbDataRowOutletDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbDataRowOutletDirective_1 = NbDataRowOutletDirective;
    var NbDataRowOutletDirective_1;
    NbDataRowOutletDirective = NbDataRowOutletDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbRowOutlet]',
            providers: [{ provide: _angular_cdk_table.DataRowOutlet, useExisting: NbDataRowOutletDirective_1 }],
        })
    ], NbDataRowOutletDirective);
    return NbDataRowOutletDirective;
}(_angular_cdk_table.DataRowOutlet));
var NbHeaderRowOutletDirective = /** @class */ (function (_super) {
    tslib.__extends(NbHeaderRowOutletDirective, _super);
    function NbHeaderRowOutletDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbHeaderRowOutletDirective_1 = NbHeaderRowOutletDirective;
    var NbHeaderRowOutletDirective_1;
    NbHeaderRowOutletDirective = NbHeaderRowOutletDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbHeaderRowOutlet]',
            providers: [{ provide: _angular_cdk_table.HeaderRowOutlet, useExisting: NbHeaderRowOutletDirective_1 }],
        })
    ], NbHeaderRowOutletDirective);
    return NbHeaderRowOutletDirective;
}(_angular_cdk_table.HeaderRowOutlet));
var NbFooterRowOutletDirective = /** @class */ (function (_super) {
    tslib.__extends(NbFooterRowOutletDirective, _super);
    function NbFooterRowOutletDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbFooterRowOutletDirective_1 = NbFooterRowOutletDirective;
    var NbFooterRowOutletDirective_1;
    NbFooterRowOutletDirective = NbFooterRowOutletDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbFooterRowOutlet]',
            providers: [{ provide: _angular_cdk_table.FooterRowOutlet, useExisting: NbFooterRowOutletDirective_1 }],
        })
    ], NbFooterRowOutletDirective);
    return NbFooterRowOutletDirective;
}(_angular_cdk_table.FooterRowOutlet));
var NbCellOutletDirective = /** @class */ (function (_super) {
    tslib.__extends(NbCellOutletDirective, _super);
    function NbCellOutletDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbCellOutletDirective_1 = NbCellOutletDirective;
    var NbCellOutletDirective_1;
    NbCellOutletDirective = NbCellOutletDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbCellOutlet]',
            providers: [{ provide: _angular_cdk_table.CdkCellOutlet, useExisting: NbCellOutletDirective_1 }],
        })
    ], NbCellOutletDirective);
    return NbCellOutletDirective;
}(_angular_cdk_table.CdkCellOutlet));
/**
 * Header row definition for the nb-table.
 * Captures the header row's template and other header properties such as the columns to display.
 */
var NbHeaderRowDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbHeaderRowDefDirective, _super);
    function NbHeaderRowDefDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbHeaderRowDefDirective_1 = NbHeaderRowDefDirective;
    var NbHeaderRowDefDirective_1;
    tslib.__decorate([
        i0.Input('nbHeaderRowDef'),
        tslib.__metadata("design:type", Object)
    ], NbHeaderRowDefDirective.prototype, "columns", void 0);
    tslib.__decorate([
        i0.Input('nbHeaderRowDefSticky'),
        tslib.__metadata("design:type", Boolean)
    ], NbHeaderRowDefDirective.prototype, "sticky", void 0);
    NbHeaderRowDefDirective = NbHeaderRowDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbHeaderRowDef]',
            providers: [{ provide: _angular_cdk_table.CdkHeaderRowDef, useExisting: NbHeaderRowDefDirective_1 }],
        })
    ], NbHeaderRowDefDirective);
    return NbHeaderRowDefDirective;
}(_angular_cdk_table.CdkHeaderRowDef));
/**
 * Footer row definition for the nb-table.
 * Captures the footer row's template and other footer properties such as the columns to display.
 */
var NbFooterRowDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbFooterRowDefDirective, _super);
    function NbFooterRowDefDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbFooterRowDefDirective_1 = NbFooterRowDefDirective;
    var NbFooterRowDefDirective_1;
    tslib.__decorate([
        i0.Input('nbFooterRowDef'),
        tslib.__metadata("design:type", Object)
    ], NbFooterRowDefDirective.prototype, "columns", void 0);
    tslib.__decorate([
        i0.Input('nbFooterRowDefSticky'),
        tslib.__metadata("design:type", Boolean)
    ], NbFooterRowDefDirective.prototype, "sticky", void 0);
    NbFooterRowDefDirective = NbFooterRowDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbFooterRowDef]',
            providers: [{ provide: _angular_cdk_table.CdkFooterRowDef, useExisting: NbFooterRowDefDirective_1 }],
        })
    ], NbFooterRowDefDirective);
    return NbFooterRowDefDirective;
}(_angular_cdk_table.CdkFooterRowDef));
/**
 * Data row definition for the nb-table.
 * Captures the data row's template and other properties such as the columns to display and
 * a when predicate that describes when this row should be used.
 */
var NbRowDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbRowDefDirective, _super);
    function NbRowDefDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbRowDefDirective_1 = NbRowDefDirective;
    var NbRowDefDirective_1;
    tslib.__decorate([
        i0.Input('nbRowDefColumns'),
        tslib.__metadata("design:type", Object)
    ], NbRowDefDirective.prototype, "columns", void 0);
    tslib.__decorate([
        i0.Input('nbRowDefWhen'),
        tslib.__metadata("design:type", Function)
    ], NbRowDefDirective.prototype, "when", void 0);
    NbRowDefDirective = NbRowDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbRowDef]',
            providers: [{ provide: _angular_cdk_table.CdkRowDef, useExisting: NbRowDefDirective_1 }],
        })
    ], NbRowDefDirective);
    return NbRowDefDirective;
}(_angular_cdk_table.CdkRowDef));
/** Footer template container that contains the cell outlet. Adds the right class and role. */
var NbHeaderRowComponent = /** @class */ (function (_super) {
    tslib.__extends(NbHeaderRowComponent, _super);
    function NbHeaderRowComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbHeaderRowComponent_1 = NbHeaderRowComponent;
    var NbHeaderRowComponent_1;
    NbHeaderRowComponent = NbHeaderRowComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'nb-header-row, tr[nbHeaderRow]',
            template: "\n    <ng-container nbCellOutlet></ng-container>",
            host: {
                'class': 'nb-header-row',
                'role': 'row',
            },
            providers: [{ provide: _angular_cdk_table.CdkHeaderRow, useExisting: NbHeaderRowComponent_1 }]
        })
    ], NbHeaderRowComponent);
    return NbHeaderRowComponent;
}(_angular_cdk_table.CdkHeaderRow));
/** Footer template container that contains the cell outlet. Adds the right class and role. */
var NbFooterRowComponent = /** @class */ (function (_super) {
    tslib.__extends(NbFooterRowComponent, _super);
    function NbFooterRowComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbFooterRowComponent_1 = NbFooterRowComponent;
    var NbFooterRowComponent_1;
    NbFooterRowComponent = NbFooterRowComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'nb-footer-row, tr[nbFooterRow]',
            template: "\n    <ng-container nbCellOutlet></ng-container>",
            host: {
                'class': 'nb-footer-row',
                'role': 'row',
            },
            providers: [{ provide: _angular_cdk_table.CdkFooterRow, useExisting: NbFooterRowComponent_1 }]
        })
    ], NbFooterRowComponent);
    return NbFooterRowComponent;
}(_angular_cdk_table.CdkFooterRow));
/** Data row template container that contains the cell outlet. Adds the right class and role. */
var NbRowComponent = /** @class */ (function (_super) {
    tslib.__extends(NbRowComponent, _super);
    function NbRowComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbRowComponent_1 = NbRowComponent;
    var NbRowComponent_1;
    NbRowComponent = NbRowComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'nb-row, tr[nbRow]',
            template: "\n    <ng-container nbCellOutlet></ng-container>",
            host: {
                'class': 'nb-row',
                'role': 'row',
            },
            providers: [{ provide: _angular_cdk_table.CdkRow, useExisting: NbRowComponent_1 }]
        })
    ], NbRowComponent);
    return NbRowComponent;
}(_angular_cdk_table.CdkRow));

var NB_TABLE_TEMPLATE = "\n  <ng-container nbHeaderRowOutlet></ng-container>\n  <ng-container nbRowOutlet></ng-container>\n  <ng-container nbFooterRowOutlet></ng-container>";
var NbTable = /** @class */ (function (_super) {
    tslib.__extends(NbTable, _super);
    function NbTable(differs, changeDetectorRef, elementRef, role, dir, document, platform) {
        return _super.call(this, differs, changeDetectorRef, elementRef, role, dir, document, platform) || this;
    }
    NbTable = tslib.__decorate([
        i0.Component({
            selector: 'nb-table-not-implemented',
            template: ""
        })
        // tslint:disable-next-line:component-class-suffix
        ,
        tslib.__param(3, i0.Attribute('role')),
        tslib.__param(5, i0.Inject(NB_DOCUMENT)),
        tslib.__metadata("design:paramtypes", [i0.IterableDiffers,
            i0.ChangeDetectorRef,
            i0.ElementRef, String, NbDirectionality, Object, NbPlatform])
    ], NbTable);
    return NbTable;
}(_angular_cdk_table.CdkTable));
var COMPONENTS$1 = [
    NbTable,
    // Template defs
    NbHeaderCellDefDirective,
    NbHeaderRowDefDirective,
    NbColumnDefDirective,
    NbCellDefDirective,
    NbRowDefDirective,
    NbFooterCellDefDirective,
    NbFooterRowDefDirective,
    // Outlets
    NbDataRowOutletDirective,
    NbHeaderRowOutletDirective,
    NbFooterRowOutletDirective,
    NbCellOutletDirective,
    // Cell directives
    NbHeaderCellDirective,
    NbCellDirective,
    NbFooterCellDirective,
    // Row directives
    NbHeaderRowComponent,
    NbRowComponent,
    NbFooterRowComponent,
];
var NbTableModule = /** @class */ (function (_super) {
    tslib.__extends(NbTableModule, _super);
    function NbTableModule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbTableModule = tslib.__decorate([
        i0.NgModule({
            imports: [NbBidiModule],
            declarations: tslib.__spreadArrays(COMPONENTS$1),
            exports: tslib.__spreadArrays(COMPONENTS$1),
        })
    ], NbTableModule);
    return NbTableModule;
}(_angular_cdk_table.CdkTableModule));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_DIALOG_CONFIG = new i0.InjectionToken('Default dialog options');
/**
 * Describes all available options that may be passed to the NbDialogService.
 * */
var NbDialogConfig = /** @class */ (function () {
    function NbDialogConfig(config) {
        /**
         * If true than overlay will render backdrop under a dialog.
         * */
        this.hasBackdrop = true;
        /**
         * Class that'll be assigned to the backdrop element.
         * */
        this.backdropClass = 'overlay-backdrop';
        /**
         * Class that'll be assigned to the dialog overlay.
         * */
        this.dialogClass = '';
        /**
         * If true then mouse clicks by backdrop will close a dialog.
         * */
        this.closeOnBackdropClick = true;
        /**
         * If true then escape press will close a dialog.
         * */
        this.closeOnEsc = true;
        /**
         * Disables scroll on content under dialog if true and does nothing otherwise.
         * */
        this.hasScroll = false;
        /**
         * Focuses dialog automatically after open if true.
         * */
        this.autoFocus = true;
        Object.assign(this, config);
    }
    return NbDialogConfig;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * The `NbDialogRef` helps to manipulate dialog after it was created.
 * The dialog can be dismissed by using `close` method of the dialogRef.
 * You can access rendered component as `content` property of the dialogRef.
 * `onBackdropClick` streams click events on the backdrop of the dialog.
 * */
var NbDialogRef = /** @class */ (function () {
    function NbDialogRef(overlayRef) {
        this.overlayRef = overlayRef;
        this.onClose$ = new rxjs.Subject();
        this.onClose = this.onClose$.asObservable();
        this.onBackdropClick = this.overlayRef.backdropClick();
    }
    /**
     * Hides dialog.
     * */
    NbDialogRef.prototype.close = function (res) {
        this.overlayRef.detach();
        this.overlayRef.dispose();
        this.onClose$.next(res);
        this.onClose$.complete();
    };
    return NbDialogRef;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Container component for each dialog.
 * All the dialogs will be attached to it.
 * // TODO add animations
 * */
var NbDialogContainerComponent = /** @class */ (function () {
    function NbDialogContainerComponent(config, elementRef, focusTrapFactory) {
        this.config = config;
        this.elementRef = elementRef;
        this.focusTrapFactory = focusTrapFactory;
    }
    NbDialogContainerComponent.prototype.ngOnInit = function () {
        if (this.config.autoFocus) {
            this.focusTrap = this.focusTrapFactory.create(this.elementRef.nativeElement);
            this.focusTrap.blurPreviouslyFocusedElement();
            this.focusTrap.focusInitialElement();
        }
    };
    NbDialogContainerComponent.prototype.ngOnDestroy = function () {
        if (this.config.autoFocus && this.focusTrap) {
            this.focusTrap.restoreFocus();
        }
    };
    NbDialogContainerComponent.prototype.attachComponentPortal = function (portal) {
        return this.portalOutlet.attachComponentPortal(portal);
    };
    NbDialogContainerComponent.prototype.attachTemplatePortal = function (portal) {
        return this.portalOutlet.attachTemplatePortal(portal);
    };
    tslib.__decorate([
        i0.ViewChild(NbPortalOutletDirective, { static: true }),
        tslib.__metadata("design:type", NbPortalOutletDirective)
    ], NbDialogContainerComponent.prototype, "portalOutlet", void 0);
    NbDialogContainerComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-dialog-container',
            template: '<ng-template nbPortalOutlet></ng-template>'
        }),
        tslib.__metadata("design:paramtypes", [NbDialogConfig,
            i0.ElementRef,
            NbFocusTrapFactoryService])
    ], NbDialogContainerComponent);
    return NbDialogContainerComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * The `NbDialogService` helps to open dialogs.
 *
 * @stacked-example(Showcase, dialog/dialog-showcase.component)
 *
 * A new dialog is opened by calling the `open` method with a component to be loaded and an optional configuration.
 * `open` method will return `NbDialogRef` that can be used for the further manipulations.
 *
 * ### Installation
 *
 * Import `NbDialogModule.forRoot()` to your app module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbDialogModule.forRoot(config),
 *   ],
 * })
 * export class AppModule { }
 * ```
 *
 * If you are using it in a lazy loaded module than you have to install it with `NbDialogModule.forChild()`:
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbDialogModule.forChild(config),
 *   ],
 * })
 * export class LazyLoadedModule { }
 * ```
 *
 * ### Usage
 *
 * ```ts
 * const dialogRef = this.dialogService.open(MyDialogComponent, { ... });
 * ```
 *
 * `NbDialogRef` gives capability access reference to the rendered dialog component,
 * destroy dialog and some other options described below.
 *
 * Also, you can inject `NbDialogRef` in dialog component.
 *
 * ```ts
 * this.dialogService.open(MyDialogComponent, { ... });
 *
 * // my-dialog.component.ts
 * constructor(protected dialogRef: NbDialogRef) {
 * }
 *
 * close() {
 *   this.dialogRef.close();
 * }
 * ```
 *
 * Instead of component you can create dialog from TemplateRef:
 *
 * @stacked-example(Template ref, dialog/dialog-template.component)
 *
 * The dialog may return result through `NbDialogRef`. Calling component can receive this result with `onClose`
 * stream of `NbDialogRef`.
 *
 * @stacked-example(Result, dialog/dialog-result.component)
 *
 * ### Configuration
 *
 * As we mentioned above, `open` method of the `NbDialogService` may receive optional configuration options.
 * Also, you can provide global dialogs configuration through `NbDialogModule.forRoot({ ... })`.
 *
 * This config may contain the following:
 *
 * `context` - both, template and component may receive data through `config.context` property.
 * For components, this data will be assigned through inputs.
 * For templates, you can access it inside template as $implicit.
 *
 * ```ts
 * this.dialogService.open(template, { context: 'pass data in template' });
 * ```
 *
 * ```html
 * <ng-template let-some-additional-data>
 *   {{ some-additional-data }}
 * <ng-template/>
 * ```
 *
 * `hasBackdrop` - determines is service have to render backdrop under the dialog.
 * Default is true.
 * @stacked-example(Backdrop, dialog/dialog-has-backdrop.component)
 *
 * `closeOnBackdropClick` - close dialog on backdrop click if true.
 * Default is true.
 * @stacked-example(Backdrop click, dialog/dialog-backdrop-click.component)
 *
 * `closeOnEsc` - close dialog on escape button on the keyboard.
 * Default is true.
 * @stacked-example(Escape hit, dialog/dialog-esc.component)
 *
 * `hasScroll` - Disables scroll on content under dialog if true and does nothing otherwise.
 * Default is false.
 * Please, open dialogs in the separate window and try to scroll.
 * @stacked-example(Scroll, dialog/dialog-scroll.component)
 *
 * `autoFocus` - Focuses dialog automatically after open if true. It's useful to prevent misclicks on
 * trigger elements and opening multiple dialogs.
 * Default is true.
 *
 * As you can see, if you open dialog with auto focus dialog will focus first focusable element
 * or just blur previously focused automatically.
 * Otherwise, without auto focus, the focus will stay on the previously focused element.
 * Please, open dialogs in the separate window and try to click on the button without focus
 * and then hit space any times. Multiple same dialogs will be opened.
 * @stacked-example(Auto focus, dialog/dialog-auto-focus.component)
 * */
var NbDialogService = /** @class */ (function () {
    function NbDialogService(document, globalConfig, positionBuilder, overlay, injector, cfr) {
        this.document = document;
        this.globalConfig = globalConfig;
        this.positionBuilder = positionBuilder;
        this.overlay = overlay;
        this.injector = injector;
        this.cfr = cfr;
    }
    /**
     * Opens new instance of the dialog, may receive optional config.
     * */
    NbDialogService.prototype.open = function (content, userConfig) {
        if (userConfig === void 0) { userConfig = {}; }
        var config = new NbDialogConfig(tslib.__assign(tslib.__assign({}, this.globalConfig), userConfig));
        var overlayRef = this.createOverlay(config);
        var dialogRef = new NbDialogRef(overlayRef);
        var container = this.createContainer(config, overlayRef);
        this.createContent(config, content, container, dialogRef);
        this.registerCloseListeners(config, overlayRef, dialogRef);
        return dialogRef;
    };
    NbDialogService.prototype.createOverlay = function (config) {
        var positionStrategy = this.createPositionStrategy();
        var scrollStrategy = this.createScrollStrategy(config.hasScroll);
        return this.overlay.create({
            positionStrategy: positionStrategy,
            scrollStrategy: scrollStrategy,
            hasBackdrop: config.hasBackdrop,
            backdropClass: config.backdropClass,
            panelClass: config.dialogClass,
        });
    };
    NbDialogService.prototype.createPositionStrategy = function () {
        return this.positionBuilder
            .global()
            .centerVertically()
            .centerHorizontally();
    };
    NbDialogService.prototype.createScrollStrategy = function (hasScroll) {
        if (hasScroll) {
            return this.overlay.scrollStrategies.noop();
        }
        else {
            return this.overlay.scrollStrategies.block();
        }
    };
    NbDialogService.prototype.createContainer = function (config, overlayRef) {
        var injector = new NbPortalInjector(this.createInjector(config), new WeakMap([[NbDialogConfig, config]]));
        var containerPortal = new NbComponentPortal(NbDialogContainerComponent, null, injector, this.cfr);
        var containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    };
    NbDialogService.prototype.createContent = function (config, content, container, dialogRef) {
        if (content instanceof i0.TemplateRef) {
            var portal = this.createTemplatePortal(config, content, dialogRef);
            container.attachTemplatePortal(portal);
        }
        else {
            var portal = this.createComponentPortal(config, content, dialogRef);
            dialogRef.componentRef = container.attachComponentPortal(portal);
            if (config.context) {
                Object.assign(dialogRef.componentRef.instance, tslib.__assign({}, config.context));
            }
        }
    };
    NbDialogService.prototype.createTemplatePortal = function (config, content, dialogRef) {
        return new NbTemplatePortal(content, null, { $implicit: config.context, dialogRef: dialogRef });
    };
    /**
     * We're creating portal with custom injector provided through config or using global injector.
     * This approach provides us capability inject `NbDialogRef` in dialog component.
     * */
    NbDialogService.prototype.createComponentPortal = function (config, content, dialogRef) {
        var injector = this.createInjector(config);
        var portalInjector = new NbPortalInjector(injector, new WeakMap([[NbDialogRef, dialogRef]]));
        return new NbComponentPortal(content, config.viewContainerRef, portalInjector);
    };
    NbDialogService.prototype.createInjector = function (config) {
        return config.viewContainerRef && config.viewContainerRef.injector || this.injector;
    };
    NbDialogService.prototype.registerCloseListeners = function (config, overlayRef, dialogRef) {
        if (config.closeOnBackdropClick) {
            overlayRef.backdropClick().subscribe(function () { return dialogRef.close(); });
        }
        if (config.closeOnEsc) {
            rxjs.fromEvent(this.document, 'keyup')
                .pipe(rxjs_operators.filter(function (event) { return event.keyCode === 27; }), rxjs_operators.takeUntil(dialogRef.onClose))
                .subscribe(function () { return dialogRef.close(); });
        }
    };
    NbDialogService = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(0, i0.Inject(NB_DOCUMENT)),
        tslib.__param(1, i0.Inject(NB_DIALOG_CONFIG)),
        tslib.__metadata("design:paramtypes", [Object, Object, NbPositionBuilderService,
            NbOverlayService,
            i0.Injector,
            i0.ComponentFactoryResolver])
    ], NbDialogService);
    return NbDialogService;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbDialogModule = /** @class */ (function () {
    function NbDialogModule() {
    }
    NbDialogModule_1 = NbDialogModule;
    NbDialogModule.forRoot = function (dialogConfig) {
        if (dialogConfig === void 0) { dialogConfig = {}; }
        return {
            ngModule: NbDialogModule_1,
            providers: [
                NbDialogService,
                { provide: NB_DIALOG_CONFIG, useValue: dialogConfig },
            ],
        };
    };
    NbDialogModule.forChild = function (dialogConfig) {
        if (dialogConfig === void 0) { dialogConfig = {}; }
        return {
            ngModule: NbDialogModule_1,
            providers: [
                NbDialogService,
                { provide: NB_DIALOG_CONFIG, useValue: dialogConfig },
            ],
        };
    };
    var NbDialogModule_1;
    NbDialogModule = NbDialogModule_1 = tslib.__decorate([
        i0.NgModule({
            imports: [NbSharedModule, NbOverlayModule],
            declarations: [NbDialogContainerComponent],
            entryComponents: [NbDialogContainerComponent],
        })
    ], NbDialogModule);
    return NbDialogModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbToast = /** @class */ (function () {
    function NbToast() {
    }
    return NbToast;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * The `NbToastComponent` is responsible for rendering each toast with appropriate styles.
 *
 * @styles
 *
 * toastr-border-style:
 * toastr-border-width:
 * toastr-border-radius:
 * toastr-padding:
 * toastr-shadow:
 * toastr-text-font-family:
 * toastr-text-font-size:
 * toastr-text-font-weight:
 * toastr-text-line-height:
 * toastr-title-text-font-family:
 * toastr-title-text-font-size:
 * toastr-title-text-font-weight:
 * toastr-title-text-line-height:
 * toastr-basic-background-color:
 * toastr-basic-border-color:
 * toastr-basic-text-color:
 * toastr-icon-basic-background-color:
 * toastr-icon-basic-color:
 * toastr-destroyable-hover-basic-background-color:
 * toastr-destroyable-hover-basic-border-color:
 * toastr-primary-background-color:
 * toastr-primary-border-color:
 * toastr-primary-text-color:
 * toastr-icon-primary-background-color:
 * toastr-icon-primary-color:
 * toastr-destroyable-hover-primary-background-color:
 * toastr-destroyable-hover-primary-border-color:
 * toastr-success-background-color:
 * toastr-success-border-color:
 * toastr-success-text-color:
 * toastr-icon-success-background-color:
 * toastr-icon-success-color:
 * toastr-destroyable-hover-success-background-color:
 * toastr-destroyable-hover-success-border-color:
 * toastr-info-background-color:
 * toastr-info-border-color:
 * toastr-info-text-color:
 * toastr-icon-info-background-color:
 * toastr-icon-info-color:
 * toastr-destroyable-hover-info-background-color:
 * toastr-destroyable-hover-info-border-color:
 * toastr-warning-background-color:
 * toastr-warning-border-color:
 * toastr-warning-text-color:
 * toastr-icon-warning-background-color:
 * toastr-icon-warning-color:
 * toastr-destroyable-hover-warning-background-color:
 * toastr-destroyable-hover-warning-border-color:
 * toastr-danger-background-color:
 * toastr-danger-border-color:
 * toastr-danger-text-color:
 * toastr-icon-danger-background-color:
 * toastr-icon-danger-color:
 * toastr-destroyable-hover-danger-background-color:
 * toastr-destroyable-hover-danger-border-color:
 * toastr-control-background-color:
 * toastr-control-border-color:
 * toastr-control-text-color:
 * toastr-icon-control-background-color:
 * toastr-icon-control-color:
 * toastr-destroyable-hover-control-background-color:
 * toastr-destroyable-hover-control-border-color:
 * */
var NbToastComponent = /** @class */ (function () {
    function NbToastComponent(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.destroy = new i0.EventEmitter();
    }
    Object.defineProperty(NbToastComponent.prototype, "success", {
        get: function () {
            return this.toast.config.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToastComponent.prototype, "info", {
        get: function () {
            return this.toast.config.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToastComponent.prototype, "warning", {
        get: function () {
            return this.toast.config.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToastComponent.prototype, "primary", {
        get: function () {
            return this.toast.config.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToastComponent.prototype, "danger", {
        get: function () {
            return this.toast.config.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToastComponent.prototype, "basic", {
        get: function () {
            return this.toast.config.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToastComponent.prototype, "control", {
        get: function () {
            return this.toast.config.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToastComponent.prototype, "destroyByClick", {
        get: function () {
            return this.toast.config.destroyByClick;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToastComponent.prototype, "hasIcon", {
        get: function () {
            var icon = this.toast.config.icon;
            if (typeof icon === 'string') {
                return true;
            }
            return !!(icon && icon.icon);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToastComponent.prototype, "customIcon", {
        get: function () {
            return !!this.icon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToastComponent.prototype, "icon", {
        get: function () {
            return this.toast.config.icon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToastComponent.prototype, "iconPack", {
        /* @deprecated Use pack property of icon config */
        get: function () {
            return this.toast.config.iconPack;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToastComponent.prototype, "iconConfig", {
        /*
          @breaking-change 5 remove
          @deprecated
        */
        get: function () {
            var toastConfig = this.toast.config;
            var isIconName = typeof this.icon === 'string';
            if (!isIconName) {
                return toastConfig.icon;
            }
            var iconConfig = { icon: toastConfig.icon };
            if (toastConfig.iconPack) {
                iconConfig.pack = toastConfig.iconPack;
            }
            return iconConfig;
        },
        enumerable: true,
        configurable: true
    });
    NbToastComponent.prototype.onClick = function () {
        this.destroy.emit();
    };
    NbToastComponent.prototype.ngOnInit = function () {
        if (this.toast.config.toastClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.toast.config.toastClass);
        }
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", NbToast)
    ], NbToastComponent.prototype, "toast", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbToastComponent.prototype, "destroy", void 0);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbToastComponent.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbToastComponent.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbToastComponent.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbToastComponent.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbToastComponent.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbToastComponent.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbToastComponent.prototype, "control", null);
    tslib.__decorate([
        i0.HostBinding('class.destroy-by-click'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbToastComponent.prototype, "destroyByClick", null);
    tslib.__decorate([
        i0.HostBinding('class.has-icon'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbToastComponent.prototype, "hasIcon", null);
    tslib.__decorate([
        i0.HostBinding('class.custom-icon'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbToastComponent.prototype, "customIcon", null);
    tslib.__decorate([
        i0.HostListener('click'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbToastComponent.prototype, "onClick", null);
    NbToastComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-toast',
            template: "<div class=\"icon-container\" *ngIf=\"hasIcon && icon\">\n  <nb-icon [config]=\"iconConfig\"></nb-icon>\n</div>\n<div class=\"content-container\">\n  <span class=\"title subtitle\">{{ toast.title }}</span>\n  <div class=\"message\">{{ toast.message }}</div>\n</div>\n",
            styles: [":host{display:flex;align-items:center;width:25rem;margin:0.5rem}:host .title{margin-right:0.25rem}:host.default .content-container,:host:not(.has-icon) .content-container{display:flex;flex-direction:row}:host.destroy-by-click{cursor:pointer}:host nb-icon{font-size:2.5rem}:host svg{width:2.5rem;height:2.5rem}\n"]
        }),
        tslib.__metadata("design:paramtypes", [i0.Renderer2, i0.ElementRef])
    ], NbToastComponent);
    return NbToastComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var voidState = _angular_animations.style({
    transform: 'translateX({{ direction }}110%)',
    height: 0,
    marginLeft: '0',
    marginRight: '0',
    marginTop: '0',
    marginBottom: '0',
});
var defaultOptions = { params: { direction: '' } };
var NbToastrContainerComponent = /** @class */ (function () {
    function NbToastrContainerComponent(layoutDirection, positionHelper) {
        this.layoutDirection = layoutDirection;
        this.positionHelper = positionHelper;
        this.destroy$ = new rxjs.Subject();
        this.content = [];
    }
    NbToastrContainerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.layoutDirection.onDirectionChange()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.onDirectionChange(); });
    };
    NbToastrContainerComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbToastrContainerComponent.prototype.onDirectionChange = function () {
        var direction = this.positionHelper.isRightPosition(this.position) ? '' : '-';
        this.fadeIn = { value: '', params: { direction: direction } };
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Array)
    ], NbToastrContainerComponent.prototype, "content", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbToastrContainerComponent.prototype, "context", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbToastrContainerComponent.prototype, "position", void 0);
    tslib.__decorate([
        i0.ViewChildren(NbToastComponent),
        tslib.__metadata("design:type", i0.QueryList)
    ], NbToastrContainerComponent.prototype, "toasts", void 0);
    NbToastrContainerComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-toastr-container',
            template: "\n    <nb-toast [@fadeIn]=\"fadeIn\" *ngFor=\"let toast of content\" [toast]=\"toast\"></nb-toast>",
            animations: [
                _angular_animations.trigger('fadeIn', [
                    _angular_animations.transition(':enter', [voidState, _angular_animations.animate(100)], defaultOptions),
                    _angular_animations.transition(':leave', [_angular_animations.animate(100, voidState)], defaultOptions),
                ]),
            ]
        }),
        tslib.__metadata("design:paramtypes", [NbLayoutDirectionService,
            NbPositionHelper])
    ], NbToastrContainerComponent);
    return NbToastrContainerComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_TOASTR_CONFIG = new i0.InjectionToken('Default toastr options');
/**
 * The `NbToastrConfig` class describes configuration of the `NbToastrService.show` and global toastr configuration.
 * */
var NbToastrConfig = /** @class */ (function () {
    function NbToastrConfig(config) {
        /**
         * Determines where on the screen toast have to be rendered.
         * */
        this.position = exports.NbGlobalLogicalPosition.TOP_END;
        /**
         * Status chooses color scheme for the toast.
         * */
        this.status = 'basic';
        /**
         * Duration is timeout between toast appears and disappears.
         * */
        this.duration = 3000;
        /**
         * Destroy by click means you can hide the toast by clicking it.
         * */
        this.destroyByClick = true;
        /**
         * If preventDuplicates is true then the toast with the same title, message and status will not be rendered.
         * Find duplicates behaviour determined by `preventDuplicates`.
         * The default `previous` duplicate behaviour is used.
         * */
        this.preventDuplicates = false;
        /**
         * Determines the how to threat duplicates.
         * */
        this.duplicatesBehaviour = 'previous';
        /*
        * The number of visible toasts. If the limit exceeded the oldest toast will be removed.
        * */
        this.limit = null;
        /**
         * Class to be applied to the toast.
         */
        this.toastClass = '';
        /**
         * Determines render icon or not.
         * */
        this.hasIcon = true;
        /**
         * Icon name or icon config object that can be provided to render custom icon.
         * */
        this.icon = 'email';
        /**
         * Toast status icon-class mapping.
         * */
        this.icons = {
            danger: 'flash-outline',
            success: 'checkmark-outline',
            info: 'question-mark-outline',
            warning: 'alert-triangle-outline',
            primary: 'email-outline',
            control: 'email-outline',
            basic: 'email-outline',
        };
        if (config.status === '') {
            emptyStatusWarning('NbToastr');
            config.status = 'basic';
        }
        this.patchIcon(config);
        Object.assign(this, config);
    }
    NbToastrConfig.prototype.patchIcon = function (config) {
        if (!('icon' in config)) {
            config.icon = {
                icon: this.icons[config.status || 'basic'],
                pack: 'nebular-essentials',
            };
        }
    };
    return NbToastrConfig;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbToastRef = /** @class */ (function () {
    function NbToastRef(toastContainer, toast) {
        this.toastContainer = toastContainer;
        this.toast = toast;
    }
    NbToastRef.prototype.close = function () {
        this.toastContainer.destroy(this.toast);
    };
    return NbToastRef;
}());
var NbToastContainer = /** @class */ (function () {
    function NbToastContainer(position, containerRef, positionHelper) {
        this.position = position;
        this.containerRef = containerRef;
        this.positionHelper = positionHelper;
        this.toasts = [];
        this.toastDuplicateCompareFunc = function (t1, t2) {
            return t1.message === t2.message
                && t1.title === t2.title
                && t1.config.status === t2.config.status;
        };
    }
    Object.defineProperty(NbToastContainer.prototype, "nativeElement", {
        get: function () {
            return this.containerRef.location.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    NbToastContainer.prototype.attach = function (toast) {
        if (toast.config.preventDuplicates && this.isDuplicate(toast)) {
            return;
        }
        this.removeToastIfLimitReached(toast);
        var toastComponent = this.attachToast(toast);
        if (toast.config.destroyByClick) {
            this.subscribeOnClick(toastComponent, toast);
        }
        if (toast.config.duration) {
            this.setDestroyTimeout(toast);
        }
        this.prevToast = toast;
        return new NbToastRef(this, toast);
    };
    NbToastContainer.prototype.destroy = function (toast) {
        if (this.prevToast === toast) {
            this.prevToast = null;
        }
        this.toasts = this.toasts.filter(function (t) { return t !== toast; });
        this.updateContainer();
    };
    NbToastContainer.prototype.isDuplicate = function (toast) {
        return toast.config.duplicatesBehaviour === 'previous'
            ? this.isDuplicatePrevious(toast)
            : this.isDuplicateAmongAll(toast);
    };
    NbToastContainer.prototype.isDuplicatePrevious = function (toast) {
        return this.prevToast && this.toastDuplicateCompareFunc(this.prevToast, toast);
    };
    NbToastContainer.prototype.isDuplicateAmongAll = function (toast) {
        var _this = this;
        return this.toasts.some(function (t) { return _this.toastDuplicateCompareFunc(t, toast); });
    };
    NbToastContainer.prototype.removeToastIfLimitReached = function (toast) {
        if (!toast.config.limit || this.toasts.length < toast.config.limit) {
            return;
        }
        if (this.positionHelper.isTopPosition(toast.config.position)) {
            this.toasts.pop();
        }
        else {
            this.toasts.shift();
        }
    };
    NbToastContainer.prototype.attachToast = function (toast) {
        if (this.positionHelper.isTopPosition(toast.config.position)) {
            return this.attachToTop(toast);
        }
        else {
            return this.attachToBottom(toast);
        }
    };
    NbToastContainer.prototype.attachToTop = function (toast) {
        this.toasts.unshift(toast);
        this.updateContainer();
        return this.containerRef.instance.toasts.first;
    };
    NbToastContainer.prototype.attachToBottom = function (toast) {
        this.toasts.push(toast);
        this.updateContainer();
        return this.containerRef.instance.toasts.last;
    };
    NbToastContainer.prototype.setDestroyTimeout = function (toast) {
        var _this = this;
        setTimeout(function () { return _this.destroy(toast); }, toast.config.duration);
    };
    NbToastContainer.prototype.subscribeOnClick = function (toastComponent, toast) {
        var _this = this;
        toastComponent.destroy.subscribe(function () { return _this.destroy(toast); });
    };
    NbToastContainer.prototype.updateContainer = function () {
        patch(this.containerRef, { content: this.toasts, position: this.position });
    };
    return NbToastContainer;
}());
var NbToastrContainerRegistry = /** @class */ (function () {
    function NbToastrContainerRegistry(overlay, positionBuilder, positionHelper, cfr, document) {
        this.overlay = overlay;
        this.positionBuilder = positionBuilder;
        this.positionHelper = positionHelper;
        this.cfr = cfr;
        this.document = document;
        this.overlays = new Map();
    }
    NbToastrContainerRegistry.prototype.get = function (position) {
        var logicalPosition = this.positionHelper.toLogicalPosition(position);
        var overlayWithContainer = this.overlays.get(logicalPosition);
        if (!overlayWithContainer || !this.existsInDom(overlayWithContainer.toastrContainer)) {
            if (overlayWithContainer) {
                overlayWithContainer.overlayRef.dispose();
            }
            this.instantiateContainer(logicalPosition);
        }
        return this.overlays.get(logicalPosition).toastrContainer;
    };
    NbToastrContainerRegistry.prototype.instantiateContainer = function (position) {
        var toastrOverlayWithContainer = this.createContainer(position);
        this.overlays.set(position, toastrOverlayWithContainer);
    };
    NbToastrContainerRegistry.prototype.createContainer = function (position) {
        var positionStrategy = this.positionBuilder.global().position(position);
        var ref = this.overlay.create({ positionStrategy: positionStrategy });
        this.addClassToOverlayHost(ref);
        var containerRef = ref.attach(new NbComponentPortal(NbToastrContainerComponent, null, null, this.cfr));
        return {
            overlayRef: ref,
            toastrContainer: new NbToastContainer(position, containerRef, this.positionHelper),
        };
    };
    NbToastrContainerRegistry.prototype.addClassToOverlayHost = function (overlayRef) {
        overlayRef.hostElement.classList.add('toastr-overlay-container');
    };
    NbToastrContainerRegistry.prototype.existsInDom = function (toastContainer) {
        return this.document.body.contains(toastContainer.nativeElement);
    };
    NbToastrContainerRegistry = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(4, i0.Inject(NB_DOCUMENT)),
        tslib.__metadata("design:paramtypes", [NbOverlayService,
            NbPositionBuilderService,
            NbPositionHelper,
            i0.ComponentFactoryResolver, Object])
    ], NbToastrContainerRegistry);
    return NbToastrContainerRegistry;
}());
/**
 * The `NbToastrService` provides a capability to build toast notifications.
 *
 * @stacked-example(Showcase, toastr/toastr-showcase.component)
 *
 * `NbToastrService.show(message, title, config)` accepts three params, title and config are optional.
 *
 * ### Installation
 *
 * Import `NbToastrModule.forRoot()` to your app module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbToastrModule.forRoot(config),
 *   ],
 * })
 * export class AppModule { }
 * ```
 *
 * ### Usage
 *
 * Calling `NbToastrService.show(...)` will render new toast and return `NbToastrRef` with
 * help of which you may close newly created toast by calling `close` method.
 *
 * ```ts
 * const toastRef: NbToastRef = this.toastrService.show(...);
 * toastRef.close();
 * ```
 *
 * Config accepts following options:
 *
 * `position` - determines where on the screen toast will be rendered.
 * Default is `top-end`.
 *
 * @stacked-example(Position, toastr/toastr-positions.component)
 *
 * `status` - coloring and icon of the toast.
 * Default is `basic`.
 *
 * @stacked-example(Status, toastr/toastr-statuses.component)
 *
 * `duration` - the time after which the toast will be destroyed.
 * `0` means endless toast, that may be destroyed by click only.
 * Default is 3000 ms.
 *
 * @stacked-example(Duration, toastr/toastr-duration.component)
 *
 * `destroyByClick` - provides a capability to destroy toast by click.
 * Default is true.
 *
 * @stacked-example(Destroy by click, toastr/toastr-destroy-by-click.component)
 *
 * `preventDuplicates` - don't create new toast if it has the same title, message and status.
 * Default is false.
 *
 * @stacked-example(Prevent duplicates, toastr/toastr-prevent-duplicates.component)
 *
 * `duplicatesBehaviour` - determines how to threat the toasts duplication.
 * Compare with the previous message `previous`
 * or with all visible messages `all`.
 *
 * @stacked-example(Prevent duplicates behaviour , toastr/toastr-prevent-duplicates-behaviour.component)
 *
 * `limit` - the number of visible toasts in the toast container. The number of toasts is unlimited by default.
 *
 * @stacked-example(Prevent duplicates behaviour , toastr/toastr-limit.component)
 *
 * `hasIcon` - if true then render toast icon.
 * `icon` - you can pass icon class that will be applied into the toast.
 *
 * @stacked-example(Has icon, toastr/toastr-icon.component)
 * */
var NbToastrService = /** @class */ (function () {
    function NbToastrService(globalConfig, containerRegistry) {
        this.globalConfig = globalConfig;
        this.containerRegistry = containerRegistry;
    }
    /**
     * Shows toast with message, title and user config.
     * */
    NbToastrService.prototype.show = function (message, title, userConfig) {
        var config = new NbToastrConfig(tslib.__assign(tslib.__assign({}, this.globalConfig), userConfig));
        var container = this.containerRegistry.get(config.position);
        var toast = { message: message, title: title, config: config };
        return container.attach(toast);
    };
    /**
     * Shows success toast with message, title and user config.
     * */
    NbToastrService.prototype.success = function (message, title, config) {
        return this.show(message, title, tslib.__assign(tslib.__assign({}, config), { status: 'success' }));
    };
    /**
     * Shows info toast with message, title and user config.
     * */
    NbToastrService.prototype.info = function (message, title, config) {
        return this.show(message, title, tslib.__assign(tslib.__assign({}, config), { status: 'info' }));
    };
    /**
     * Shows warning toast with message, title and user config.
     * */
    NbToastrService.prototype.warning = function (message, title, config) {
        return this.show(message, title, tslib.__assign(tslib.__assign({}, config), { status: 'warning' }));
    };
    /**
     * Shows primary toast with message, title and user config.
     * */
    NbToastrService.prototype.primary = function (message, title, config) {
        return this.show(message, title, tslib.__assign(tslib.__assign({}, config), { status: 'primary' }));
    };
    /**
     * Shows danger toast with message, title and user config.
     * */
    NbToastrService.prototype.danger = function (message, title, config) {
        return this.show(message, title, tslib.__assign(tslib.__assign({}, config), { status: 'danger' }));
    };
    /**
     * Shows default toast with message, title and user config.
     * */
    NbToastrService.prototype.default = function (message, title, config) {
        return this.show(message, title, tslib.__assign(tslib.__assign({}, config), { status: 'basic' }));
    };
    /**
     * Shows control toast with message, title and user config.
     * */
    NbToastrService.prototype.control = function (message, title, config) {
        return this.default(message, title, tslib.__assign(tslib.__assign({}, config), { status: 'control' }));
    };
    NbToastrService = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(0, i0.Inject(NB_TOASTR_CONFIG)),
        tslib.__metadata("design:paramtypes", [NbToastrConfig,
            NbToastrContainerRegistry])
    ], NbToastrService);
    return NbToastrService;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbToastrModule = /** @class */ (function () {
    function NbToastrModule() {
    }
    NbToastrModule_1 = NbToastrModule;
    NbToastrModule.forRoot = function (toastrConfig) {
        if (toastrConfig === void 0) { toastrConfig = {}; }
        return {
            ngModule: NbToastrModule_1,
            providers: [
                NbToastrService,
                NbToastrContainerRegistry,
                { provide: NB_TOASTR_CONFIG, useValue: toastrConfig },
            ],
        };
    };
    var NbToastrModule_1;
    NbToastrModule = NbToastrModule_1 = tslib.__decorate([
        i0.NgModule({
            imports: [NbSharedModule, NbOverlayModule, NbIconModule],
            declarations: [NbToastrContainerComponent, NbToastComponent],
            entryComponents: [NbToastrContainerComponent, NbToastComponent],
        })
    ], NbToastrModule);
    return NbToastrModule;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Tooltip container.
 * Renders provided tooltip inside.
 *
 * @styles
 *
 * tooltip-background-color:
 * tooltip-border-color:
 * tooltip-border-style:
 * tooltip-border-width:
 * tooltip-border-radius:
 * tooltip-padding:
 * tooltip-text-color:
 * tooltip-text-font-family:
 * tooltip-text-font-size:
 * tooltip-text-font-weight:
 * tooltip-text-line-height:
 * tooltip-icon-height:
 * tooltip-icon-width:
 * tooltip-max-width:
 * tooltip-basic-background-color:
 * tooltip-basic-border-color:
 * tooltip-basic-text-color:
 * tooltip-primary-background-color:
 * tooltip-primary-border-color:
 * tooltip-primary-text-color:
 * tooltip-info-background-color:
 * tooltip-info-border-color:
 * tooltip-info-text-color:
 * tooltip-success-background-color:
 * tooltip-success-border-color:
 * tooltip-success-text-color:
 * tooltip-warning-background-color:
 * tooltip-warning-border-color:
 * tooltip-warning-text-color:
 * tooltip-danger-background-color:
 * tooltip-danger-border-color:
 * tooltip-danger-text-color:
 * tooltip-control-background-color:
 * tooltip-control-border-color:
 * tooltip-control-text-color:
 * tooltip-shadow:
 */
var NbTooltipComponent = /** @class */ (function () {
    function NbTooltipComponent() {
        /**
         * Popover position relatively host element.
         * */
        this.position = exports.NbPosition.TOP;
        this.context = {};
    }
    Object.defineProperty(NbTooltipComponent.prototype, "binding", {
        get: function () {
            return this.position + " " + this.statusClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbTooltipComponent.prototype, "show", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbTooltipComponent.prototype, "statusClass", {
        get: function () {
            if (this.context.status) {
                return "status-" + this.context.status;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The method is empty since we don't need to do anything additionally
     * render is handled by change detection
     */
    NbTooltipComponent.prototype.renderContent = function () { };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbTooltipComponent.prototype, "content", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbTooltipComponent.prototype, "position", void 0);
    tslib.__decorate([
        i0.HostBinding('class'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbTooltipComponent.prototype, "binding", null);
    tslib.__decorate([
        i0.HostBinding('@showTooltip'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbTooltipComponent.prototype, "show", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbTooltipComponent.prototype, "context", void 0);
    NbTooltipComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-tooltip',
            template: "\n    <span class=\"arrow\"></span>\n    <div class=\"content\">\n      <nb-icon *ngIf=\"context?.icon\" [config]=\"context.icon\"></nb-icon>\n      <span *ngIf=\"content\">{{ content }}</span>\n    </div>\n  ",
            animations: [
                _angular_animations.trigger('showTooltip', [
                    _angular_animations.state('in', _angular_animations.style({ opacity: 1 })),
                    _angular_animations.transition('void => *', [
                        _angular_animations.style({ opacity: 0 }),
                        _angular_animations.animate(100),
                    ]),
                    _angular_animations.transition('* => void', [
                        _angular_animations.animate(100, _angular_animations.style({ opacity: 0 })),
                    ]),
                ]),
            ],
            styles: [":host{z-index:10000}:host .content{display:flex;align-items:center}:host.right .content{flex-direction:row-reverse}:host .arrow{position:absolute;width:0;height:0}:host nb-icon+span{margin-left:0.5rem}:host.right nb-icon+span{margin-right:0.5rem}:host .arrow{border-left:6px solid transparent;border-right:6px solid transparent}:host(.bottom) .arrow{top:-6px;left:calc(50% - 6px)}:host(.bottom-start) .arrow{top:-6px}[dir=ltr] :host(.bottom-start) .arrow{right:6px}[dir=rtl] :host(.bottom-start) .arrow{left:6px}:host(.bottom-end) .arrow{top:-6px}[dir=ltr] :host(.bottom-end) .arrow{left:6px}[dir=rtl] :host(.bottom-end) .arrow{right:6px}:host(.left) .arrow,:host(.start) .arrow{top:calc(50% - 2.4px)}[dir=ltr] :host(.left) .arrow,[dir=ltr] :host(.start) .arrow{right:-8px;transform:rotate(90deg)}[dir=rtl] :host(.left) .arrow,[dir=rtl] :host(.start) .arrow{left:-8px;transform:rotate(270deg)}:host(.start-top) .arrow{right:-8px;bottom:6px;transform:rotate(90deg)}:host(.start-bottom) .arrow{right:-8px;top:6px;transform:rotate(90deg)}:host(.top) .arrow{bottom:-6px;left:calc(50% - 6px);transform:rotate(180deg)}:host(.top-start) .arrow{bottom:calc(-1 * 6px + 1px);transform:rotate(180deg)}[dir=ltr] :host(.top-start) .arrow{right:6px}[dir=rtl] :host(.top-start) .arrow{left:6px}:host(.top-end) .arrow{bottom:calc(-6px + 1px);transform:rotate(180deg)}[dir=ltr] :host(.top-end) .arrow{left:6px}[dir=rtl] :host(.top-end) .arrow{right:6px}:host(.right) .arrow,:host(.end) .arrow{top:calc(50% - 2.4px)}[dir=ltr] :host(.right) .arrow,[dir=ltr] :host(.end) .arrow{left:-8px;transform:rotate(270deg)}[dir=rtl] :host(.right) .arrow,[dir=rtl] :host(.end) .arrow{right:-8px;transform:rotate(90deg)}:host(.end-top) .arrow{left:calc(-6px - 6px / 2.5);bottom:6px;transform:rotate(270deg)}:host(.end-bottom) .arrow{left:calc(-6px - 6px / 2.5);top:6px;transform:rotate(270deg)}\n"]
        })
    ], NbTooltipComponent);
    return NbTooltipComponent;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 *
 * Tooltip directive for small text/icon hints.
 *
 * ### Installation
 *
 * Import `NbTooltipModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbTooltipModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * @stacked-example(Showcase, tooltip/tooltip-showcase.component)
 *
 * Tooltip can accept a hint text and/or an icon:
 * @stacked-example(With Icon, tooltip/tooltip-with-icon.component)
 *
 * Same way as Popover, tooltip can accept placement position with `nbTooltipPlacement` property:
 * @stacked-example(Placements, tooltip/tooltip-placements.component)
 *
 * It is also possible to specify tooltip color using `nbTooltipStatus` property:
 * @stacked-example(Colored Tooltips, tooltip/tooltip-colors.component)
 *
 * Tooltip has a number of triggers which provides an ability to show and hide the component in different ways:
 *
 * - Click mode shows the component when a user clicks on the host element and hides when the user clicks
 * somewhere on the document outside the component.
 * - Hint provides capability to show the component when the user hovers over the host element
 * and hide when the user hovers out of the host.
 * - Hover works like hint mode with one exception - when the user moves mouse from host element to
 * the container element the component remains open, so that it is possible to interact with it content.
 * - Focus mode is applied when user focuses the element.
 * - Noop mode - the component won't react to the user interaction.
 */
var NbTooltipDirective = /** @class */ (function () {
    function NbTooltipDirective(hostRef, dynamicOverlayHandler) {
        this.hostRef = hostRef;
        this.dynamicOverlayHandler = dynamicOverlayHandler;
        this.destroy$ = new rxjs.Subject();
        this.tooltipComponent = NbTooltipComponent;
        this.offset = 8;
        this.context = {};
        /**
         * Position will be calculated relatively host element based on the position.
         * Can be top, right, bottom, left, start or end.
         */
        this.position = exports.NbPosition.TOP;
        this._adjustment = exports.NbAdjustment.CLOCKWISE;
        this.tooltipClass = '';
        /**
         * Describes when the container will be shown.
         * Available options: `click`, `hover`, `hint`, `focus` and `noop`
         * */
        this.trigger = exports.NbTrigger.HINT;
        this.nbTooltipShowStateChange = new i0.EventEmitter();
    }
    Object.defineProperty(NbTooltipDirective.prototype, "adjustment", {
        /**
         * Container position will change automatically based on this strategy if container can't fit view port.
         * Set this property to `noop` value if you want to disable automatic adjustment.
         * Available values: `clockwise` (default), `counterclockwise`, `vertical`, `horizontal`, `noop`.
         */
        get: function () {
            return this._adjustment;
        },
        set: function (value) {
            if (!value) {
                // @breaking-change Remove @5.0.0
                console.warn("Falsy values for 'nbPopoverAdjustment' are deprecated and will be removed in Nebular 5.\n Use 'noop' instead.");
                value = exports.NbAdjustment.NOOP;
            }
            this._adjustment = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbTooltipDirective.prototype, "icon", {
        /**
         * Accepts icon name or icon config object
         * @param {string | NbIconConfig} icon name or config object
         */
        set: function (icon) {
            this.context = Object.assign(this.context, { icon: icon });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbTooltipDirective.prototype, "status", {
        /**
         *
         * @param {string} status
         */
        set: function (status) {
            this.context = Object.assign(this.context, { status: status });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbTooltipDirective.prototype, "isShown", {
        get: function () {
            return !!(this.dynamicOverlay && this.dynamicOverlay.isAttached);
        },
        enumerable: true,
        configurable: true
    });
    NbTooltipDirective.prototype.ngOnInit = function () {
        this.dynamicOverlayHandler
            .host(this.hostRef)
            .componentType(this.tooltipComponent)
            .offset(this.offset);
    };
    NbTooltipDirective.prototype.ngOnChanges = function () {
        this.rebuild();
    };
    NbTooltipDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.dynamicOverlay = this.configureDynamicOverlay()
            .build();
        this.dynamicOverlay.isShown
            .pipe(rxjs_operators.skip(1), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (isShown) { return _this.nbTooltipShowStateChange.emit({ isShown: isShown }); });
    };
    NbTooltipDirective.prototype.rebuild = function () {
        this.dynamicOverlay = this.configureDynamicOverlay()
            .rebuild();
    };
    NbTooltipDirective.prototype.show = function () {
        this.dynamicOverlay.show();
    };
    NbTooltipDirective.prototype.hide = function () {
        this.dynamicOverlay.hide();
    };
    NbTooltipDirective.prototype.toggle = function () {
        this.dynamicOverlay.toggle();
    };
    NbTooltipDirective.prototype.ngOnDestroy = function () {
        this.dynamicOverlayHandler.destroy();
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbTooltipDirective.prototype.configureDynamicOverlay = function () {
        return this.dynamicOverlayHandler
            .position(this.position)
            .trigger(this.trigger)
            .adjustment(this.adjustment)
            .content(this.content)
            .context(this.context)
            .overlayConfig({ panelClass: this.tooltipClass });
    };
    tslib.__decorate([
        i0.Input('nbTooltip'),
        tslib.__metadata("design:type", String)
    ], NbTooltipDirective.prototype, "content", void 0);
    tslib.__decorate([
        i0.Input('nbTooltipPlacement'),
        tslib.__metadata("design:type", String)
    ], NbTooltipDirective.prototype, "position", void 0);
    tslib.__decorate([
        i0.Input('nbTooltipAdjustment'),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbTooltipDirective.prototype, "adjustment", null);
    tslib.__decorate([
        i0.Input('nbTooltipClass'),
        tslib.__metadata("design:type", String)
    ], NbTooltipDirective.prototype, "tooltipClass", void 0);
    tslib.__decorate([
        i0.Input('nbTooltipIcon'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbTooltipDirective.prototype, "icon", null);
    tslib.__decorate([
        i0.Input('nbTooltipStatus'),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbTooltipDirective.prototype, "status", null);
    tslib.__decorate([
        i0.Input('nbTooltipTrigger'),
        tslib.__metadata("design:type", String)
    ], NbTooltipDirective.prototype, "trigger", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbTooltipDirective.prototype, "nbTooltipShowStateChange", void 0);
    NbTooltipDirective = tslib.__decorate([
        i0.Directive({
            selector: '[nbTooltip]',
            exportAs: 'nbTooltip',
            providers: [NbDynamicOverlayHandler, NbDynamicOverlay],
        }),
        tslib.__metadata("design:paramtypes", [i0.ElementRef,
            NbDynamicOverlayHandler])
    ], NbTooltipDirective);
    return NbTooltipDirective;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbTooltipModule = /** @class */ (function () {
    function NbTooltipModule() {
    }
    NbTooltipModule = tslib.__decorate([
        i0.NgModule({
            imports: [NbSharedModule, NbOverlayModule, NbIconModule],
            declarations: [NbTooltipComponent, NbTooltipDirective],
            exports: [NbTooltipDirective],
            entryComponents: [NbTooltipComponent],
        })
    ], NbTooltipModule);
    return NbTooltipModule;
}());

var NB_SELECT_INJECTION_TOKEN = new i0.InjectionToken('NB_SELECT_INJECTION_TOKEN');

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
// Component class scoped counter for aria attributes.
var lastOptionId = 0;
/**
 * NbOptionComponent
 *
 * @styles
 *
 * option-background-color:
 * option-text-color:
 * option-text-font-family:
 * option-hover-background-color:
 * option-hover-text-color:
 * option-active-background-color:
 * option-active-text-color:
 * option-focus-background-color:
 * option-focus-text-color:
 * option-selected-background-color:
 * option-selected-text-color:
 * option-selected-hover-background-color:
 * option-selected-hover-text-color:
 * option-selected-active-background-color:
 * option-selected-active-text-color:
 * option-selected-focus-background-color:
 * option-selected-focus-text-color:
 * option-disabled-background-color:
 * option-disabled-text-color:
 * option-tiny-text-font-size:
 * option-tiny-text-font-weight:
 * option-tiny-text-line-height:
 * option-tiny-padding:
 * option-small-text-font-size:
 * option-small-text-font-weight:
 * option-small-text-line-height:
 * option-small-padding:
 * option-medium-text-font-size:
 * option-medium-text-font-weight:
 * option-medium-text-line-height:
 * option-medium-padding:
 * option-large-text-font-size:
 * option-large-text-font-weight:
 * option-large-text-line-height:
 * option-large-padding:
 * option-giant-text-font-size:
 * option-giant-text-font-weight:
 * option-giant-text-line-height:
 * option-giant-padding:
 **/
var NbOptionComponent = /** @class */ (function () {
    function NbOptionComponent(parent, elementRef, cd, zone, renderer) {
        this.elementRef = elementRef;
        this.cd = cd;
        this.zone = zone;
        this.renderer = renderer;
        this.disabledByGroup = false;
        this._disabled = false;
        /**
         * Fires value when option selection change.
         * */
        this.selectionChange = new i0.EventEmitter();
        /**
         * Fires when option clicked
         */
        this.click$ = new rxjs.Subject();
        this.selected = false;
        this.alive = true;
        /**
         * Component scoped id for aria attributes.
         * */
        this.id = "nb-option-" + lastOptionId++;
        this._active = false;
        this.parent = parent;
    }
    Object.defineProperty(NbOptionComponent.prototype, "disabled", {
        get: function () {
            return this._disabled || this.disabledByGroup;
        },
        set: function (value) {
            this._disabled = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionComponent.prototype, "click", {
        get: function () {
            return this.click$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    NbOptionComponent.prototype.ngOnDestroy = function () {
        this.alive = false;
    };
    NbOptionComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // TODO: #2254
        this.zone.runOutsideAngular(function () { return setTimeout(function () {
            _this.renderer.addClass(_this.elementRef.nativeElement, 'nb-transition');
        }); });
    };
    Object.defineProperty(NbOptionComponent.prototype, "withCheckbox", {
        /**
         * Determines should we render checkbox.
         * */
        get: function () {
            return this.multiple && this.value != null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionComponent.prototype, "content", {
        get: function () {
            return this.elementRef.nativeElement.textContent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionComponent.prototype, "multiple", {
        // TODO: replace with isShowCheckbox property to control this behaviour outside, issues/1965
        get: function () {
            // We check parent existing because parent can be NbSelectComponent or
            // NbAutocomplete and `miltiple` property exists only in NbSelectComponent
            return this.parent ? this.parent.multiple : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionComponent.prototype, "selectedClass", {
        get: function () {
            return this.selected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionComponent.prototype, "disabledAttribute", {
        get: function () {
            return this.disabled ? '' : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionComponent.prototype, "tabindex", {
        get: function () {
            return '-1';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionComponent.prototype, "activeClass", {
        get: function () {
            return this._active;
        },
        enumerable: true,
        configurable: true
    });
    
    NbOptionComponent.prototype.onClick = function (event) {
        this.click$.next(this);
        // Prevent scroll on space click, etc.
        event.preventDefault();
    };
    NbOptionComponent.prototype.select = function () {
        this.setSelection(true);
    };
    NbOptionComponent.prototype.deselect = function () {
        this.setSelection(false);
    };
    /**
     * Sets disabled by group state and marks component for check.
     */
    NbOptionComponent.prototype.setDisabledByGroupState = function (disabled) {
        if (this.disabledByGroup !== disabled) {
            this.disabledByGroup = disabled;
            this.cd.markForCheck();
        }
    };
    NbOptionComponent.prototype.setSelection = function (selected) {
        /**
         * In case of changing options in runtime the reference to the selected option will be kept in select component.
         * This may lead to exceptions with detecting changes in destroyed component.
         *
         * Also Angular can call writeValue on destroyed view (select implements ControlValueAccessor).
         * angular/angular#27803
         * */
        if (this.alive && this.selected !== selected) {
            this.selected = selected;
            this.selectionChange.emit(this);
            this.cd.markForCheck();
        }
    };
    NbOptionComponent.prototype.focus = function () {
        this.elementRef.nativeElement.focus();
    };
    NbOptionComponent.prototype.getLabel = function () {
        return this.content;
    };
    NbOptionComponent.prototype.setActiveStyles = function () {
        this._active = true;
        this.cd.markForCheck();
    };
    NbOptionComponent.prototype.setInactiveStyles = function () {
        this._active = false;
        this.cd.markForCheck();
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbOptionComponent.prototype, "value", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbOptionComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbOptionComponent.prototype, "selectionChange", void 0);
    tslib.__decorate([
        i0.HostBinding('attr.id'),
        tslib.__metadata("design:type", String)
    ], NbOptionComponent.prototype, "id", void 0);
    tslib.__decorate([
        i0.HostBinding('class.multiple'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionComponent.prototype, "multiple", null);
    tslib.__decorate([
        i0.HostBinding('class.selected'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionComponent.prototype, "selectedClass", null);
    tslib.__decorate([
        i0.HostBinding('attr.disabled'),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionComponent.prototype, "disabledAttribute", null);
    tslib.__decorate([
        i0.HostBinding('tabIndex'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionComponent.prototype, "tabindex", null);
    tslib.__decorate([
        i0.HostBinding('class.active'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionComponent.prototype, "activeClass", null);
    tslib.__decorate([
        i0.HostListener('click', ['$event']),
        i0.HostListener('keydown.space', ['$event']),
        i0.HostListener('keydown.enter', ['$event']),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], NbOptionComponent.prototype, "onClick", null);
    NbOptionComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-option',
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            template: "\n    <nb-checkbox *ngIf=\"withCheckbox\"\n                 [checked]=\"selected\"\n                 [disabled]=\"disabled\"\n                 aria-hidden=\"true\">\n    </nb-checkbox>\n    <ng-content></ng-content>\n  ",
            styles: ["/*!\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */:host{display:flex}:host:hover{cursor:pointer}:host nb-checkbox{display:flex;pointer-events:none}[dir=ltr] :host nb-checkbox{margin-right:.5rem}[dir=rtl] :host nb-checkbox{margin-left:.5rem}:host nb-checkbox ::ng-deep .label{padding:0}:host([disabled]){pointer-events:none}:host(.nb-transition){transition-duration:0.15s;transition-property:background-color,color;transition-timing-function:ease-in}\n"]
        }),
        tslib.__param(0, i0.Optional()), tslib.__param(0, i0.Inject(NB_SELECT_INJECTION_TOKEN)),
        tslib.__metadata("design:paramtypes", [Object, i0.ElementRef,
            i0.ChangeDetectorRef,
            i0.NgZone,
            i0.Renderer2])
    ], NbOptionComponent);
    return NbOptionComponent;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbSelectLabelComponent = /** @class */ (function () {
    function NbSelectLabelComponent() {
    }
    NbSelectLabelComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-select-label',
            template: '<ng-content></ng-content>'
        })
    ], NbSelectLabelComponent);
    return NbSelectLabelComponent;
}());
function nbSelectFormFieldControlConfigFactory() {
    var config = new NbFormFieldControlConfig();
    config.supportsSuffix = false;
    return config;
}
/**
 * The `NbSelectComponent` provides a capability to select one of the passed items.
 *
 * @stacked-example(Showcase, select/select-showcase.component)
 *
 * ### Installation
 *
 * Import `NbSelectModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbSelectModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * If you want to use it as the multi-select control you have to mark it as `multiple`.
 * In this case, `nb-select` will work only with arrays - accept arrays and propagate arrays.
 *
 * @stacked-example(Multiple, select/select-multiple.component)
 *
 * Items without values will clean the selection. Both `null` and `undefined` values will also clean the selection.
 *
 * @stacked-example(Clean selection, select/select-clean.component)
 *
 * Select may be bounded using `selected` input:
 *
 * ```html
 * <nb-select [(selected)]="selected"></nb-selected>
 * ```
 *
 * Or you can bind control with form controls or ngModel:
 *
 * @stacked-example(Select form binding, select/select-form.component)
 *
 * Options in the select may be grouped using `nb-option-group` component.
 *
 * @stacked-example(Grouping, select/select-groups.component)
 *
 * Select may have a placeholder that will be shown when nothing selected:
 *
 * @stacked-example(Placeholder, select/select-placeholder.component)
 *
 * You can disable select, options and whole groups.
 *
 * @stacked-example(Disabled select, select/select-disabled.component)
 *
 * Also, the custom label may be provided in select.
 * This custom label will be used for instead placeholder when something selected.
 *
 * @stacked-example(Custom label, select/select-label.component)
 *
 * Default `nb-select` size is `medium` and status is `basic`.
 * Select is available in multiple colors using `status` property:
 *
 * @stacked-example(Select statuses, select/select-status.component)
 *
 * There are five select sizes:
 *
 * @stacked-example(Select sizes, select/select-sizes.component)
 *
 * And two additional style types - `filled`:
 *
 * @stacked-example(Filled select, select/select-filled.component)
 *
 * and `hero`:
 *
 * @stacked-example(Select colors, select/select-hero.component)
 *
 * Select is available in different shapes, that could be combined with the other properties:
 *
 * @stacked-example(Select shapes, select/select-shapes.component)
 *
 * @additional-example(Interactive, select/select-interactive.component)
 *
 * @styles
 *
 * select-cursor:
 * select-disabled-cursor:
 * select-min-width:
 * select-outline-width:
 * select-outline-color:
 * select-icon-offset:
 * select-text-font-family:
 * select-placeholder-text-font-family:
 * select-tiny-text-font-size:
 * select-tiny-text-font-weight:
 * select-tiny-text-line-height:
 * select-tiny-placeholder-text-font-size:
 * select-tiny-placeholder-text-font-weight:
 * select-tiny-max-width:
 * select-small-text-font-size:
 * select-small-text-font-weight:
 * select-small-text-line-height:
 * select-small-placeholder-text-font-size:
 * select-small-placeholder-text-font-weight:
 * select-small-max-width:
 * select-medium-text-font-size:
 * select-medium-text-font-weight:
 * select-medium-text-line-height:
 * select-medium-placeholder-text-font-size:
 * select-medium-placeholder-text-font-weight:
 * select-medium-max-width:
 * select-large-text-font-size:
 * select-large-text-font-weight:
 * select-large-text-line-height:
 * select-large-placeholder-text-font-size:
 * select-large-placeholder-text-font-weight:
 * select-large-max-width:
 * select-giant-text-font-size:
 * select-giant-text-font-weight:
 * select-giant-text-line-height:
 * select-giant-placeholder-text-font-size:
 * select-giant-placeholder-text-font-weight:
 * select-giant-max-width:
 * select-rectangle-border-radius:
 * select-semi-round-border-radius:
 * select-round-border-radius:
 * select-outline-border-style:
 * select-outline-border-width:
 * select-outline-tiny-padding:
 * select-outline-small-padding:
 * select-outline-medium-padding:
 * select-outline-large-padding:
 * select-outline-giant-padding:
 * select-outline-basic-icon-color:
 * select-outline-basic-text-color:
 * select-outline-basic-placeholder-text-color:
 * select-outline-basic-background-color:
 * select-outline-basic-border-color:
 * select-outline-basic-focus-background-color:
 * select-outline-basic-focus-border-color:
 * select-outline-basic-hover-background-color:
 * select-outline-basic-hover-border-color:
 * select-outline-basic-disabled-background-color:
 * select-outline-basic-disabled-border-color:
 * select-outline-basic-disabled-icon-color:
 * select-outline-basic-disabled-text-color:
 * select-outline-primary-icon-color:
 * select-outline-primary-text-color:
 * select-outline-primary-placeholder-text-color:
 * select-outline-primary-background-color:
 * select-outline-primary-border-color:
 * select-outline-primary-focus-background-color:
 * select-outline-primary-focus-border-color:
 * select-outline-primary-hover-background-color:
 * select-outline-primary-hover-border-color:
 * select-outline-primary-disabled-background-color:
 * select-outline-primary-disabled-border-color:
 * select-outline-primary-disabled-icon-color:
 * select-outline-primary-disabled-text-color:
 * select-outline-success-icon-color:
 * select-outline-success-text-color:
 * select-outline-success-placeholder-text-color:
 * select-outline-success-background-color:
 * select-outline-success-border-color:
 * select-outline-success-focus-background-color:
 * select-outline-success-focus-border-color:
 * select-outline-success-hover-background-color:
 * select-outline-success-hover-border-color:
 * select-outline-success-disabled-background-color:
 * select-outline-success-disabled-border-color:
 * select-outline-success-disabled-icon-color:
 * select-outline-success-disabled-text-color:
 * select-outline-info-icon-color:
 * select-outline-info-text-color:
 * select-outline-info-placeholder-text-color:
 * select-outline-info-background-color:
 * select-outline-info-border-color:
 * select-outline-info-focus-background-color:
 * select-outline-info-focus-border-color:
 * select-outline-info-hover-background-color:
 * select-outline-info-hover-border-color:
 * select-outline-info-disabled-background-color:
 * select-outline-info-disabled-border-color:
 * select-outline-info-disabled-icon-color:
 * select-outline-info-disabled-text-color:
 * select-outline-warning-icon-color:
 * select-outline-warning-text-color:
 * select-outline-warning-placeholder-text-color:
 * select-outline-warning-background-color:
 * select-outline-warning-border-color:
 * select-outline-warning-focus-background-color:
 * select-outline-warning-focus-border-color:
 * select-outline-warning-hover-background-color:
 * select-outline-warning-hover-border-color:
 * select-outline-warning-disabled-background-color:
 * select-outline-warning-disabled-border-color:
 * select-outline-warning-disabled-icon-color:
 * select-outline-warning-disabled-text-color:
 * select-outline-danger-icon-color:
 * select-outline-danger-text-color:
 * select-outline-danger-placeholder-text-color:
 * select-outline-danger-background-color:
 * select-outline-danger-border-color:
 * select-outline-danger-focus-background-color:
 * select-outline-danger-focus-border-color:
 * select-outline-danger-hover-background-color:
 * select-outline-danger-hover-border-color:
 * select-outline-danger-disabled-background-color:
 * select-outline-danger-disabled-border-color:
 * select-outline-danger-disabled-icon-color:
 * select-outline-danger-disabled-text-color:
 * select-outline-control-icon-color:
 * select-outline-control-text-color:
 * select-outline-control-placeholder-text-color:
 * select-outline-control-background-color:
 * select-outline-control-border-color:
 * select-outline-control-focus-background-color:
 * select-outline-control-focus-border-color:
 * select-outline-control-hover-background-color:
 * select-outline-control-hover-border-color:
 * select-outline-control-disabled-background-color:
 * select-outline-control-disabled-border-color:
 * select-outline-control-disabled-icon-color:
 * select-outline-control-disabled-text-color:
 * select-outline-adjacent-border-style:
 * select-outline-adjacent-border-width:
 * select-outline-basic-open-border-color:
 * select-outline-basic-adjacent-border-color:
 * select-outline-primary-open-border-color:
 * select-outline-primary-adjacent-border-color:
 * select-outline-success-open-border-color:
 * select-outline-success-adjacent-border-color:
 * select-outline-info-open-border-color:
 * select-outline-info-adjacent-border-color:
 * select-outline-warning-open-border-color:
 * select-outline-warning-adjacent-border-color:
 * select-outline-danger-open-border-color:
 * select-outline-danger-adjacent-border-color:
 * select-outline-control-open-border-color:
 * select-outline-control-adjacent-border-color:
 * select-filled-border-style:
 * select-filled-border-width:
 * select-filled-tiny-padding:
 * select-filled-small-padding:
 * select-filled-medium-padding:
 * select-filled-large-padding:
 * select-filled-giant-padding:
 * select-filled-basic-background-color:
 * select-filled-basic-border-color:
 * select-filled-basic-icon-color:
 * select-filled-basic-text-color:
 * select-filled-basic-placeholder-text-color:
 * select-filled-basic-focus-background-color:
 * select-filled-basic-focus-border-color:
 * select-filled-basic-hover-background-color:
 * select-filled-basic-hover-border-color:
 * select-filled-basic-disabled-background-color:
 * select-filled-basic-disabled-border-color:
 * select-filled-basic-disabled-icon-color:
 * select-filled-basic-disabled-text-color:
 * select-filled-primary-background-color:
 * select-filled-primary-border-color:
 * select-filled-primary-icon-color:
 * select-filled-primary-text-color:
 * select-filled-primary-placeholder-text-color:
 * select-filled-primary-focus-background-color:
 * select-filled-primary-focus-border-color:
 * select-filled-primary-hover-background-color:
 * select-filled-primary-hover-border-color:
 * select-filled-primary-disabled-background-color:
 * select-filled-primary-disabled-border-color:
 * select-filled-primary-disabled-icon-color:
 * select-filled-primary-disabled-text-color:
 * select-filled-success-background-color:
 * select-filled-success-border-color:
 * select-filled-success-icon-color:
 * select-filled-success-text-color:
 * select-filled-success-placeholder-text-color:
 * select-filled-success-focus-background-color:
 * select-filled-success-focus-border-color:
 * select-filled-success-hover-background-color:
 * select-filled-success-hover-border-color:
 * select-filled-success-disabled-background-color:
 * select-filled-success-disabled-border-color:
 * select-filled-success-disabled-icon-color:
 * select-filled-success-disabled-text-color:
 * select-filled-info-background-color:
 * select-filled-info-border-color:
 * select-filled-info-icon-color:
 * select-filled-info-text-color:
 * select-filled-info-placeholder-text-color:
 * select-filled-info-focus-background-color:
 * select-filled-info-focus-border-color:
 * select-filled-info-hover-background-color:
 * select-filled-info-hover-border-color:
 * select-filled-info-disabled-background-color:
 * select-filled-info-disabled-border-color:
 * select-filled-info-disabled-icon-color:
 * select-filled-info-disabled-text-color:
 * select-filled-warning-background-color:
 * select-filled-warning-border-color:
 * select-filled-warning-icon-color:
 * select-filled-warning-text-color:
 * select-filled-warning-placeholder-text-color:
 * select-filled-warning-focus-background-color:
 * select-filled-warning-focus-border-color:
 * select-filled-warning-hover-background-color:
 * select-filled-warning-hover-border-color:
 * select-filled-warning-disabled-background-color:
 * select-filled-warning-disabled-border-color:
 * select-filled-warning-disabled-icon-color:
 * select-filled-warning-disabled-text-color:
 * select-filled-danger-background-color:
 * select-filled-danger-border-color:
 * select-filled-danger-icon-color:
 * select-filled-danger-text-color:
 * select-filled-danger-placeholder-text-color:
 * select-filled-danger-focus-background-color:
 * select-filled-danger-focus-border-color:
 * select-filled-danger-hover-background-color:
 * select-filled-danger-hover-border-color:
 * select-filled-danger-disabled-background-color:
 * select-filled-danger-disabled-border-color:
 * select-filled-danger-disabled-icon-color:
 * select-filled-danger-disabled-text-color:
 * select-filled-control-background-color:
 * select-filled-control-border-color:
 * select-filled-control-icon-color:
 * select-filled-control-text-color:
 * select-filled-control-placeholder-text-color:
 * select-filled-control-focus-background-color:
 * select-filled-control-focus-border-color:
 * select-filled-control-hover-background-color:
 * select-filled-control-hover-border-color:
 * select-filled-control-disabled-background-color:
 * select-filled-control-disabled-border-color:
 * select-filled-control-disabled-icon-color:
 * select-filled-control-disabled-text-color:
 * select-hero-tiny-padding:
 * select-hero-small-padding:
 * select-hero-medium-padding:
 * select-hero-large-padding:
 * select-hero-giant-padding:
 * select-hero-basic-left-background-color:
 * select-hero-basic-right-background-color:
 * select-hero-basic-icon-color:
 * select-hero-basic-text-color:
 * select-hero-basic-placeholder-text-color:
 * select-hero-basic-focus-left-background-color:
 * select-hero-basic-focus-right-background-color:
 * select-hero-basic-hover-left-background-color:
 * select-hero-basic-hover-right-background-color:
 * select-hero-basic-disabled-background-color:
 * select-hero-basic-disabled-icon-color:
 * select-hero-basic-disabled-text-color:
 * select-hero-primary-left-background-color:
 * select-hero-primary-right-background-color:
 * select-hero-primary-icon-color:
 * select-hero-primary-text-color:
 * select-hero-primary-placeholder-text-color:
 * select-hero-primary-focus-left-background-color:
 * select-hero-primary-focus-right-background-color:
 * select-hero-primary-hover-left-background-color:
 * select-hero-primary-hover-right-background-color:
 * select-hero-primary-disabled-background-color:
 * select-hero-primary-disabled-icon-color:
 * select-hero-primary-disabled-text-color:
 * select-hero-success-left-background-color:
 * select-hero-success-right-background-color:
 * select-hero-success-icon-color:
 * select-hero-success-text-color:
 * select-hero-success-placeholder-text-color:
 * select-hero-success-focus-left-background-color:
 * select-hero-success-focus-right-background-color:
 * select-hero-success-hover-left-background-color:
 * select-hero-success-hover-right-background-color:
 * select-hero-success-disabled-background-color:
 * select-hero-success-disabled-icon-color:
 * select-hero-success-disabled-text-color:
 * select-hero-info-left-background-color:
 * select-hero-info-right-background-color:
 * select-hero-info-icon-color:
 * select-hero-info-text-color:
 * select-hero-info-placeholder-text-color:
 * select-hero-info-focus-left-background-color:
 * select-hero-info-focus-right-background-color:
 * select-hero-info-hover-left-background-color:
 * select-hero-info-hover-right-background-color:
 * select-hero-info-disabled-background-color:
 * select-hero-info-disabled-icon-color:
 * select-hero-info-disabled-text-color:
 * select-hero-warning-left-background-color:
 * select-hero-warning-right-background-color:
 * select-hero-warning-icon-color:
 * select-hero-warning-text-color:
 * select-hero-warning-placeholder-text-color:
 * select-hero-warning-focus-left-background-color:
 * select-hero-warning-focus-right-background-color:
 * select-hero-warning-hover-left-background-color:
 * select-hero-warning-hover-right-background-color:
 * select-hero-warning-disabled-background-color:
 * select-hero-warning-disabled-icon-color:
 * select-hero-warning-disabled-text-color:
 * select-hero-danger-left-background-color:
 * select-hero-danger-right-background-color:
 * select-hero-danger-icon-color:
 * select-hero-danger-text-color:
 * select-hero-danger-placeholder-text-color:
 * select-hero-danger-focus-left-background-color:
 * select-hero-danger-focus-right-background-color:
 * select-hero-danger-hover-left-background-color:
 * select-hero-danger-hover-right-background-color:
 * select-hero-danger-disabled-background-color:
 * select-hero-danger-disabled-icon-color:
 * select-hero-danger-disabled-text-color:
 * select-hero-control-left-background-color:
 * select-hero-control-right-background-color:
 * select-hero-control-icon-color:
 * select-hero-control-text-color:
 * select-hero-control-placeholder-text-color:
 * select-hero-control-focus-left-background-color:
 * select-hero-control-focus-right-background-color:
 * select-hero-control-hover-left-background-color:
 * select-hero-control-hover-right-background-color:
 * select-hero-control-disabled-background-color:
 * select-hero-control-disabled-icon-color:
 * select-hero-control-disabled-text-color:
 * */
var NbSelectComponent = /** @class */ (function () {
    function NbSelectComponent(document, overlay, hostRef, positionBuilder, triggerStrategyBuilder, cd, focusKeyManagerFactoryService, focusMonitor, renderer, zone) {
        this.document = document;
        this.overlay = overlay;
        this.hostRef = hostRef;
        this.positionBuilder = positionBuilder;
        this.triggerStrategyBuilder = triggerStrategyBuilder;
        this.cd = cd;
        this.focusKeyManagerFactoryService = focusKeyManagerFactoryService;
        this.focusMonitor = focusMonitor;
        this.renderer = renderer;
        this.zone = zone;
        /**
         * Select size, available sizes:
         * `tiny`, `small`, `medium` (default), `large`, `giant`
         */
        this.size = 'medium';
        /**
         * Select status (adds specific styles):
         * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`
         */
        this.status = 'basic';
        /**
         * Select shapes: `rectangle` (default), `round`, `semi-round`
         */
        this.shape = 'rectangle';
        /**
         * Select appearances: `outline` (default), `filled`, `hero`
         */
        this.appearance = 'outline';
        this._fullWidth = false;
        /**
         * Renders select placeholder if nothing selected.
         * */
        this.placeholder = '';
        this._multiple = false;
        /**
         * Will be emitted when selected value changes.
         * */
        this.selectedChange = new i0.EventEmitter();
        /**
         * List of selected options.
         * */
        this.selectionModel = [];
        /**
         * Current overlay position because of we have to toggle overlayPosition
         * in [ngClass] direction and this directive can use only string.
         */
        this.overlayPosition = '';
        this.optionsOverlayOffset = 8;
        this.alive = true;
        this.destroy$ = new rxjs.Subject();
        /**
         * Function passed through control value accessor to propagate changes.
         * */
        this.onChange = function () { };
        this.onTouched = function () { };
        /*
         * @docs-private
         **/
        this.status$ = new rxjs.BehaviorSubject(this.status);
        /*
         * @docs-private
         **/
        this.size$ = new rxjs.BehaviorSubject(this.size);
        /*
         * @docs-private
         **/
        this.focused$ = new rxjs.BehaviorSubject(false);
        /*
         * @docs-private
         **/
        this.disabled$ = new rxjs.BehaviorSubject(this.disabled);
    }
    NbSelectComponent_1 = NbSelectComponent;
    Object.defineProperty(NbSelectComponent.prototype, "outline", {
        /**
         * Adds `outline` styles
         */
        get: function () {
            return this.appearance === 'outline';
        },
        set: function (value) {
            if (convertToBoolProperty(value)) {
                this.appearance = 'outline';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "filled", {
        /**
         * Adds `filled` styles
         */
        get: function () {
            return this.appearance === 'filled';
        },
        set: function (value) {
            if (convertToBoolProperty(value)) {
                this.appearance = 'filled';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "hero", {
        /**
         * Adds `hero` styles
         */
        get: function () {
            return this.appearance === 'hero';
        },
        set: function (value) {
            if (convertToBoolProperty(value)) {
                this.appearance = 'hero';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "disabled", {
        /**
         * Disables the select
         */
        get: function () {
            return !!this._disabled;
        },
        set: function (value) {
            this._disabled = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "fullWidth", {
        /**
         * If set element will fill its container
         */
        get: function () {
            return this._fullWidth;
        },
        set: function (value) {
            this._fullWidth = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "selected", {
        get: function () {
            return this.multiple
                ? this.selectionModel.map(function (o) { return o.value; })
                : this.selectionModel[0].value;
        },
        /**
         * Accepts selected item or array of selected items.
         * */
        set: function (value) {
            this.writeValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "multiple", {
        /**
         * Gives capability just write `multiple` over the element.
         * */
        get: function () {
            return this._multiple;
        },
        set: function (value) {
            this._multiple = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "isOpen", {
        /**
         * Determines is select opened.
         * */
        get: function () {
            return this.ref && this.ref.hasAttached();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "isHidden", {
        /**
         * Determines is select hidden.
         * */
        get: function () {
            return !this.isOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "hostWidth", {
        /**
         * Returns width of the select button.
         * */
        get: function () {
            return this.button.nativeElement.getBoundingClientRect().width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "selectButtonClasses", {
        get: function () {
            var classes = [];
            if (!this.selectionModel.length) {
                classes.push('placeholder');
            }
            if (!this.selectionModel.length && !this.placeholder) {
                classes.push('empty');
            }
            if (this.isOpen) {
                classes.push(this.overlayPosition);
            }
            return classes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "selectionView", {
        /**
         * Content rendered in the label.
         * */
        get: function () {
            if (this.selectionModel.length > 1) {
                return this.selectionModel.map(function (option) { return option.content; }).join(', ');
            }
            return this.selectionModel[0].content;
        },
        enumerable: true,
        configurable: true
    });
    NbSelectComponent.prototype.ngOnChanges = function (_a) {
        var disabled = _a.disabled, status = _a.status, size = _a.size;
        if (disabled) {
            this.disabled$.next(disabled.currentValue);
        }
        if (status) {
            this.status$.next(status.currentValue);
        }
        if (size) {
            this.size$.next(size.currentValue);
        }
    };
    NbSelectComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.options.changes
            .pipe(rxjs_operators.startWith(this.options), rxjs_operators.filter(function () { return _this.queue != null && _this.canSelectValue(); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () {
            // Call 'writeValue' when current change detection run is finished.
            // When writing is finished, change detection starts again, since
            // microtasks queue is empty.
            // Prevents ExpressionChangedAfterItHasBeenCheckedError.
            Promise.resolve().then(function () {
                _this.writeValue(_this.queue);
            });
        });
    };
    NbSelectComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.triggerStrategy = this.createTriggerStrategy();
        this.subscribeOnButtonFocus();
        this.subscribeOnTriggers();
        this.subscribeOnOptionClick();
        // TODO: #2254
        this.zone.runOutsideAngular(function () { return setTimeout(function () {
            _this.renderer.addClass(_this.hostRef.nativeElement, 'nb-transition');
        }); });
    };
    NbSelectComponent.prototype.ngOnDestroy = function () {
        this.alive = false;
        this.destroy$.next();
        this.destroy$.complete();
        if (this.ref) {
            this.ref.dispose();
        }
        if (this.triggerStrategy) {
            this.triggerStrategy.destroy();
        }
    };
    NbSelectComponent.prototype.show = function () {
        if (this.isHidden) {
            this.attachToOverlay();
            this.setActiveOption();
            this.cd.markForCheck();
        }
    };
    NbSelectComponent.prototype.hide = function () {
        if (this.isOpen) {
            this.ref.detach();
            this.cd.markForCheck();
        }
    };
    NbSelectComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    NbSelectComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    NbSelectComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        this.cd.markForCheck();
    };
    NbSelectComponent.prototype.writeValue = function (value) {
        if (!this.alive) {
            return;
        }
        if (this.canSelectValue()) {
            this.setSelection(value);
            if (this.selectionModel.length) {
                this.queue = null;
            }
        }
        else {
            this.queue = value;
        }
    };
    /**
     * Selects option or clear all selected options if value is null.
     * */
    NbSelectComponent.prototype.handleOptionClick = function (option) {
        this.queue = null;
        if (option.value == null) {
            this.reset();
        }
        else {
            this.selectOption(option);
        }
        this.cd.markForCheck();
    };
    /**
     * Deselect all selected options.
     * */
    NbSelectComponent.prototype.reset = function () {
        this.selectionModel.forEach(function (option) { return option.deselect(); });
        this.selectionModel = [];
        this.hide();
        this.button.nativeElement.focus();
        this.emitSelected(this.multiple ? [] : null);
    };
    /**
     * Determines how to select option as multiple or single.
     * */
    NbSelectComponent.prototype.selectOption = function (option) {
        if (this.multiple) {
            this.handleMultipleSelect(option);
        }
        else {
            this.handleSingleSelect(option);
        }
    };
    /**
     * Select single option.
     * */
    NbSelectComponent.prototype.handleSingleSelect = function (option) {
        var selected = this.selectionModel.pop();
        if (selected && selected !== option) {
            selected.deselect();
        }
        this.selectionModel = [option];
        option.select();
        this.hide();
        this.button.nativeElement.focus();
        this.emitSelected(option.value);
    };
    /**
     * Select for multiple options.
     * */
    NbSelectComponent.prototype.handleMultipleSelect = function (option) {
        if (option.selected) {
            this.selectionModel = this.selectionModel.filter(function (s) { return s.value !== option.value; });
            option.deselect();
        }
        else {
            this.selectionModel.push(option);
            option.select();
        }
        this.emitSelected(this.selectionModel.map(function (opt) { return opt.value; }));
    };
    NbSelectComponent.prototype.attachToOverlay = function () {
        if (!this.ref) {
            this.createOverlay();
            this.subscribeOnPositionChange();
            this.createKeyManager();
            this.subscribeOnOverlayKeys();
        }
        this.ref.attach(this.portal);
    };
    NbSelectComponent.prototype.setActiveOption = function () {
        if (this.selectionModel.length) {
            this.keyManager.setActiveItem(this.selectionModel[0]);
        }
        else {
            this.keyManager.setFirstItemActive();
        }
    };
    NbSelectComponent.prototype.createOverlay = function () {
        var scrollStrategy = this.createScrollStrategy();
        this.positionStrategy = this.createPositionStrategy();
        this.ref = this.overlay.create({ positionStrategy: this.positionStrategy, scrollStrategy: scrollStrategy });
    };
    NbSelectComponent.prototype.createKeyManager = function () {
        this.keyManager = this.focusKeyManagerFactoryService.create(this.options).withTypeAhead(200);
    };
    NbSelectComponent.prototype.createPositionStrategy = function () {
        return this.positionBuilder
            .connectedTo(this.button)
            .position(exports.NbPosition.BOTTOM)
            .offset(this.optionsOverlayOffset)
            .adjustment(exports.NbAdjustment.VERTICAL);
    };
    NbSelectComponent.prototype.createScrollStrategy = function () {
        return this.overlay.scrollStrategies.block();
    };
    NbSelectComponent.prototype.createTriggerStrategy = function () {
        var _this = this;
        return this.triggerStrategyBuilder
            .trigger(exports.NbTrigger.CLICK)
            .host(this.hostRef.nativeElement)
            .container(function () { return _this.getContainer(); })
            .build();
    };
    NbSelectComponent.prototype.subscribeOnTriggers = function () {
        var _this = this;
        this.triggerStrategy.show$.subscribe(function () { return _this.show(); });
        this.triggerStrategy.hide$
            .pipe(rxjs_operators.filter(function () { return _this.isOpen; }))
            .subscribe(function ($event) {
            _this.hide();
            if (!_this.isClickedWithinComponent($event)) {
                _this.onTouched();
            }
        });
    };
    NbSelectComponent.prototype.subscribeOnPositionChange = function () {
        var _this = this;
        this.positionStrategy.positionChange
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (position) {
            _this.overlayPosition = position;
            _this.cd.detectChanges();
        });
    };
    NbSelectComponent.prototype.subscribeOnOptionClick = function () {
        var _this = this;
        /**
         * If the user changes provided options list in the runtime we have to handle this
         * and resubscribe on options selection changes event.
         * Otherwise, the user will not be able to select new options.
         * */
        this.options.changes
            .pipe(rxjs_operators.startWith(this.options), rxjs_operators.switchMap(function (options) {
            return rxjs.merge.apply(void 0, options.map(function (option) { return option.click; }));
        }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (clickedOption) { return _this.handleOptionClick(clickedOption); });
    };
    NbSelectComponent.prototype.subscribeOnOverlayKeys = function () {
        var _this = this;
        this.ref.keydownEvents()
            .pipe(rxjs_operators.filter(function () { return _this.isOpen; }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (event) {
            if (event.keyCode === _angular_cdk_keycodes.ESCAPE) {
                _this.button.nativeElement.focus();
                _this.hide();
            }
            else {
                _this.keyManager.onKeydown(event);
            }
        });
        this.keyManager.tabOut
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () {
            _this.hide();
            _this.onTouched();
        });
    };
    NbSelectComponent.prototype.subscribeOnButtonFocus = function () {
        var _this = this;
        this.focusMonitor.monitor(this.button)
            .pipe(rxjs_operators.map(function (origin) { return !!origin; }), rxjs_operators.finalize(function () { return _this.focusMonitor.stopMonitoring(_this.button); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(this.focused$);
    };
    NbSelectComponent.prototype.getContainer = function () {
        return this.ref && this.ref.hasAttached() && {
            location: {
                nativeElement: this.ref.overlayElement,
            },
        };
    };
    /**
     * Propagate selected value.
     * */
    NbSelectComponent.prototype.emitSelected = function (selected) {
        this.onChange(selected);
        this.selectedChange.emit(selected);
    };
    /**
     * Set selected value in model.
     * */
    NbSelectComponent.prototype.setSelection = function (value) {
        var _this = this;
        var isArray = Array.isArray(value);
        if (this.multiple && !isArray) {
            throw new Error('Can\'t assign single value if select is marked as multiple');
        }
        if (!this.multiple && isArray) {
            throw new Error('Can\'t assign array if select is not marked as multiple');
        }
        var previouslySelectedOptions = this.selectionModel;
        this.selectionModel = [];
        if (isArray) {
            value.forEach(function (option) { return _this.selectValue(option); });
        }
        else {
            this.selectValue(value);
        }
        // find options which were selected before and trigger deselect
        previouslySelectedOptions
            .filter(function (option) { return !_this.selectionModel.includes(option); })
            .forEach(function (option) { return option.deselect(); });
        this.cd.markForCheck();
    };
    /**
     * Selects value.
     * */
    NbSelectComponent.prototype.selectValue = function (value) {
        var corresponding = this.options.find(function (option) { return option.value === value; });
        if (corresponding) {
            corresponding.select();
            this.selectionModel.push(corresponding);
        }
    };
    /**
     * Sets touched if focus moved outside of button and overlay,
     * ignoring the case when focus moved to options overlay.
     */
    NbSelectComponent.prototype.trySetTouched = function () {
        if (this.isHidden) {
            this.onTouched();
        }
    };
    NbSelectComponent.prototype.isClickedWithinComponent = function ($event) {
        return this.hostRef.nativeElement === $event.target || this.hostRef.nativeElement.contains($event.target);
    };
    NbSelectComponent.prototype.canSelectValue = function () {
        return !!(this.options && this.options.length);
    };
    Object.defineProperty(NbSelectComponent.prototype, "tiny", {
        get: function () {
            return this.size === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "small", {
        get: function () {
            return this.size === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "medium", {
        get: function () {
            return this.size === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "large", {
        get: function () {
            return this.size === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "giant", {
        get: function () {
            return this.size === 'giant';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "primary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "info", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "success", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "warning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "danger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "basic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "control", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "rectangle", {
        get: function () {
            return this.shape === 'rectangle';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "round", {
        get: function () {
            return this.shape === 'round';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbSelectComponent.prototype, "semiRound", {
        get: function () {
            return this.shape === 'semi-round';
        },
        enumerable: true,
        configurable: true
    });
    var NbSelectComponent_1;
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSelectComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSelectComponent.prototype, "status", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSelectComponent.prototype, "shape", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSelectComponent.prototype, "appearance", void 0);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.appearance-outline'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSelectComponent.prototype, "outline", null);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.appearance-filled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSelectComponent.prototype, "filled", null);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.appearance-hero'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSelectComponent.prototype, "hero", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSelectComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.full-width'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSelectComponent.prototype, "fullWidth", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSelectComponent.prototype, "placeholder", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbSelectComponent.prototype, "selected", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbSelectComponent.prototype, "multiple", null);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbSelectComponent.prototype, "selectedChange", void 0);
    tslib.__decorate([
        i0.ContentChildren(NbOptionComponent, { descendants: true }),
        tslib.__metadata("design:type", i0.QueryList)
    ], NbSelectComponent.prototype, "options", void 0);
    tslib.__decorate([
        i0.ContentChild(NbSelectLabelComponent),
        tslib.__metadata("design:type", Object)
    ], NbSelectComponent.prototype, "customLabel", void 0);
    tslib.__decorate([
        i0.ViewChild(NbPortalDirective),
        tslib.__metadata("design:type", NbPortalDirective)
    ], NbSelectComponent.prototype, "portal", void 0);
    tslib.__decorate([
        i0.ViewChild('selectButton', { read: i0.ElementRef }),
        tslib.__metadata("design:type", i0.ElementRef)
    ], NbSelectComponent.prototype, "button", void 0);
    tslib.__decorate([
        i0.HostBinding('class.open'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "isOpen", null);
    tslib.__decorate([
        i0.HostBinding('class.size-tiny'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "tiny", null);
    tslib.__decorate([
        i0.HostBinding('class.size-small'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "small", null);
    tslib.__decorate([
        i0.HostBinding('class.size-medium'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "medium", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "large", null);
    tslib.__decorate([
        i0.HostBinding('class.size-giant'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "giant", null);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "control", null);
    tslib.__decorate([
        i0.HostBinding('class.shape-rectangle'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "rectangle", null);
    tslib.__decorate([
        i0.HostBinding('class.shape-round'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "round", null);
    tslib.__decorate([
        i0.HostBinding('class.shape-semi-round'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbSelectComponent.prototype, "semiRound", null);
    NbSelectComponent = NbSelectComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'nb-select',
            template: "<button [disabled]=\"disabled\"\n        [ngClass]=\"selectButtonClasses\"\n        (blur)=\"trySetTouched()\"\n        (keydown.arrowDown)=\"show()\"\n        (keydown.arrowUp)=\"show()\"\n        class=\"select-button\"\n        type=\"button\"\n        #selectButton>\n\n    <ng-container *ngIf=\"selectionModel.length; else placeholderTemplate\">\n      <ng-container *ngIf=\"customLabel; else defaultSelectionTemplate\">\n        <ng-content select=\"nb-select-label\"></ng-content>\n      </ng-container>\n\n      <ng-template #defaultSelectionTemplate>{{ selectionView }}</ng-template>\n    </ng-container>\n\n    <ng-template #placeholderTemplate>{{ placeholder }}</ng-template>\n\n    <nb-icon icon=\"chevron-down-outline\" pack=\"nebular-essentials\" (click)=\"disabled && $event.stopPropagation()\" aria-hidden=\"true\">\n    </nb-icon>\n</button>\n\n<nb-option-list *nbPortal [size]=\"size\" [position]=\"overlayPosition\" [style.width.px]=\"hostWidth\">\n  <ng-content select=\"nb-option, nb-option-group\"></ng-content>\n</nb-option-list>\n",
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: _angular_forms.NG_VALUE_ACCESSOR,
                    useExisting: i0.forwardRef(function () { return NbSelectComponent_1; }),
                    multi: true,
                },
                { provide: NB_SELECT_INJECTION_TOKEN, useExisting: NbSelectComponent_1 },
                { provide: NbFormFieldControl, useExisting: NbSelectComponent_1 },
                { provide: NbFormFieldControlConfig, useFactory: nbSelectFormFieldControlConfigFactory },
            ],
            styles: ["/*!\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */:host{display:inline-block;max-width:100%}[dir=ltr] :host .select-button{text-align:left}[dir=ltr] :host .select-button nb-icon{right:0.2em}[dir=rtl] :host .select-button{text-align:right}[dir=rtl] :host .select-button nb-icon{left:0.2em}:host(.full-width){width:100%}:host(.nb-transition) .select-button{transition-duration:0.15s;transition-property:background-color,border-color,border-radius,box-shadow,color;transition-timing-function:ease-in}.select-button{position:relative;width:100%;overflow:hidden;text-overflow:ellipsis;text-transform:none;white-space:nowrap}nb-icon{font-size:1.5em;position:absolute;top:50%;transform:translateY(-50%);transition-duration:0.15s;transition-property:transform;transition-timing-function:ease-in}[dir=ltr] nb-icon{right:.5rem}[dir=rtl] nb-icon{left:.5rem}:host(.open) nb-icon{transform:translateY(-50%) rotate(180deg)}\n"]
        }),
        tslib.__param(0, i0.Inject(NB_DOCUMENT)),
        tslib.__metadata("design:paramtypes", [Object, NbOverlayService,
            i0.ElementRef,
            NbPositionBuilderService,
            NbTriggerStrategyBuilderService,
            i0.ChangeDetectorRef,
            NbFocusKeyManagerFactoryService,
            NbFocusMonitor,
            i0.Renderer2,
            i0.NgZone])
    ], NbSelectComponent);
    return NbSelectComponent;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * NbOptionGroupComponent
 *
 * @styles
 *
 * option-group-text-color:
 * option-group-tiny-start-padding:
 * option-group-small-start-padding:
 * option-group-medium-start-padding:
 * option-group-large-start-padding:
 * option-group-giant-start-padding:
 **/
var NbOptionGroupComponent = /** @class */ (function () {
    function NbOptionGroupComponent() {
        this.destroy$ = new rxjs.Subject();
        this._disabled = false;
    }
    Object.defineProperty(NbOptionGroupComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            this._disabled = convertToBoolProperty(value);
            if (this.options) {
                this.updateOptionsDisabledState();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionGroupComponent.prototype, "disabledAttribute", {
        get: function () {
            return this.disabled ? '' : null;
        },
        enumerable: true,
        configurable: true
    });
    NbOptionGroupComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.options.length) {
            this.asyncUpdateOptionsDisabledState();
        }
        this.options.changes
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.asyncUpdateOptionsDisabledState(); });
    };
    NbOptionGroupComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * Sets disabled state for each option to current group disabled state.
     */
    NbOptionGroupComponent.prototype.updateOptionsDisabledState = function () {
        var _this = this;
        this.options.forEach(function (option) { return option.setDisabledByGroupState(_this.disabled); });
    };
    /**
     * Updates options disabled state after promise resolution.
     * This way change detection will be triggered after options state updated.
     * Use this method when updating options during change detection run (e.g. QueryList.changes, lifecycle hooks).
     */
    NbOptionGroupComponent.prototype.asyncUpdateOptionsDisabledState = function () {
        var _this = this;
        Promise.resolve().then(function () { return _this.updateOptionsDisabledState(); });
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbOptionGroupComponent.prototype, "title", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbOptionGroupComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.HostBinding('attr.disabled'),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionGroupComponent.prototype, "disabledAttribute", null);
    tslib.__decorate([
        i0.ContentChildren(NbOptionComponent, { descendants: true }),
        tslib.__metadata("design:type", i0.QueryList)
    ], NbOptionGroupComponent.prototype, "options", void 0);
    NbOptionGroupComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-option-group',
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            template: "\n    <span class=\"option-group-title\">{{ title }}</span>\n    <ng-content select=\"nb-option, ng-container\"></ng-content>\n  ",
            styles: [":host{display:block}.option-group-title{display:block}\n"]
        })
    ], NbOptionGroupComponent);
    return NbOptionGroupComponent;
}());

/**
 * The `NbOptionListComponent` is container component for `NbOptionGroupComponent` and`NbOptionComponent` list.
 *
 * @styles
 *
 * option-list-max-height:
 * option-list-shadow:
 * option-list-background-color:
 * option-list-border-style:
 * option-list-border-width:
 * option-list-border-color:
 * option-list-border-radius:
 * option-list-adjacent-border-color:
 * option-list-adjacent-border-style:
 * option-list-adjacent-border-width:
 * */
var NbOptionListComponent = /** @class */ (function () {
    function NbOptionListComponent() {
        this.size = 'medium';
    }
    Object.defineProperty(NbOptionListComponent.prototype, "positionTop", {
        get: function () {
            return this.position === exports.NbPosition.TOP;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionListComponent.prototype, "positionBottom", {
        get: function () {
            return this.position === exports.NbPosition.BOTTOM;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionListComponent.prototype, "sizeTiny", {
        get: function () {
            return this.size === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionListComponent.prototype, "sizeSmall", {
        get: function () {
            return this.size === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionListComponent.prototype, "sizeMedium", {
        get: function () {
            return this.size === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionListComponent.prototype, "sizeLarge", {
        get: function () {
            return this.size === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbOptionListComponent.prototype, "sizeGiant", {
        get: function () {
            return this.size === 'giant';
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbOptionListComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbOptionListComponent.prototype, "position", void 0);
    tslib.__decorate([
        i0.HostBinding('class.position-top'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionListComponent.prototype, "positionTop", null);
    tslib.__decorate([
        i0.HostBinding('class.position-bottom'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionListComponent.prototype, "positionBottom", null);
    tslib.__decorate([
        i0.HostBinding('class.size-tiny'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionListComponent.prototype, "sizeTiny", null);
    tslib.__decorate([
        i0.HostBinding('class.size-small'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionListComponent.prototype, "sizeSmall", null);
    tslib.__decorate([
        i0.HostBinding('class.size-medium'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionListComponent.prototype, "sizeMedium", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionListComponent.prototype, "sizeLarge", null);
    tslib.__decorate([
        i0.HostBinding('class.size-giant'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbOptionListComponent.prototype, "sizeGiant", null);
    NbOptionListComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-option-list',
            template: "\n    <ul class=\"option-list\">\n      <ng-content></ng-content>\n    </ul>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        })
    ], NbOptionListComponent);
    return NbOptionListComponent;
}());

var NB_OPTION_LIST_COMPONENTS = [
    NbOptionListComponent,
    NbOptionComponent,
    NbOptionGroupComponent,
];
var NbOptionModule = /** @class */ (function () {
    function NbOptionModule() {
    }
    NbOptionModule = tslib.__decorate([
        i0.NgModule({
            declarations: tslib.__spreadArrays(NB_OPTION_LIST_COMPONENTS),
            imports: [
                _angular_common.CommonModule,
                NbCheckboxModule,
            ],
            exports: tslib.__spreadArrays(NB_OPTION_LIST_COMPONENTS),
        })
    ], NbOptionModule);
    return NbOptionModule;
}());

var NB_SELECT_COMPONENTS = [
    NbSelectComponent,
    NbSelectLabelComponent,
];
var NbSelectModule = /** @class */ (function () {
    function NbSelectModule() {
    }
    NbSelectModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                NbSharedModule,
                NbOverlayModule,
                NbButtonModule,
                NbInputModule,
                NbCardModule,
                NbIconModule,
                NbOptionModule,
            ],
            exports: tslib.__spreadArrays(NB_SELECT_COMPONENTS, [
                NbOptionModule,
            ]),
            declarations: tslib.__spreadArrays(NB_SELECT_COMPONENTS),
        })
    ], NbSelectModule);
    return NbSelectModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
// Component class scoped counter for aria attributes.
var lastAutocompleteId = 0;
/**
 * The `NbAutocompleteComponent` overlay component.
 * Provides an `NbOptionList` overlay component.
 * */
var NbAutocompleteComponent = /** @class */ (function () {
    function NbAutocompleteComponent(cd) {
        this.cd = cd;
        this.destroy$ = new rxjs.Subject();
        /**
         * Component scoped id for aria attributes.
         * */
        this.id = "nb-autocomplete-" + lastAutocompleteId++;
        /**
         * @docs-private
         * Current overlay position because of we have to toggle overlayPosition
         * in [ngClass] direction.
         */
        this._overlayPosition = '';
        /**
         * Autocomplete size, available sizes:
         * `tiny`, `small`, `medium` (default), `large`, `giant`
         */
        this.size = 'medium';
        /**
         * Flag passed as input to always make first option active.
         * */
        this.activeFirst = false;
        /**
         * Will be emitted when selected value changes.
         * */
        this.selectedChange = new i0.EventEmitter();
    }
    Object.defineProperty(NbAutocompleteComponent.prototype, "overlayPosition", {
        get: function () {
            return this._overlayPosition;
        },
        set: function (value) {
            this._overlayPosition = value;
            // Need run change detection after first set from NbAutocompleteDirective
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAutocompleteComponent.prototype, "hostWidth", {
        /**
         * Returns width of the input.
         * */
        get: function () {
            return this.hostRef.nativeElement.getBoundingClientRect().width;
        },
        enumerable: true,
        configurable: true
    });
    NbAutocompleteComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.options.changes
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.cd.detectChanges(); });
    };
    NbAutocompleteComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * Autocomplete knows nothing about host html input element.
     * So, attach method set input hostRef for styling.
     * */
    NbAutocompleteComponent.prototype.setHost = function (hostRef) {
        this.hostRef = hostRef;
    };
    /**
     * Propagate selected value.
     * */
    NbAutocompleteComponent.prototype.emitSelected = function (selected) {
        this.selectedChange.emit(selected);
    };
    Object.defineProperty(NbAutocompleteComponent.prototype, "tiny", {
        get: function () {
            return this.size === 'tiny';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAutocompleteComponent.prototype, "small", {
        get: function () {
            return this.size === 'small';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAutocompleteComponent.prototype, "medium", {
        get: function () {
            return this.size === 'medium';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAutocompleteComponent.prototype, "large", {
        get: function () {
            return this.size === 'large';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAutocompleteComponent.prototype, "giant", {
        get: function () {
            return this.size === 'giant';
        },
        enumerable: true,
        configurable: true
    });
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Function)
    ], NbAutocompleteComponent.prototype, "handleDisplayFn", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbAutocompleteComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbAutocompleteComponent.prototype, "activeFirst", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbAutocompleteComponent.prototype, "selectedChange", void 0);
    tslib.__decorate([
        i0.ContentChildren(NbOptionComponent, { descendants: true }),
        tslib.__metadata("design:type", i0.QueryList)
    ], NbAutocompleteComponent.prototype, "options", void 0);
    tslib.__decorate([
        i0.ViewChild(NbPortalDirective),
        tslib.__metadata("design:type", NbPortalDirective)
    ], NbAutocompleteComponent.prototype, "portal", void 0);
    tslib.__decorate([
        i0.HostBinding('class.size-tiny'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbAutocompleteComponent.prototype, "tiny", null);
    tslib.__decorate([
        i0.HostBinding('class.size-small'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbAutocompleteComponent.prototype, "small", null);
    tslib.__decorate([
        i0.HostBinding('class.size-medium'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbAutocompleteComponent.prototype, "medium", null);
    tslib.__decorate([
        i0.HostBinding('class.size-large'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbAutocompleteComponent.prototype, "large", null);
    tslib.__decorate([
        i0.HostBinding('class.size-giant'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbAutocompleteComponent.prototype, "giant", null);
    NbAutocompleteComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-autocomplete',
            template: "<nb-option-list *nbPortal\n                [size]=\"size\"\n                [position]=\"overlayPosition\"\n                [style.width.px]=\"hostWidth\"\n                role=\"listbox\"\n                [id]=\"id\"\n                [class.empty]=\"!options?.length\">\n  <ng-content select=\"nb-option, nb-option-group\"></ng-content>\n</nb-option-list>\n",
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: [":host(:hover){cursor:pointer}nb-option-list.empty{border:none}\n"]
        }),
        tslib.__metadata("design:paramtypes", [i0.ChangeDetectorRef])
    ], NbAutocompleteComponent);
    return NbAutocompleteComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * The `NbAutocompleteDirective` provides a capability to expand input with
 * `NbAutocompleteComponent` overlay containing options to select and fill input with.
 *
 * @stacked-example(Showcase, autocomplete/autocomplete-showcase.component)
 *
 * ### Installation
 *
 * Import `NbAutocompleteModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbAutocompleteModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * You can bind control with form controls or ngModel.
 *
 * @stacked-example(Autocomplete form binding, autocomplete/autocomplete-form.component)
 *
 * Options in the autocomplete may be grouped using `nb-option-group` component.
 *
 * @stacked-example(Grouping, autocomplete/autocomplete-group.component)
 *
 * Autocomplete may change selected option value via provided function.
 *
 * @stacked-example(Custom display, autocomplete/autocomplete-custom-display.component)
 *
 * Also, autocomplete may make first option in option list active automatically.
 *
 * @stacked-example(Active first, autocomplete/autocomplete-active-first.component)
 *
 * */
var NbAutocompleteDirective = /** @class */ (function () {
    function NbAutocompleteDirective(hostRef, overlay, cd, triggerStrategyBuilder, positionBuilder, activeDescendantKeyManagerFactory) {
        this.hostRef = hostRef;
        this.overlay = overlay;
        this.cd = cd;
        this.triggerStrategyBuilder = triggerStrategyBuilder;
        this.positionBuilder = positionBuilder;
        this.activeDescendantKeyManagerFactory = activeDescendantKeyManagerFactory;
        this.overlayOffset = 8;
        this.destroy$ = new rxjs.Subject();
        this._onChange = function () { };
        this._onTouched = function () { };
        this.role = 'combobox';
        this.ariaAutocomplete = 'list';
        this.hasPopup = 'true';
    }
    NbAutocompleteDirective_1 = NbAutocompleteDirective;
    Object.defineProperty(NbAutocompleteDirective.prototype, "isOpen", {
        /**
         * Determines is autocomplete overlay opened.
         * */
        get: function () {
            return this.overlayRef && this.overlayRef.hasAttached();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAutocompleteDirective.prototype, "isClosed", {
        /**
         * Determines is autocomplete overlay closed.
         * */
        get: function () {
            return !this.isOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAutocompleteDirective.prototype, "autocomplete", {
        /**
         * Provides autocomplete component.
         * */
        get: function () {
            return this._autocomplete;
        },
        set: function (autocomplete) {
            this._autocomplete = autocomplete;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAutocompleteDirective.prototype, "top", {
        get: function () {
            return this.isOpen && this.autocomplete.options.length && this.autocomplete.overlayPosition === exports.NbPosition.TOP;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAutocompleteDirective.prototype, "bottom", {
        get: function () {
            return this.isOpen && this.autocomplete.options.length && this.autocomplete.overlayPosition === exports.NbPosition.BOTTOM;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAutocompleteDirective.prototype, "ariaExpanded", {
        get: function () {
            return this.isOpen && this.isOpen.toString();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAutocompleteDirective.prototype, "ariaOwns", {
        get: function () {
            return this.isOpen ? this.autocomplete.id : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbAutocompleteDirective.prototype, "ariaActiveDescendant", {
        get: function () {
            return (this.isOpen && this.keyManager.activeItem) ? this.keyManager.activeItem.id : null;
        },
        enumerable: true,
        configurable: true
    });
    NbAutocompleteDirective.prototype.ngAfterViewInit = function () {
        this.triggerStrategy = this.createTriggerStrategy();
        this.subscribeOnTriggers();
    };
    NbAutocompleteDirective.prototype.ngOnDestroy = function () {
        if (this.triggerStrategy) {
            this.triggerStrategy.destroy();
        }
        if (this.positionStrategy) {
            this.positionStrategy.dispose();
        }
        if (this.overlayRef) {
            this.overlayRef.dispose();
        }
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbAutocompleteDirective.prototype.handleInput = function () {
        var currentValue = this.hostRef.nativeElement.value;
        this._onChange(currentValue);
        this.setHostInputValue(this.getDisplayValue(currentValue));
        this.show();
    };
    NbAutocompleteDirective.prototype.handleKeydown = function () {
        this.show();
    };
    NbAutocompleteDirective.prototype.handleBlur = function () {
        this._onTouched();
    };
    NbAutocompleteDirective.prototype.show = function () {
        if (this.isClosed) {
            this.attachToOverlay();
            this.setActiveItem();
        }
    };
    NbAutocompleteDirective.prototype.hide = function () {
        if (this.isOpen) {
            this.overlayRef.detach();
            // Need to update class via @HostBinding
            this.cd.markForCheck();
        }
    };
    NbAutocompleteDirective.prototype.writeValue = function (value) {
        this.handleInputValueUpdate(value);
    };
    NbAutocompleteDirective.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    NbAutocompleteDirective.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    NbAutocompleteDirective.prototype.subscribeOnOptionClick = function () {
        var _this = this;
        /**
         * If the user changes provided options list in the runtime we have to handle this
         * and resubscribe on options selection changes event.
         * Otherwise, the user will not be able to select new options.
         * */
        this.autocomplete.options.changes
            .pipe(rxjs_operators.tap(function () { return _this.setActiveItem(); }), rxjs_operators.startWith(this.autocomplete.options), rxjs_operators.switchMap(function (options) {
            return rxjs.merge.apply(void 0, options.map(function (option) { return option.click; }));
        }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (clickedOption) { return _this.handleInputValueUpdate(clickedOption.value); });
    };
    NbAutocompleteDirective.prototype.subscribeOnPositionChange = function () {
        var _this = this;
        this.positionStrategy.positionChange
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (position) {
            _this.autocomplete.overlayPosition = position;
            _this.cd.detectChanges();
        });
    };
    NbAutocompleteDirective.prototype.getActiveItem = function () {
        return this.keyManager.activeItem;
    };
    NbAutocompleteDirective.prototype.setupAutocomplete = function () {
        this.autocomplete.setHost(this.hostRef);
    };
    NbAutocompleteDirective.prototype.getDisplayValue = function (value) {
        var displayFn = this.autocomplete.handleDisplayFn;
        return displayFn ? displayFn(value) : value;
    };
    NbAutocompleteDirective.prototype.getContainer = function () {
        return this.overlayRef && this.isOpen && {
            location: {
                nativeElement: this.overlayRef.overlayElement,
            },
        };
    };
    NbAutocompleteDirective.prototype.handleInputValueUpdate = function (value) {
        if (value === undefined || value === null) {
            return;
        }
        this.setHostInputValue(value);
        this._onChange(value);
        this.hostRef.nativeElement.focus();
        this.autocomplete.emitSelected(value);
        this.hide();
    };
    NbAutocompleteDirective.prototype.subscribeOnTriggers = function () {
        var _this = this;
        this.triggerStrategy.show$
            .pipe(rxjs_operators.filter(function () { return _this.isClosed; }))
            .subscribe(function () { return _this.show(); });
        this.triggerStrategy.hide$
            .pipe(rxjs_operators.filter(function () { return _this.isOpen; }))
            .subscribe(function () { return _this.hide(); });
    };
    NbAutocompleteDirective.prototype.createTriggerStrategy = function () {
        var _this = this;
        return this.triggerStrategyBuilder
            .trigger(exports.NbTrigger.FOCUS)
            .host(this.hostRef.nativeElement)
            .container(function () { return _this.getContainer(); })
            .build();
    };
    NbAutocompleteDirective.prototype.createKeyManager = function () {
        this.keyManager = this.activeDescendantKeyManagerFactory
            .create(this.autocomplete.options);
    };
    NbAutocompleteDirective.prototype.setHostInputValue = function (value) {
        this.hostRef.nativeElement.value = this.getDisplayValue(value);
    };
    NbAutocompleteDirective.prototype.createPositionStrategy = function () {
        return this.positionBuilder
            .connectedTo(this.hostRef)
            .position(exports.NbPosition.BOTTOM)
            .offset(this.overlayOffset)
            .adjustment(exports.NbAdjustment.VERTICAL);
    };
    NbAutocompleteDirective.prototype.subscribeOnOverlayKeys = function () {
        var _this = this;
        this.overlayRef.keydownEvents()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (event) {
            if (event.keyCode === _angular_cdk_keycodes.ESCAPE && _this.isOpen) {
                event.preventDefault();
                _this.hostRef.nativeElement.focus();
                _this.hide();
            }
            else if (event.keyCode === _angular_cdk_keycodes.ENTER) {
                event.preventDefault();
                var activeItem = _this.getActiveItem();
                if (!activeItem) {
                    return;
                }
                _this.handleInputValueUpdate(activeItem.value);
            }
            else {
                _this.keyManager.onKeydown(event);
            }
        });
    };
    NbAutocompleteDirective.prototype.setActiveItem = function () {
        // If autocomplete has activeFirst input set to true,
        // keyManager set first option active, otherwise - reset active option.
        var mode = this.autocomplete.activeFirst
            ? NbKeyManagerActiveItemMode.FIRST_ACTIVE
            : NbKeyManagerActiveItemMode.RESET_ACTIVE;
        this.keyManager.setActiveItem(mode);
        this.cd.detectChanges();
    };
    NbAutocompleteDirective.prototype.attachToOverlay = function () {
        if (!this.overlayRef) {
            this.setupAutocomplete();
            this.initOverlay();
        }
        this.overlayRef.attach(this.autocomplete.portal);
    };
    NbAutocompleteDirective.prototype.createOverlay = function () {
        var scrollStrategy = this.createScrollStrategy();
        this.overlayRef = this.overlay.create({ positionStrategy: this.positionStrategy, scrollStrategy: scrollStrategy });
    };
    NbAutocompleteDirective.prototype.initOverlay = function () {
        this.positionStrategy = this.createPositionStrategy();
        this.createKeyManager();
        this.subscribeOnPositionChange();
        this.subscribeOnOptionClick();
        this.checkOverlayVisibility();
        this.createOverlay();
        this.subscribeOnOverlayKeys();
    };
    NbAutocompleteDirective.prototype.checkOverlayVisibility = function () {
        var _this = this;
        this.autocomplete.options.changes
            .pipe(rxjs_operators.takeUntil(this.destroy$)).subscribe(function () {
            if (!_this.autocomplete.options.length) {
                _this.hide();
            }
        });
    };
    NbAutocompleteDirective.prototype.createScrollStrategy = function () {
        return this.overlay.scrollStrategies.block();
    };
    var NbAutocompleteDirective_1;
    tslib.__decorate([
        i0.Input('nbAutocomplete'),
        tslib.__metadata("design:type", NbAutocompleteComponent),
        tslib.__metadata("design:paramtypes", [NbAutocompleteComponent])
    ], NbAutocompleteDirective.prototype, "autocomplete", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-autocomplete-position-top'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbAutocompleteDirective.prototype, "top", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-autocomplete-position-bottom'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbAutocompleteDirective.prototype, "bottom", null);
    tslib.__decorate([
        i0.HostBinding('attr.role'),
        tslib.__metadata("design:type", String)
    ], NbAutocompleteDirective.prototype, "role", void 0);
    tslib.__decorate([
        i0.HostBinding('attr.aria-autocomplete'),
        tslib.__metadata("design:type", String)
    ], NbAutocompleteDirective.prototype, "ariaAutocomplete", void 0);
    tslib.__decorate([
        i0.HostBinding('attr.haspopup'),
        tslib.__metadata("design:type", String)
    ], NbAutocompleteDirective.prototype, "hasPopup", void 0);
    tslib.__decorate([
        i0.HostBinding('attr.aria-expanded'),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [])
    ], NbAutocompleteDirective.prototype, "ariaExpanded", null);
    tslib.__decorate([
        i0.HostBinding('attr.aria-owns'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAutocompleteDirective.prototype, "ariaOwns", null);
    tslib.__decorate([
        i0.HostBinding('attr.aria-activedescendant'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbAutocompleteDirective.prototype, "ariaActiveDescendant", null);
    tslib.__decorate([
        i0.HostListener('input'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbAutocompleteDirective.prototype, "handleInput", null);
    tslib.__decorate([
        i0.HostListener('keydown.arrowDown'),
        i0.HostListener('keydown.arrowUp'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbAutocompleteDirective.prototype, "handleKeydown", null);
    tslib.__decorate([
        i0.HostListener('blur'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbAutocompleteDirective.prototype, "handleBlur", null);
    NbAutocompleteDirective = NbAutocompleteDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: 'input[nbAutocomplete]',
            providers: [{
                    provide: _angular_forms.NG_VALUE_ACCESSOR,
                    useExisting: i0.forwardRef(function () { return NbAutocompleteDirective_1; }),
                    multi: true,
                }],
        }),
        tslib.__metadata("design:paramtypes", [i0.ElementRef,
            NbOverlayService,
            i0.ChangeDetectorRef,
            NbTriggerStrategyBuilderService,
            NbPositionBuilderService,
            NbActiveDescendantKeyManagerFactoryService])
    ], NbAutocompleteDirective);
    return NbAutocompleteDirective;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_AUTOCOMPLETE_COMPONENTS = [
    NbAutocompleteComponent,
    NbAutocompleteDirective,
];
var NbAutocompleteModule = /** @class */ (function () {
    function NbAutocompleteModule() {
    }
    NbAutocompleteModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                _angular_common.CommonModule,
                _angular_forms.FormsModule,
                NbOverlayModule,
                NbCardModule,
                NbOptionModule,
            ],
            exports: tslib.__spreadArrays(NB_AUTOCOMPLETE_COMPONENTS, [
                NbOptionModule,
            ]),
            declarations: tslib.__spreadArrays(NB_AUTOCOMPLETE_COMPONENTS),
        })
    ], NbAutocompleteModule);
    return NbAutocompleteModule;
}());

(function (NbWindowState) {
    NbWindowState["MINIMIZED"] = "minimized";
    NbWindowState["MAXIMIZED"] = "maximized";
    NbWindowState["FULL_SCREEN"] = "full-screen";
})(exports.NbWindowState || (exports.NbWindowState = {}));
/**
 * Window configuration options.
 */
var NbWindowConfig = /** @class */ (function () {
    function NbWindowConfig() {
        var configs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            configs[_i] = arguments[_i];
        }
        /**
         * Window title.
         */
        this.title = '';
        /**
         * Initial window state. Full screen by default.
         */
        this.initialState = exports.NbWindowState.FULL_SCREEN;
        /**
         * If true than backdrop will be rendered behind window.
         * By default set to true.
         */
        this.hasBackdrop = true;
        /**
         * If set to true mouse clicks on backdrop will close a window.
         * Default is true.
         */
        this.closeOnBackdropClick = true;
        /**
         * If true then escape press will close a window.
         * Default is true.
         */
        this.closeOnEsc = true;
        /**
         * Class to be applied to the window.
         */
        this.windowClass = '';
        /**
         * Both, template and component may receive data through `config.context` property.
         * For components, this data will be set as component properties.
         * For templates, you can access it inside template as $implicit.
         */
        this.context = {};
        /**
         * Where the attached component should live in Angular's *logical* component tree.
         * This affects what is available for injection and the change detection order for the
         * component instantiated inside of the window. This does not affect where the window
         * content will be rendered.
         */
        this.viewContainerRef = null;
        Object.assign.apply(Object, tslib.__spreadArrays([this], configs));
    }
    return NbWindowConfig;
}());
var NB_WINDOW_CONTENT = new i0.InjectionToken('Nebular Window Content');
var NB_WINDOW_CONFIG = new i0.InjectionToken('Nebular Window Config');
var NB_WINDOW_CONTEXT = new i0.InjectionToken('Nebular Window Context');

/**
 * The `NbWindowRef` helps to manipulate window after it was created.
 * The window can be dismissed by using `close` method of the windowRef.
 * You can access rendered component as `componentRef` property of the windowRef.
 */
var NbWindowRef = /** @class */ (function () {
    function NbWindowRef(config) {
        this.config = config;
        this.stateChange$ = new rxjs.ReplaySubject(1);
        this._closed = false;
        this.closed$ = new rxjs.Subject();
        this.state = config.initialState;
    }
    Object.defineProperty(NbWindowRef.prototype, "state", {
        /**
         * Current window state.
         */
        get: function () {
            return this.stateValue;
        },
        set: function (newState) {
            if (newState && this.stateValue !== newState) {
                this.prevStateValue = this.state;
                this.stateValue = newState;
                this.stateChange$.next({ oldState: this.prevStateValue, newState: newState });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbWindowRef.prototype, "stateChange", {
        /**
         * Emits when window state change.
         */
        get: function () {
            return this.stateChange$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbWindowRef.prototype, "onClose", {
        /**
         * Emits when window was closed.
         */
        get: function () {
            return this.closed$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Minimize window.
     */
    NbWindowRef.prototype.minimize = function () {
        this.state = exports.NbWindowState.MINIMIZED;
    };
    /**
     * Maximize window.
     */
    NbWindowRef.prototype.maximize = function () {
        this.state = exports.NbWindowState.MAXIMIZED;
    };
    /**
     * Set window on top.
     */
    NbWindowRef.prototype.fullScreen = function () {
        this.state = exports.NbWindowState.FULL_SCREEN;
    };
    NbWindowRef.prototype.toPreviousState = function () {
        this.state = this.prevStateValue;
    };
    /**
     * Closes window.
     * */
    NbWindowRef.prototype.close = function () {
        if (this._closed) {
            return;
        }
        this._closed = true;
        this.componentRef.destroy();
        this.stateChange$.complete();
        this.closed$.next();
        this.closed$.complete();
    };
    return NbWindowRef;
}());

var NbWindowsContainerComponent = /** @class */ (function () {
    function NbWindowsContainerComponent() {
    }
    tslib.__decorate([
        i0.ViewChild('viewContainerRef', { read: i0.ViewContainerRef, static: true }),
        tslib.__metadata("design:type", i0.ViewContainerRef)
    ], NbWindowsContainerComponent.prototype, "viewContainerRef", void 0);
    NbWindowsContainerComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-windows-container',
            template: "<ng-container #viewContainerRef></ng-container>",
            styles: [":host{display:flex;align-items:flex-end;overflow-x:auto}:host ::ng-deep nb-window:not(.full-screen){margin:0 2rem}\n"]
        })
    ], NbWindowsContainerComponent);
    return NbWindowsContainerComponent;
}());

var NbWindowComponent = /** @class */ (function () {
    function NbWindowComponent(content, context, windowRef, config, focusTrapFactory, elementRef, renderer) {
        this.content = content;
        this.context = context;
        this.windowRef = windowRef;
        this.config = config;
        this.focusTrapFactory = focusTrapFactory;
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    Object.defineProperty(NbWindowComponent.prototype, "isFullScreen", {
        get: function () {
            return this.windowRef.state === exports.NbWindowState.FULL_SCREEN;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbWindowComponent.prototype, "maximized", {
        get: function () {
            return this.windowRef.state === exports.NbWindowState.MAXIMIZED;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbWindowComponent.prototype, "minimized", {
        get: function () {
            return this.windowRef.state === exports.NbWindowState.MINIMIZED;
        },
        enumerable: true,
        configurable: true
    });
    NbWindowComponent.prototype.ngOnInit = function () {
        this.focusTrap = this.focusTrapFactory.create(this.elementRef.nativeElement);
        this.focusTrap.blurPreviouslyFocusedElement();
        this.focusTrap.focusInitialElement();
        if (this.config.windowClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.config.windowClass);
        }
    };
    NbWindowComponent.prototype.ngAfterViewChecked = function () {
        if (!this.overlayContainer || this.overlayContainer.isAttached) {
            return;
        }
        if (this.content instanceof i0.TemplateRef) {
            this.attachTemplate();
        }
        else {
            this.attachComponent();
        }
    };
    NbWindowComponent.prototype.ngOnDestroy = function () {
        if (this.focusTrap) {
            this.focusTrap.restoreFocus();
        }
        this.close();
    };
    NbWindowComponent.prototype.minimize = function () {
        if (this.windowRef.state === exports.NbWindowState.MINIMIZED) {
            this.windowRef.toPreviousState();
        }
        else {
            this.windowRef.minimize();
        }
    };
    NbWindowComponent.prototype.maximize = function () {
        this.windowRef.maximize();
    };
    NbWindowComponent.prototype.fullScreen = function () {
        this.windowRef.fullScreen();
    };
    NbWindowComponent.prototype.maximizeOrFullScreen = function () {
        if (this.windowRef.state === exports.NbWindowState.MINIMIZED) {
            this.maximize();
        }
        else {
            this.fullScreen();
        }
    };
    NbWindowComponent.prototype.close = function () {
        this.windowRef.close();
    };
    NbWindowComponent.prototype.attachTemplate = function () {
        this.overlayContainer
            .attachTemplatePortal(new NbTemplatePortal(this.content, null, this.context));
    };
    NbWindowComponent.prototype.attachComponent = function () {
        var portal = new NbComponentPortal(this.content, null, null, this.cfr);
        var ref = this.overlayContainer.attachComponentPortal(portal, this.context);
        ref.changeDetectorRef.detectChanges();
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.ComponentFactoryResolver)
    ], NbWindowComponent.prototype, "cfr", void 0);
    tslib.__decorate([
        i0.HostBinding('class.full-screen'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbWindowComponent.prototype, "isFullScreen", null);
    tslib.__decorate([
        i0.HostBinding('class.maximized'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbWindowComponent.prototype, "maximized", null);
    tslib.__decorate([
        i0.HostBinding('class.minimized'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbWindowComponent.prototype, "minimized", null);
    tslib.__decorate([
        i0.ViewChild(NbOverlayContainerComponent),
        tslib.__metadata("design:type", NbOverlayContainerComponent)
    ], NbWindowComponent.prototype, "overlayContainer", void 0);
    NbWindowComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-window',
            template: "\n    <nb-card>\n      <nb-card-header>\n        <div cdkFocusInitial class=\"title\" tabindex=\"-1\">{{ config.title }}</div>\n\n        <div class=\"buttons\">\n          <button nbButton ghost (click)=\"minimize()\">\n            <nb-icon icon=\"minus-outline\" pack=\"nebular-essentials\"></nb-icon>\n          </button>\n          <button nbButton ghost *ngIf=\"isFullScreen\" (click)=\"maximize()\">\n            <nb-icon icon=\"collapse-outline\" pack=\"nebular-essentials\"></nb-icon>\n          </button>\n          <button nbButton ghost *ngIf=\"minimized || maximized\" (click)=\"maximizeOrFullScreen()\">\n            <nb-icon icon=\"expand-outline\" pack=\"nebular-essentials\"></nb-icon>\n          </button>\n          <button nbButton ghost (click)=\"close()\">\n            <nb-icon icon=\"close-outline\" pack=\"nebular-essentials\"></nb-icon>\n          </button>\n        </div>\n      </nb-card-header>\n      <nb-card-body *ngIf=\"maximized || isFullScreen\">\n        <nb-overlay-container></nb-overlay-container>\n      </nb-card-body>\n    </nb-card>\n  ",
            styles: [":host{flex:1 0 auto;min-width:20rem}:host nb-card{margin:0}:host nb-card-header{display:flex;justify-content:space-between;align-items:center;overflow:hidden}:host .title{flex:1 0 auto;margin-right:3rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host .buttons{width:9.5rem;display:flex;justify-content:space-evenly}:host .buttons [nbButton]{flex:0 0 3rem}:host(.full-screen){position:fixed;top:50%;left:50%;transform:translate(-50%, -50%)}:host(.maximized) nb-card{border-bottom-left-radius:0;border-bottom-right-radius:0}:host(.minimized) nb-card{border-bottom-left-radius:0;border-bottom-right-radius:0;height:auto}:host(.minimized) nb-card nb-card-header{border-bottom:none}\n"]
        }),
        tslib.__param(0, i0.Inject(NB_WINDOW_CONTENT)),
        tslib.__param(1, i0.Inject(NB_WINDOW_CONTEXT)),
        tslib.__metadata("design:paramtypes", [Object, Object,
            NbWindowRef,
            NbWindowConfig,
            NbFocusTrapFactoryService,
            i0.ElementRef,
            i0.Renderer2])
    ], NbWindowComponent);
    return NbWindowComponent;
}());

/**
 * The `NbWindowService` can be used to open windows.
 *
 * @stacked-example(Showcase, window/window-showcase.component)
 *
 * ### Installation
 *
 * Import `NbWindowModule` to your app module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbWindowModule.forRoot(config),
 *   ],
 * })
 * export class AppModule { }
 * ```
 *
 * If you are using it in a lazy loaded module than you have to install `NbWindowModule.forChild`:
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbWindowModule.forChild(config),
 *   ],
 * })
 * export class LazyLoadedModule { }
 * ```
 *
 * ### Usage
 *
 * A new window can be opened by calling the `open` method with a component or template to be loaded
 * and an optional configuration.
 * `open` method will return `NbWindowRef` that can be used for the further manipulations.
 *
 * ```ts
 * const windowRef = this.windowService.open(MyComponent, { ... });
 * ```
 *
 * `NbWindowRef` gives you ability manipulate opened window.
 * Also, you can inject `NbWindowRef` inside provided component which rendered in window.
 *
 * ```ts
 * this.windowService.open(MyWindowComponent, { ... });
 *
 * // my.component.ts
 * constructor(protected windowRef: NbWindowRef) {
 * }
 *
 * minimize() {
 *   this.windowRef.minimize();
 * }
 *
 * close() {
 *   this.windowRef.close();
 * }
 * ```
 *
 * Instead of component you can create window from TemplateRef. As usual you can access context provided via config
 * via `let-` variables. Also you can get reference to the `NbWindowRef` in context's `windowRef` property.
 *
 * @stacked-example(Window content from TemplateRef, window/template-window.component)
 *
 * ### Configuration
 *
 * As mentioned above, `open` method of the `NbWindowService` may receive optional configuration options.
 * Also, you can modify default windows configuration through `NbWindowModule.forRoot({ ... })`.
 * You can read about all available options on [API tab](docs/components/window/api#nbwindowconfig).
 *
 * @stacked-example(Configuration, window/windows-backdrop.component)
 */
var NbWindowService = /** @class */ (function () {
    function NbWindowService(componentFactoryResolver, overlayService, overlayPositionBuilder, blockScrollStrategy, defaultWindowsConfig, cfr, document) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.overlayService = overlayService;
        this.overlayPositionBuilder = overlayPositionBuilder;
        this.blockScrollStrategy = blockScrollStrategy;
        this.defaultWindowsConfig = defaultWindowsConfig;
        this.cfr = cfr;
        this.openWindows = [];
        this.document = document;
    }
    /**
     * Opens new window.
     * @param windowContent
     * @param windowConfig
     * */
    NbWindowService.prototype.open = function (windowContent, windowConfig) {
        if (windowConfig === void 0) { windowConfig = {}; }
        if (this.shouldCreateWindowsContainer()) {
            this.createWindowsContainer();
        }
        var config = new NbWindowConfig(this.defaultWindowsConfig, windowConfig);
        var windowRef = new NbWindowRef(config);
        windowRef.componentRef = this.appendWindow(windowContent, config, windowRef);
        this.openWindows.push(windowRef);
        this.subscribeToEvents(windowRef);
        return windowRef;
    };
    NbWindowService.prototype.shouldCreateWindowsContainer = function () {
        if (this.windowsContainerViewRef) {
            var containerEl = this.windowsContainerViewRef.element.nativeElement;
            return !this.document.body.contains(containerEl);
        }
        return true;
    };
    NbWindowService.prototype.createWindowsContainer = function () {
        if (this.overlayRef) {
            this.overlayRef.dispose();
        }
        this.overlayRef = this.overlayService.create({
            scrollStrategy: this.overlayService.scrollStrategies.noop(),
            positionStrategy: this.overlayPositionBuilder.global().bottom().right(),
            hasBackdrop: true,
        });
        var windowsContainerPortal = new NbComponentPortal(NbWindowsContainerComponent, null, null, this.cfr);
        var overlayRef = this.overlayRef.attach(windowsContainerPortal);
        this.windowsContainerViewRef = overlayRef.instance.viewContainerRef;
    };
    NbWindowService.prototype.appendWindow = function (content, config, windowRef) {
        var context = content instanceof i0.TemplateRef
            ? { $implicit: config.context, windowRef: windowRef }
            : config.context;
        var providers = [
            { provide: NB_WINDOW_CONTENT, useValue: content },
            { provide: NB_WINDOW_CONTEXT, useValue: context },
            { provide: NbWindowConfig, useValue: config },
            { provide: NbWindowRef, useValue: windowRef },
        ];
        var parentInjector = config.viewContainerRef
            ? config.viewContainerRef.injector
            : this.windowsContainerViewRef.injector;
        var injector = i0.Injector.create({ parent: parentInjector, providers: providers });
        var windowFactory = this.componentFactoryResolver.resolveComponentFactory(NbWindowComponent);
        var ref = this.windowsContainerViewRef.createComponent(windowFactory, null, injector);
        ref.instance.cfr = this.cfr;
        ref.changeDetectorRef.detectChanges();
        return ref;
    };
    NbWindowService.prototype.subscribeToEvents = function (windowRef) {
        var _this = this;
        if (windowRef.config.closeOnBackdropClick) {
            this.overlayRef.backdropClick().subscribe(function () { return windowRef.close(); });
        }
        if (windowRef.config.closeOnEsc) {
            this.overlayRef.keydownEvents()
                .pipe(rxjs_operators.filter(function (event) { return event.keyCode === 27; }))
                .subscribe(function () { return windowRef.close(); });
        }
        windowRef.stateChange.subscribe(function () { return _this.checkAndUpdateOverlay(); });
        windowRef.onClose.subscribe(function () {
            _this.openWindows.splice(_this.openWindows.indexOf(windowRef), 1);
            _this.checkAndUpdateOverlay();
        });
    };
    NbWindowService.prototype.checkAndUpdateOverlay = function () {
        var fullScreenWindows = this.openWindows.filter(function (w) { return w.state === exports.NbWindowState.FULL_SCREEN; });
        if (fullScreenWindows.length > 0) {
            this.blockScrollStrategy.enable();
        }
        else {
            this.blockScrollStrategy.disable();
        }
        if (fullScreenWindows.some(function (w) { return w.config.hasBackdrop; })) {
            this.overlayRef.backdropElement.removeAttribute('hidden');
        }
        else {
            this.overlayRef.backdropElement.setAttribute('hidden', '');
        }
    };
    NbWindowService = tslib.__decorate([
        i0.Injectable(),
        tslib.__param(4, i0.Inject(NB_WINDOW_CONFIG)),
        tslib.__param(6, i0.Inject(NB_DOCUMENT)),
        tslib.__metadata("design:paramtypes", [i0.ComponentFactoryResolver,
            NbOverlayService,
            NbOverlayPositionBuilder,
            NbBlockScrollStrategyAdapter,
            NbWindowConfig,
            i0.ComponentFactoryResolver, Object])
    ], NbWindowService);
    return NbWindowService;
}());

var NbWindowModule = /** @class */ (function () {
    function NbWindowModule() {
    }
    NbWindowModule_1 = NbWindowModule;
    NbWindowModule.forRoot = function (defaultConfig) {
        return {
            ngModule: NbWindowModule_1,
            providers: [
                NbWindowService,
                { provide: NB_WINDOW_CONFIG, useValue: defaultConfig },
            ],
        };
    };
    NbWindowModule.forChild = function (defaultConfig) {
        return {
            ngModule: NbWindowModule_1,
            providers: [
                NbWindowService,
                { provide: NB_WINDOW_CONFIG, useValue: defaultConfig },
            ],
        };
    };
    var NbWindowModule_1;
    NbWindowModule = NbWindowModule_1 = tslib.__decorate([
        i0.NgModule({
            imports: [_angular_common.CommonModule, NbOverlayModule, NbCardModule, NbIconModule, NbButtonModule],
            declarations: [
                NbWindowsContainerComponent,
                NbWindowComponent,
            ],
            entryComponents: [NbWindowsContainerComponent, NbWindowComponent],
        })
    ], NbWindowModule);
    return NbWindowModule;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * The `NbDatepickerAdapter` instances provide way how to parse, format and validate
 * different date types.
 * */
var NbDatepickerAdapter = /** @class */ (function () {
    function NbDatepickerAdapter() {
    }
    return NbDatepickerAdapter;
}());
/**
 * Datepicker is an control that can pick any values anyway.
 * It has to be bound to the datepicker directive through nbDatepicker input.
 * */
var NbDatepicker = /** @class */ (function () {
    function NbDatepicker() {
    }
    return NbDatepicker;
}());
var NB_DATE_ADAPTER = new i0.InjectionToken('Datepicker Adapter');
var NB_DATE_SERVICE_OPTIONS = new i0.InjectionToken('Date service options');
/**
 * The `NbDatepickerDirective` is form control that gives you ability to select dates and ranges. The datepicker
 * is shown when input receives a `focus` event.
 *
 * ```html
 * <input [nbDatepicker]="datepicker">
 * <nb-datepicker #datepicker></nb-datepicker>
 * ```
 *
 * @stacked-example(Showcase, datepicker/datepicker-showcase.component)
 *
 * ### Installation
 *
 * Import `NbDatepickerModule.forRoot()` to your root module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbDatepickerModule.forRoot(),
 *   ],
 * })
 * export class AppModule { }
 * ```
 * And `NbDatepickerModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbDatepickerModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * If you want to use range selection, you have to use `NbRangepickerComponent` instead:
 *
 * ```html
 * <input [nbDatepicker]="rangepicker">
 * <nb-rangepicker #rangepicker></nb-rangepicker>
 * ```
 *
 * Both range and date pickers support all parameters as calendar, so, check `NbCalendarComponent` for additional
 * info.
 *
 * @stacked-example(Range showcase, datepicker/rangepicker-showcase.component)
 *
 * Datepicker is the form control so it can be bound with angular forms through ngModel and form controls.
 *
 * @stacked-example(Forms, datepicker/datepicker-forms.component)
 *
 * `NbDatepickerDirective` may be validated using `min` and `max` dates passed to the datepicker.
 * And `filter` predicate that receives date object and has to return a boolean value.
 *
 * @stacked-example(Validation, datepicker/datepicker-validation.component)
 *
 * The `NbDatepickerComponent` supports date formatting:
 *
 * ```html
 * <input [nbDatepicker]="datepicker">
 * <nb-datepicker #datepicker format="MM\dd\yyyy"></nb-datepicker>
 * ```
 *
 * ## Formatting Issue
 *
 * By default, datepicker uses angulars `LOCALE_ID` token for localization and `DatePipe` for dates formatting.
 * And native `Date.parse(...)` for dates parsing. But native `Date.parse` function doesn't support formats.
 * To provide custom formatting you have to use one of the following packages:
 *
 * - `@nebular/moment` - provides moment date adapter that uses moment for date objects. This means datepicker than
 * will operate only moment date objects. If you want to use it you have to install it: `npm i @nebular/moment`, and
 * import `NbMomentDateModule` from this package.
 *
 * - `@nebular/date-fns` - adapter for popular date-fns library. This way is preferred if you need only date formatting.
 * Because date-fns is treeshakable, tiny and operates native date objects. If you want to use it you have to
 * install it: `npm i @nebular/date-fns`, and import `NbDateFnsDateModule` from this package.
 *
 * ### NbDateFnsDateModule
 *
 * Format is required when using `NbDateFnsDateModule`. You can set it via `format` input on datepicker component:
 * ```html
 * <nb-datepicker format="dd.MM.yyyy"></nb-datepicker>
 * ```
 * Also format can be set globally with `NbDateFnsDateModule.forRoot({ format: 'dd.MM.yyyy' })` and
 * `NbDateFnsDateModule.forChild({ format: 'dd.MM.yyyy' })` methods.
 *
 * Please note to use some of the formatting tokens you also need to pass
 * `{ useAdditionalWeekYearTokens: true, useAdditionalDayOfYearTokens: true }` to date-fns parse and format functions.
 * You can configure options passed this functions by setting `formatOptions` and
 * `parseOptions` of options object passed to `NbDateFnsDateModule.forRoot` and `NbDateFnsDateModule.forChild` methods.
 * ```ts
 * NbDateFnsDateModule.forRoot({
 *   parseOptions: { useAdditionalWeekYearTokens: true, useAdditionalDayOfYearTokens: true },
 *   formatOptions: { useAdditionalWeekYearTokens: true, useAdditionalDayOfYearTokens: true },
 * })
 * ```
 * Further info on `date-fns` formatting tokens could be found at
 * [date-fns docs](https://date-fns.org/v2.0.0-alpha.27/docs/Unicode-Tokens).
 *
 * You can also use `parseOptions` and `formatOptions` to provide locale.
 * ```ts
 * import { eo } from 'date-fns/locale';
 *
 * @NgModule({
 *   imports: [
 *     NbDateFnsDateModule.forRoot({
 *       parseOptions: { locale: eo },
 *       formatOptions: { locale: eo },
 *     }),
 *   ],
 * })
 * ```
 *
 * @styles
 *
 * datepicker-background-color:
 * datepicker-border-color:
 * datepicker-border-style:
 * datepicker-border-width:
 * datepicker-border-radius:
 * datepicker-shadow:
 * */
var NbDatepickerDirective = /** @class */ (function () {
    function NbDatepickerDirective(document, datepickerAdapters, hostRef, dateService, changeDetector) {
        var _this = this;
        this.document = document;
        this.datepickerAdapters = datepickerAdapters;
        this.hostRef = hostRef;
        this.dateService = dateService;
        this.changeDetector = changeDetector;
        this.destroy$ = new rxjs.Subject();
        this.isDatepickerReady = false;
        this.onChange = function () { };
        this.onTouched = function () { };
        /**
         * Form control validators will be called in validators context, so, we need to bind them.
         * */
        this.validator = _angular_forms.Validators.compose([
            this.parseValidator,
            this.minValidator,
            this.maxValidator,
            this.filterValidator,
        ].map(function (fn) { return fn.bind(_this); }));
        this.subscribeOnInputChange();
    }
    NbDatepickerDirective_1 = NbDatepickerDirective;
    Object.defineProperty(NbDatepickerDirective.prototype, "setPicker", {
        /**
         * Provides datepicker component.
         * */
        set: function (picker) {
            this.picker = picker;
            this.setupPicker();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbDatepickerDirective.prototype, "input", {
        /**
         * Returns html input element.
         * */
        get: function () {
            return this.hostRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbDatepickerDirective.prototype, "inputValue", {
        /**
         * Returns host input value.
         * */
        get: function () {
            return this.input.value;
        },
        enumerable: true,
        configurable: true
    });
    NbDatepickerDirective.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * Writes value in picker and html input element.
     * */
    NbDatepickerDirective.prototype.writeValue = function (value) {
        if (this.isDatepickerReady) {
            this.writePicker(value);
            this.writeInput(value);
        }
        else {
            this.queue = value;
        }
    };
    NbDatepickerDirective.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    NbDatepickerDirective.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    NbDatepickerDirective.prototype.setDisabledState = function (isDisabled) {
        this.input.disabled = isDisabled;
    };
    /**
     * Form control validation based on picker validator config.
     * */
    NbDatepickerDirective.prototype.validate = function () {
        return this.validator(null);
    };
    /**
     * Hides picker, focuses the input
     */
    NbDatepickerDirective.prototype.hidePicker = function () {
        this.input.focus();
        this.picker.hide();
    };
    /**
     * Validates that we can parse value correctly.
     * */
    NbDatepickerDirective.prototype.parseValidator = function () {
        /**
         * Date services treat empty string as invalid date.
         * That's why we're getting invalid formControl in case of empty input which is not required.
         * */
        if (this.inputValue === '') {
            return null;
        }
        var isValid = this.datepickerAdapter.isValid(this.inputValue, this.picker.format);
        return isValid ? null : { nbDatepickerParse: { value: this.inputValue } };
    };
    /**
     * Validates passed value is greater than min.
     * */
    NbDatepickerDirective.prototype.minValidator = function () {
        var config = this.picker.getValidatorConfig();
        var date = this.datepickerAdapter.parse(this.inputValue, this.picker.format);
        return (!config.min || !date || this.dateService.compareDates(config.min, date) <= 0) ?
            null : { nbDatepickerMin: { min: config.min, actual: date } };
    };
    /**
     * Validates passed value is smaller than max.
     * */
    NbDatepickerDirective.prototype.maxValidator = function () {
        var config = this.picker.getValidatorConfig();
        var date = this.datepickerAdapter.parse(this.inputValue, this.picker.format);
        return (!config.max || !date || this.dateService.compareDates(config.max, date) >= 0) ?
            null : { nbDatepickerMax: { max: config.max, actual: date } };
    };
    /**
     * Validates passed value satisfy the filter.
     * */
    NbDatepickerDirective.prototype.filterValidator = function () {
        var config = this.picker.getValidatorConfig();
        var date = this.datepickerAdapter.parse(this.inputValue, this.picker.format);
        return (!config.filter || !date || config.filter(date)) ?
            null : { nbDatepickerFilter: true };
    };
    /**
     * Chooses datepicker adapter based on passed picker component.
     * */
    NbDatepickerDirective.prototype.chooseDatepickerAdapter = function () {
        var _this = this;
        this.datepickerAdapter = this.datepickerAdapters.find(function (_a) {
            var picker = _a.picker;
            return _this.picker instanceof picker;
        });
        if (this.noDatepickerAdapterProvided()) {
            throw new Error('No datepickerAdapter provided for picker');
        }
    };
    /**
     * Attaches picker to the host input element and subscribes on value changes.
     * */
    NbDatepickerDirective.prototype.setupPicker = function () {
        var _this = this;
        this.chooseDatepickerAdapter();
        this.picker.attach(this.hostRef);
        if (this.inputValue) {
            this.picker.value = this.datepickerAdapter.parse(this.inputValue, this.picker.format);
        }
        // In case datepicker component placed after the input with datepicker directive,
        // we can't read `this.picker.format` on first change detection run,
        // since it's not bound yet, so we have to wait for datepicker component initialization.
        if (!this.isDatepickerReady) {
            this.picker.init
                .pipe(rxjs_operators.take(1), rxjs_operators.tap(function () { return _this.isDatepickerReady = true; }), rxjs_operators.filter(function () { return !!_this.queue; }), rxjs_operators.takeUntil(this.destroy$))
                .subscribe(function () {
                _this.writeValue(_this.queue);
                _this.onChange(_this.queue);
                _this.changeDetector.detectChanges();
                _this.queue = undefined;
            });
        }
        this.picker.valueChange
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (value) {
            _this.writePicker(value);
            _this.writeInput(value);
            _this.onChange(value);
            if (_this.picker.shouldHide()) {
                _this.hidePicker();
            }
        });
        rxjs.merge(this.picker.blur, rxjs.fromEvent(this.input, 'blur').pipe(rxjs_operators.filter(function () { return !_this.picker.isShown && _this.document.activeElement !== _this.input; }))).pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.onTouched(); });
    };
    NbDatepickerDirective.prototype.writePicker = function (value) {
        this.picker.value = value;
    };
    NbDatepickerDirective.prototype.writeInput = function (value) {
        var stringRepresentation = this.datepickerAdapter.format(value, this.picker.format);
        this.hostRef.nativeElement.value = stringRepresentation;
    };
    /**
     * Validates if no datepicker adapter provided.
     * */
    NbDatepickerDirective.prototype.noDatepickerAdapterProvided = function () {
        return !this.datepickerAdapter || !(this.datepickerAdapter instanceof NbDatepickerAdapter);
    };
    NbDatepickerDirective.prototype.subscribeOnInputChange = function () {
        var _this = this;
        rxjs.fromEvent(this.input, 'input')
            .pipe(rxjs_operators.map(function () { return _this.inputValue; }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (value) { return _this.handleInputChange(value); });
    };
    /**
     * Parses input value and write if it isn't null.
     * */
    NbDatepickerDirective.prototype.handleInputChange = function (value) {
        var date = this.parseInputValue(value);
        this.onChange(date);
        this.writePicker(date);
    };
    NbDatepickerDirective.prototype.parseInputValue = function (value) {
        if (this.datepickerAdapter.isValid(value, this.picker.format)) {
            return this.datepickerAdapter.parse(value, this.picker.format);
        }
        return null;
    };
    var NbDatepickerDirective_1;
    tslib.__decorate([
        i0.Input('nbDatepicker'),
        tslib.__metadata("design:type", NbDatepicker),
        tslib.__metadata("design:paramtypes", [NbDatepicker])
    ], NbDatepickerDirective.prototype, "setPicker", null);
    NbDatepickerDirective = NbDatepickerDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: 'input[nbDatepicker]',
            providers: [
                {
                    provide: _angular_forms.NG_VALUE_ACCESSOR,
                    useExisting: i0.forwardRef(function () { return NbDatepickerDirective_1; }),
                    multi: true,
                },
                {
                    provide: _angular_forms.NG_VALIDATORS,
                    useExisting: i0.forwardRef(function () { return NbDatepickerDirective_1; }),
                    multi: true,
                },
            ],
        }),
        tslib.__param(0, i0.Inject(NB_DOCUMENT)),
        tslib.__param(1, i0.Inject(NB_DATE_ADAPTER)),
        tslib.__metadata("design:paramtypes", [Object, Array, i0.ElementRef,
            NbDateService,
            i0.ChangeDetectorRef])
    ], NbDatepickerDirective);
    return NbDatepickerDirective;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbDatepickerContainerComponent = /** @class */ (function (_super) {
    tslib.__extends(NbDatepickerContainerComponent, _super);
    function NbDatepickerContainerComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbDatepickerContainerComponent.prototype.attach = function (portal) {
        return this.overlayContainer.attachComponentPortal(portal);
    };
    tslib.__decorate([
        i0.ViewChild(NbOverlayContainerComponent, { static: true }),
        tslib.__metadata("design:type", NbOverlayContainerComponent)
    ], NbDatepickerContainerComponent.prototype, "overlayContainer", void 0);
    NbDatepickerContainerComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-datepicker-container',
            template: "\n    <nb-overlay-container></nb-overlay-container>\n  "
        })
    ], NbDatepickerContainerComponent);
    return NbDatepickerContainerComponent;
}(NbPositionedContainer));

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * The `NbBasePicker` component concentrates overlay manipulation logic.
 * */
var NbBasePicker = /** @class */ (function (_super) {
    tslib.__extends(NbBasePicker, _super);
    function NbBasePicker(overlay, positionBuilder, triggerStrategyBuilder, cfr, dateService, dateServiceOptions) {
        var _this = _super.call(this) || this;
        _this.overlay = overlay;
        _this.positionBuilder = positionBuilder;
        _this.triggerStrategyBuilder = triggerStrategyBuilder;
        _this.cfr = cfr;
        _this.dateService = dateService;
        _this.dateServiceOptions = dateServiceOptions;
        /**
         * Size of the calendar and entire components.
         * Can be 'medium' which is default or 'large'.
         * */
        _this.size = exports.NbCalendarSize.MEDIUM;
        _this.init$ = new rxjs.ReplaySubject();
        /**
         * Stream of picker changes. Required to be the subject because picker hides and shows and picker
         * change stream becomes recreated.
         * */
        _this.onChange$ = new rxjs.Subject();
        _this.overlayOffset = 8;
        _this.destroy$ = new rxjs.Subject();
        _this.blur$ = new rxjs.Subject();
        return _this;
    }
    Object.defineProperty(NbBasePicker.prototype, "picker", {
        /**
         * Returns picker instance.
         * */
        get: function () {
            return this.pickerRef && this.pickerRef.instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBasePicker.prototype, "valueChange", {
        /**
         * Stream of picker value changes.
         * */
        get: function () {
            return this.onChange$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBasePicker.prototype, "isShown", {
        get: function () {
            return this.ref && this.ref.hasAttached();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBasePicker.prototype, "init", {
        get: function () {
            return this.init$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBasePicker.prototype, "blur", {
        /**
         * Emits when datepicker looses focus.
         */
        get: function () {
            return this.blur$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    NbBasePicker.prototype.ngOnInit = function () {
        this.checkFormat();
    };
    NbBasePicker.prototype.ngOnChanges = function (changes) {
        if (changes.format && !changes.format.isFirstChange()) {
            this.checkFormat();
        }
    };
    NbBasePicker.prototype.ngAfterViewInit = function () {
        this.init$.next();
    };
    NbBasePicker.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
        this.hide();
        this.init$.complete();
        if (this.ref) {
            this.ref.dispose();
        }
        if (this.triggerStrategy) {
            this.triggerStrategy.destroy();
        }
    };
    /**
     * Datepicker knows nothing about host html input element.
     * So, attach method attaches datepicker to the host input element.
     * */
    NbBasePicker.prototype.attach = function (hostRef) {
        this.hostRef = hostRef;
        this.subscribeOnTriggers();
    };
    NbBasePicker.prototype.getValidatorConfig = function () {
        return { min: this.min, max: this.max, filter: this.filter };
    };
    NbBasePicker.prototype.show = function () {
        if (!this.ref) {
            this.createOverlay();
        }
        this.openDatepicker();
    };
    NbBasePicker.prototype.shouldHide = function () {
        return this.hideOnSelect && !!this.value;
    };
    NbBasePicker.prototype.hide = function () {
        if (this.ref) {
            this.ref.detach();
        }
        // save current value if picker was rendered
        if (this.picker) {
            this.queue = this.value;
            this.pickerRef.destroy();
            this.pickerRef = null;
            this.container = null;
        }
    };
    NbBasePicker.prototype.createOverlay = function () {
        this.positionStrategy = this.createPositionStrategy();
        this.ref = this.overlay.create({
            positionStrategy: this.positionStrategy,
            scrollStrategy: this.overlay.scrollStrategies.reposition(),
        });
        this.subscribeOnPositionChange();
    };
    NbBasePicker.prototype.openDatepicker = function () {
        this.container = this.ref.attach(new NbComponentPortal(NbDatepickerContainerComponent, null, null, this.cfr));
        this.instantiatePicker();
        this.subscribeOnValueChange();
        this.writeQueue();
        this.patchWithInputs();
    };
    NbBasePicker.prototype.createPositionStrategy = function () {
        return this.positionBuilder
            .connectedTo(this.hostRef)
            .position(exports.NbPosition.BOTTOM)
            .offset(this.overlayOffset)
            .adjustment(exports.NbAdjustment.COUNTERCLOCKWISE);
    };
    NbBasePicker.prototype.subscribeOnPositionChange = function () {
        var _this = this;
        this.positionStrategy.positionChange
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (position) { return patch(_this.container, { position: position }); });
    };
    NbBasePicker.prototype.createTriggerStrategy = function () {
        var _this = this;
        return this.triggerStrategyBuilder
            .trigger(exports.NbTrigger.FOCUS)
            .host(this.hostRef.nativeElement)
            .container(function () { return _this.container; })
            .build();
    };
    NbBasePicker.prototype.subscribeOnTriggers = function () {
        var _this = this;
        this.triggerStrategy = this.createTriggerStrategy();
        this.triggerStrategy.show$.subscribe(function () { return _this.show(); });
        this.triggerStrategy.hide$.subscribe(function () {
            _this.blur$.next();
            _this.hide();
        });
    };
    NbBasePicker.prototype.instantiatePicker = function () {
        this.pickerRef = this.container.instance.attach(new NbComponentPortal(this.pickerClass, null, null, this.cfr));
    };
    /**
     * Subscribes on picker value changes and emit data through this.onChange$ subject.
     * */
    NbBasePicker.prototype.subscribeOnValueChange = function () {
        var _this = this;
        this.pickerValueChange.subscribe(function (date) {
            _this.onChange$.next(date);
        });
    };
    NbBasePicker.prototype.patchWithInputs = function () {
        this.picker.boundingMonth = this.boundingMonth;
        this.picker.startView = this.startView;
        this.picker.min = this.min;
        this.picker.max = this.max;
        this.picker.filter = this.filter;
        this.picker._cellComponent = this.dayCellComponent;
        this.picker.monthCellComponent = this.monthCellComponent;
        this.picker._yearCellComponent = this.yearCellComponent;
        this.picker.size = this.size;
        this.picker.showNavigation = this.showNavigation;
        this.picker.visibleDate = this.visibleDate;
        this.picker.showWeekNumber = this.showWeekNumber;
        this.picker.weekNumberSymbol = this.weekNumberSymbol;
    };
    NbBasePicker.prototype.checkFormat = function () {
        if (this.dateService.getId() === 'native' && this.format) {
            throw new Error('Can\'t format native date. To use custom formatting you have to install @nebular/moment or ' +
                '@nebular/date-fns package and import NbMomentDateModule or NbDateFnsDateModule accordingly.' +
                'More information at "Formatting issue" ' +
                'https://akveo.github.io/nebular/docs/components/datepicker/overview#nbdatepickercomponent');
        }
        var isFormatSet = this.format || (this.dateServiceOptions && this.dateServiceOptions.format);
        if (this.dateService.getId() === 'date-fns' && !isFormatSet) {
            throw new Error('format is required when using NbDateFnsDateModule');
        }
    };
    return NbBasePicker;
}(NbDatepicker));
var NbBasePickerComponent = /** @class */ (function (_super) {
    tslib.__extends(NbBasePickerComponent, _super);
    function NbBasePickerComponent(document, positionBuilder, triggerStrategyBuilder, overlay, cfr, dateService, dateServiceOptions) {
        var _this = _super.call(this, overlay, positionBuilder, triggerStrategyBuilder, cfr, dateService, dateServiceOptions) || this;
        /**
         * Defines if we should render previous and next months
         * in the current month view.
         * */
        _this.boundingMonth = true;
        /**
         * Defines starting view for calendar.
         * */
        _this.startView = exports.NbCalendarViewMode.DATE;
        /**
         * Size of the calendar and entire components.
         * Can be 'medium' which is default or 'large'.
         * */
        _this.size = exports.NbCalendarSize.MEDIUM;
        /**
         * Hide picker when a date or a range is selected, `true` by default
         * @type {boolean}
         */
        _this.hideOnSelect = true;
        /**
         * Determines should we show calendars navigation or not.
         * @type {boolean}
         */
        _this.showNavigation = true;
        /**
         * Sets symbol used as a header for week numbers column
         * */
        _this.weekNumberSymbol = '#';
        _this._showWeekNumber = false;
        return _this;
    }
    Object.defineProperty(NbBasePickerComponent.prototype, "showWeekNumber", {
        /**
         * Determines should we show week numbers column.
         * False by default.
         * */
        get: function () {
            return this._showWeekNumber;
        },
        set: function (value) {
            this._showWeekNumber = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBasePickerComponent.prototype, "pickerValueChange", {
        get: function () {
            return;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbBasePickerComponent.prototype, "value", {
        get: function () {
            return undefined;
        },
        set: function (value) { },
        enumerable: true,
        configurable: true
    });
    NbBasePickerComponent.prototype.writeQueue = function () {
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbBasePickerComponent.prototype, "format", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbBasePickerComponent.prototype, "boundingMonth", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbBasePickerComponent.prototype, "startView", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbBasePickerComponent.prototype, "min", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbBasePickerComponent.prototype, "max", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Function)
    ], NbBasePickerComponent.prototype, "filter", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.Type)
    ], NbBasePickerComponent.prototype, "dayCellComponent", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.Type)
    ], NbBasePickerComponent.prototype, "monthCellComponent", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", i0.Type)
    ], NbBasePickerComponent.prototype, "yearCellComponent", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbBasePickerComponent.prototype, "size", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object)
    ], NbBasePickerComponent.prototype, "visibleDate", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbBasePickerComponent.prototype, "hideOnSelect", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbBasePickerComponent.prototype, "showNavigation", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbBasePickerComponent.prototype, "weekNumberSymbol", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbBasePickerComponent.prototype, "showWeekNumber", null);
    NbBasePickerComponent = tslib.__decorate([
        i0.Component({
            template: ''
        }),
        tslib.__param(0, i0.Inject(NB_DOCUMENT)),
        tslib.__param(6, i0.Optional()), tslib.__param(6, i0.Inject(NB_DATE_SERVICE_OPTIONS)),
        tslib.__metadata("design:paramtypes", [Object, NbPositionBuilderService,
            NbTriggerStrategyBuilderService,
            NbOverlayService,
            i0.ComponentFactoryResolver,
            NbDateService, Object])
    ], NbBasePickerComponent);
    return NbBasePickerComponent;
}(NbBasePicker));
/**
 * The DatePicker components itself.
 * Provides a proxy to `NbCalendar` options as well as custom picker options.
 */
var NbDatepickerComponent = /** @class */ (function (_super) {
    tslib.__extends(NbDatepickerComponent, _super);
    function NbDatepickerComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.pickerClass = NbCalendarComponent;
        return _this;
    }
    Object.defineProperty(NbDatepickerComponent.prototype, "date", {
        /**
         * Date which will be rendered as selected.
         * */
        set: function (date) {
            this.value = date;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbDatepickerComponent.prototype, "dateChange", {
        /**
         * Emits date when selected.
         * */
        get: function () {
            return this.valueChange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbDatepickerComponent.prototype, "value", {
        get: function () {
            return this.picker ? this.picker.date : undefined;
        },
        set: function (date) {
            if (!this.picker) {
                this.queue = date;
                return;
            }
            if (date) {
                this.visibleDate = date;
                this.picker.visibleDate = date;
                this.picker.date = date;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbDatepickerComponent.prototype, "pickerValueChange", {
        get: function () {
            return this.picker.dateChange;
        },
        enumerable: true,
        configurable: true
    });
    NbDatepickerComponent.prototype.writeQueue = function () {
        if (this.queue) {
            var date = this.queue;
            this.queue = null;
            this.value = date;
        }
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbDatepickerComponent.prototype, "date", null);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter),
        tslib.__metadata("design:paramtypes", [])
    ], NbDatepickerComponent.prototype, "dateChange", null);
    NbDatepickerComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-datepicker',
            template: ''
        })
    ], NbDatepickerComponent);
    return NbDatepickerComponent;
}(NbBasePickerComponent));
/**
 * The RangeDatePicker components itself.
 * Provides a proxy to `NbCalendarRange` options as well as custom picker options.
 */
var NbRangepickerComponent = /** @class */ (function (_super) {
    tslib.__extends(NbRangepickerComponent, _super);
    function NbRangepickerComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.pickerClass = NbCalendarRangeComponent;
        return _this;
    }
    Object.defineProperty(NbRangepickerComponent.prototype, "range", {
        /**
         * Range which will be rendered as selected.
         * */
        set: function (range) {
            this.value = range;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRangepickerComponent.prototype, "rangeChange", {
        /**
         * Emits range when start selected and emits again when end selected.
         * */
        get: function () {
            return this.valueChange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRangepickerComponent.prototype, "value", {
        get: function () {
            return this.picker ? this.picker.range : undefined;
        },
        set: function (range) {
            if (!this.picker) {
                this.queue = range;
                return;
            }
            if (range) {
                var visibleDate = range && range.start;
                this.visibleDate = visibleDate;
                this.picker.visibleDate = visibleDate;
                this.picker.range = range;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRangepickerComponent.prototype, "pickerValueChange", {
        get: function () {
            return this.picker.rangeChange;
        },
        enumerable: true,
        configurable: true
    });
    NbRangepickerComponent.prototype.shouldHide = function () {
        return _super.prototype.shouldHide.call(this) && !!(this.value && this.value.start && this.value.end);
    };
    NbRangepickerComponent.prototype.writeQueue = function () {
        if (this.queue) {
            var range = this.queue;
            this.queue = null;
            this.value = range;
        }
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbRangepickerComponent.prototype, "range", null);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter),
        tslib.__metadata("design:paramtypes", [])
    ], NbRangepickerComponent.prototype, "rangeChange", null);
    NbRangepickerComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-rangepicker',
            template: ''
        })
    ], NbRangepickerComponent);
    return NbRangepickerComponent;
}(NbBasePickerComponent));

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbDateAdapterService = /** @class */ (function (_super) {
    tslib.__extends(NbDateAdapterService, _super);
    function NbDateAdapterService(dateService) {
        var _this = _super.call(this) || this;
        _this.dateService = dateService;
        _this.picker = NbDatepickerComponent;
        return _this;
    }
    NbDateAdapterService.prototype.parse = function (date, format) {
        return this.dateService.parse(date, format);
    };
    NbDateAdapterService.prototype.format = function (date, format) {
        return this.dateService.format(date, format);
    };
    NbDateAdapterService.prototype.isValid = function (date, format) {
        return this.dateService.isValidDateString(date, format);
    };
    NbDateAdapterService = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbDateAdapterService);
    return NbDateAdapterService;
}(NbDatepickerAdapter));
var NbRangeAdapterService = /** @class */ (function (_super) {
    tslib.__extends(NbRangeAdapterService, _super);
    function NbRangeAdapterService(dateService) {
        var _this = _super.call(this) || this;
        _this.dateService = dateService;
        _this.picker = NbRangepickerComponent;
        return _this;
    }
    NbRangeAdapterService.prototype.parse = function (range, format) {
        var _a = range.split('-').map(function (subDate) { return subDate.trim(); }), start = _a[0], end = _a[1];
        return {
            start: this.dateService.parse(start, format),
            end: this.dateService.parse(end, format),
        };
    };
    NbRangeAdapterService.prototype.format = function (range, format) {
        if (!range) {
            return '';
        }
        var start = this.dateService.format(range.start, format);
        var isStartValid = this.dateService.isValidDateString(start, format);
        if (!isStartValid) {
            return '';
        }
        var end = this.dateService.format(range.end, format);
        var isEndValid = this.dateService.isValidDateString(end, format);
        if (isEndValid) {
            return start + " - " + end;
        }
        else {
            return start;
        }
    };
    NbRangeAdapterService.prototype.isValid = function (range, format) {
        var _a = range.split('-').map(function (subDate) { return subDate.trim(); }), start = _a[0], end = _a[1];
        return this.dateService.isValidDateString(start, format) && this.dateService.isValidDateString(end, format);
    };
    NbRangeAdapterService = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [NbDateService])
    ], NbRangeAdapterService);
    return NbRangeAdapterService;
}(NbDatepickerAdapter));

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbDatepickerModule = /** @class */ (function () {
    function NbDatepickerModule() {
    }
    NbDatepickerModule_1 = NbDatepickerModule;
    NbDatepickerModule.forRoot = function () {
        return {
            ngModule: NbDatepickerModule_1,
            providers: [
                _angular_common.DatePipe,
                {
                    provide: NB_DATE_ADAPTER,
                    multi: true,
                    useClass: NbDateAdapterService,
                },
                {
                    provide: NB_DATE_ADAPTER,
                    multi: true,
                    useClass: NbRangeAdapterService,
                },
            ],
        };
    };
    var NbDatepickerModule_1;
    NbDatepickerModule = NbDatepickerModule_1 = tslib.__decorate([
        i0.NgModule({
            imports: [NbOverlayModule, NbCalendarModule, NbCalendarRangeModule],
            exports: [NbDatepickerDirective, NbDatepickerComponent, NbRangepickerComponent],
            declarations: [
                NbDatepickerDirective,
                NbDatepickerContainerComponent,
                NbDatepickerComponent,
                NbRangepickerComponent,
                NbBasePickerComponent,
            ],
            entryComponents: [NbCalendarComponent, NbCalendarRangeComponent, NbDatepickerContainerComponent],
        })
    ], NbDatepickerModule);
    return NbDatepickerModule;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * The `NbRadioComponent` provides the same functionality as native `<input type="radio">`
 * with Nebular styles and animations.
 *
 * @stacked-example(Showcase, radio/radio-showcase.component)
 *
 * ### Installation
 *
 * Import `NbRadioModule` to your feature module.
 *
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbRadioModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 *
 * ### Usage
 *
 * Radio buttons should be wrapped in `nb-radio-group` to provide form bindings.
 *
 * ```html
 * <nb-radio-group [(ngModel)]="selectedOption">
 *   <nb-radio value="1">Option 1</nb-radio>
 *   <nb-radio value="2">Option 2</nb-radio>
 *   <nb-radio value="3">Option 3</nb-radio>
 * </nb-radio-group>
 * ```
 *
 * You can disable some radios in the group using a `disabled` attribute.
 *
 * @stacked-example(Disabled, radio/radio-disabled.component)
 *
 *
 * @styles
 *
 * radio-width:
 * radio-height:
 * radio-border-style:
 * radio-border-width:
 * radio-text-font-family:
 * radio-text-font-size:
 * radio-text-font-weight:
 * radio-text-line-height:
 * radio-outline-color:
 * radio-outline-width:
 * radio-basic-text-color:
 * radio-basic-border-color:
 * radio-basic-background-color:
 * radio-basic-checked-background-color:
 * radio-basic-checked-border-color:
 * radio-basic-inner-circle-color:
 * radio-basic-focus-border-color:
 * radio-basic-focus-inner-circle-color:
 * radio-basic-hover-background-color:
 * radio-basic-hover-border-color:
 * radio-basic-hover-inner-circle-color:
 * radio-basic-hover-checked-background-color:
 * radio-basic-active-border-color:
 * radio-basic-active-inner-circle-color:
 * radio-basic-disabled-background-color:
 * radio-basic-disabled-border-color:
 * radio-basic-disabled-text-color:
 * radio-basic-disabled-checked-background-color:
 * radio-basic-disabled-checked-border-color:
 * radio-basic-disabled-checked-inner-circle-color:
 * radio-primary-text-color:
 * radio-primary-border-color:
 * radio-primary-background-color:
 * radio-primary-checked-background-color:
 * radio-primary-checked-border-color:
 * radio-primary-inner-circle-color:
 * radio-primary-focus-border-color:
 * radio-primary-focus-inner-circle-color:
 * radio-primary-hover-background-color:
 * radio-primary-hover-border-color:
 * radio-primary-hover-inner-circle-color:
 * radio-primary-hover-checked-background-color:
 * radio-primary-active-border-color:
 * radio-primary-active-inner-circle-color:
 * radio-primary-disabled-background-color:
 * radio-primary-disabled-border-color:
 * radio-primary-disabled-text-color:
 * radio-primary-disabled-checked-background-color:
 * radio-primary-disabled-checked-border-color:
 * radio-primary-disabled-checked-inner-circle-color:
 * radio-success-text-color:
 * radio-success-border-color:
 * radio-success-background-color:
 * radio-success-checked-background-color:
 * radio-success-checked-border-color:
 * radio-success-inner-circle-color:
 * radio-success-focus-border-color:
 * radio-success-focus-inner-circle-color:
 * radio-success-hover-background-color:
 * radio-success-hover-border-color:
 * radio-success-hover-inner-circle-color:
 * radio-success-hover-checked-background-color:
 * radio-success-active-border-color:
 * radio-success-active-inner-circle-color:
 * radio-success-disabled-background-color:
 * radio-success-disabled-border-color:
 * radio-success-disabled-text-color:
 * radio-success-disabled-checked-background-color:
 * radio-success-disabled-checked-border-color:
 * radio-success-disabled-checked-inner-circle-color:
 * radio-info-text-color:
 * radio-info-border-color:
 * radio-info-background-color:
 * radio-info-checked-background-color:
 * radio-info-checked-border-color:
 * radio-info-inner-circle-color:
 * radio-info-focus-border-color:
 * radio-info-focus-inner-circle-color:
 * radio-info-hover-background-color:
 * radio-info-hover-border-color:
 * radio-info-hover-inner-circle-color:
 * radio-info-hover-checked-background-color:
 * radio-info-active-border-color:
 * radio-info-active-inner-circle-color:
 * radio-info-disabled-background-color:
 * radio-info-disabled-border-color:
 * radio-info-disabled-text-color:
 * radio-info-disabled-checked-background-color:
 * radio-info-disabled-checked-border-color:
 * radio-info-disabled-checked-inner-circle-color:
 * radio-warning-text-color:
 * radio-warning-border-color:
 * radio-warning-background-color:
 * radio-warning-checked-background-color:
 * radio-warning-checked-border-color:
 * radio-warning-inner-circle-color:
 * radio-warning-focus-border-color:
 * radio-warning-focus-inner-circle-color:
 * radio-warning-hover-background-color:
 * radio-warning-hover-border-color:
 * radio-warning-hover-inner-circle-color:
 * radio-warning-hover-checked-background-color:
 * radio-warning-active-border-color:
 * radio-warning-active-inner-circle-color:
 * radio-warning-disabled-background-color:
 * radio-warning-disabled-border-color:
 * radio-warning-disabled-text-color:
 * radio-warning-disabled-checked-background-color:
 * radio-warning-disabled-checked-border-color:
 * radio-warning-disabled-checked-inner-circle-color:
 * radio-danger-text-color:
 * radio-danger-border-color:
 * radio-danger-background-color:
 * radio-danger-checked-background-color:
 * radio-danger-checked-border-color:
 * radio-danger-inner-circle-color:
 * radio-danger-focus-border-color:
 * radio-danger-focus-inner-circle-color:
 * radio-danger-hover-background-color:
 * radio-danger-hover-border-color:
 * radio-danger-hover-inner-circle-color:
 * radio-danger-hover-checked-background-color:
 * radio-danger-active-border-color:
 * radio-danger-active-inner-circle-color:
 * radio-danger-disabled-background-color:
 * radio-danger-disabled-border-color:
 * radio-danger-disabled-text-color:
 * radio-danger-disabled-checked-background-color:
 * radio-danger-disabled-checked-border-color:
 * radio-danger-disabled-checked-inner-circle-color:
 * radio-control-text-color:
 * radio-control-background-color:
 * radio-control-border-color:
 * radio-control-checked-background-color:
 * radio-control-checked-border-color:
 * radio-control-inner-circle-color:
 * radio-control-focus-border-color:
 * radio-control-focus-inner-circle-color:
 * radio-control-hover-background-color:
 * radio-control-hover-border-color:
 * radio-control-hover-inner-circle-color:
 * radio-control-hover-checked-background-color:
 * radio-control-active-border-color:
 * radio-control-active-inner-circle-color:
 * radio-control-disabled-background-color:
 * radio-control-disabled-border-color:
 * radio-control-disabled-text-color:
 * radio-control-disabled-checked-background-color:
 * radio-control-disabled-checked-border-color:
 * radio-control-disabled-checked-inner-circle-color:
 * */
var NbRadioComponent = /** @class */ (function () {
    function NbRadioComponent(cd, renderer) {
        this.cd = cd;
        this.renderer = renderer;
        this._checked = false;
        this._disabled = false;
        this._status = 'basic';
        this.valueChange = new i0.EventEmitter();
        this.blur = new i0.EventEmitter();
    }
    Object.defineProperty(NbRadioComponent.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            if (this._name !== value) {
                this._name = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioComponent.prototype, "checked", {
        get: function () {
            return this._checked;
        },
        set: function (value) {
            var boolValue = convertToBoolProperty(value);
            if (this._checked !== boolValue) {
                this._checked = boolValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (this._value !== value) {
                this._value = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (disabled) {
            var boolValue = convertToBoolProperty(disabled);
            if (this._disabled !== boolValue) {
                this._disabled = boolValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioComponent.prototype, "status", {
        get: function () {
            return this._status;
        },
        set: function (value) {
            if (value === '') {
                emptyStatusWarning('NbRadio');
                value = 'basic';
            }
            if (this._status !== value) {
                this._status = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioComponent.prototype, "isPrimary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioComponent.prototype, "isSuccess", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioComponent.prototype, "isWarning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioComponent.prototype, "isDanger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioComponent.prototype, "isInfo", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioComponent.prototype, "isBasic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioComponent.prototype, "isControl", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    NbRadioComponent.prototype.onChange = function (event) {
        event.stopPropagation();
        this.checked = true;
        this.valueChange.emit(this.value);
    };
    NbRadioComponent.prototype.onClick = function (event) {
        event.stopPropagation();
    };
    /*
     * @docs-private
     * We use this method when setting radio inputs from radio group component.
     * Otherwise Angular won't detect changes in radio template as cached last rendered
     * value didn't updated.
     **/
    NbRadioComponent.prototype._markForCheck = function () {
        this.cd.markForCheck();
    };
    /*
     * @docs-private
     * Use this method when setting radio name from radio group component.
     * In case option 'name' isn't set on nb-radio component we need to set name
     * right away, so it won't overlap with options without names from other radio
     * groups. Otherwise they all would have same name and will be considered as
     * options from one group so only the last option will stay selected.
     **/
    NbRadioComponent.prototype._setName = function (name) {
        this.name = name;
        if (this.input) {
            this.renderer.setProperty(this.input.nativeElement, 'name', name);
        }
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbRadioComponent.prototype, "name", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbRadioComponent.prototype, "checked", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbRadioComponent.prototype, "value", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbRadioComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbRadioComponent.prototype, "status", null);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbRadioComponent.prototype, "valueChange", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbRadioComponent.prototype, "blur", void 0);
    tslib.__decorate([
        i0.ViewChild('input', { read: i0.ElementRef }),
        tslib.__metadata("design:type", i0.ElementRef)
    ], NbRadioComponent.prototype, "input", void 0);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbRadioComponent.prototype, "isPrimary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbRadioComponent.prototype, "isSuccess", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbRadioComponent.prototype, "isWarning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbRadioComponent.prototype, "isDanger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbRadioComponent.prototype, "isInfo", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbRadioComponent.prototype, "isBasic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [])
    ], NbRadioComponent.prototype, "isControl", null);
    NbRadioComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-radio',
            template: "\n    <label>\n      <input\n        #input\n        type=\"radio\"\n        class=\"native-input visually-hidden\"\n        [name]=\"name\"\n        [value]=\"value\"\n        [checked]=\"checked\"\n        [disabled]=\"disabled\"\n        (change)=\"onChange($event)\"\n        (click)=\"onClick($event)\">\n      <span class=\"outer-circle\"></span>\n      <span class=\"inner-circle\"></span>\n      <span class=\"text\">\n        <ng-content></ng-content>\n      </span>\n    </label>\n  ",
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: [":host{display:block;position:relative}:host label{display:inline-flex;margin:0;min-height:inherit;padding:0.375rem 0;align-items:center}[dir=ltr] :host label{padding-right:1.5rem}[dir=rtl] :host label{padding-left:1.5rem}:host .outer-circle,:host .inner-circle{border-radius:50%;position:absolute;top:50%;transform:translateY(-50%)}[dir=ltr] :host .outer-circle,[dir=ltr] :host .inner-circle{left:0}[dir=rtl] :host .outer-circle,[dir=rtl] :host .inner-circle{right:0}:host .inner-circle{transform:translateY(-50%) scale(0.6)}[dir=ltr] :host .text{padding-left:.5rem}[dir=rtl] :host .text{padding-right:.5rem}\n"]
        }),
        tslib.__metadata("design:paramtypes", [i0.ChangeDetectorRef,
            i0.Renderer2])
    ], NbRadioComponent);
    return NbRadioComponent;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * The `NbRadioGroupComponent` is the wrapper for `nb-radio` button.
 * It provides form bindings:
 *
 * ```html
 * <nb-radio-group [(ngModel)]="selectedOption">
 *   <nb-radio value="1">Option 1</nb-radio>
 *   <nb-radio value="2">Option 2</nb-radio>
 *   <nb-radio value="3">Option 3</nb-radio>
 * </nb-radio-group>
 * ```
 *
 * Also, you can use `value` and `valueChange` for binding without forms.
 *
 * ```html
 * <nb-radio-group [(value)]="selectedOption">
 *   <nb-radio value="1">Option 1</nb-radio>
 *   <nb-radio value="2">Option 2</nb-radio>
 *   <nb-radio value="3">Option 3</nb-radio>
 * </nb-radio-group>
 * ```
 *
 * Radio items name has to be provided through `name` input property of the radio group.
 *
 * ```html
 * <nb-radio-group name="my-radio-group">
 *   ...
 * </nb-radio-group>
 * ```
 *
 * You can change radio group status by setting `status` input.
 * @stacked-example(Statuses, radio/radio-statuses.component)
 *
 * Also, you can disable the whole group using `disabled` attribute.
 * @stacked-example(Disabled group, radio/radio-disabled-group.component)
 *
 * */
var NbRadioGroupComponent = /** @class */ (function () {
    function NbRadioGroupComponent(hostElement, platformId, document) {
        this.hostElement = hostElement;
        this.platformId = platformId;
        this.document = document;
        this.destroy$ = new rxjs.Subject();
        this.onChange = function (value) { };
        this.onTouched = function () { };
        this._status = 'basic';
        this.valueChange = new i0.EventEmitter();
    }
    NbRadioGroupComponent_1 = NbRadioGroupComponent;
    Object.defineProperty(NbRadioGroupComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
            this.updateValues();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioGroupComponent.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (name) {
            this._name = name;
            this.updateNames();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioGroupComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (disabled) {
            this._disabled = convertToBoolProperty(disabled);
            this.updateDisabled();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbRadioGroupComponent.prototype, "status", {
        /**
         * Radio buttons status.
         * Possible values are `primary` (default), `success`, `warning`, `danger`, `info`.
         */
        get: function () {
            return this._status;
        },
        set: function (value) {
            if (value === '') {
                emptyStatusWarning('NbRadio');
                value = 'basic';
            }
            if (this._status !== value) {
                this._status = value;
                this.updateStatus();
            }
        },
        enumerable: true,
        configurable: true
    });
    NbRadioGroupComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        // In case option 'name' isn't set on nb-radio component,
        // we need to set it's name right away, so it won't overlap with options
        // without names from other radio groups. Otherwise they all would have
        // same name and will be considered as options from one group so only the
        // last option will stay selected.
        this.updateNames();
        Promise.resolve().then(function () { return _this.updateAndSubscribeToRadios(); });
        this.radios.changes
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () {
            // 'changes' emit during change detection run and we can't update
            // option properties right of since they already was initialized.
            // Instead we schedule microtask to update radios after change detection
            // run is finished.
            Promise.resolve().then(function () { return _this.updateAndSubscribeToRadios(); });
        });
    };
    NbRadioGroupComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbRadioGroupComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    NbRadioGroupComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    NbRadioGroupComponent.prototype.writeValue = function (value) {
        this.value = value;
        if (typeof value !== 'undefined') {
            this.updateValues();
        }
    };
    NbRadioGroupComponent.prototype.updateAndSubscribeToRadios = function () {
        this.updateNames();
        this.updateValues();
        this.updateDisabled();
        this.updateStatus();
        this.subscribeOnRadiosValueChange();
        this.subscribeOnRadiosBlur();
    };
    NbRadioGroupComponent.prototype.updateNames = function () {
        var _this = this;
        if (this.radios) {
            this.radios.forEach(function (radio) { return radio._setName(_this.name); });
        }
    };
    NbRadioGroupComponent.prototype.updateValues = function () {
        var _this = this;
        if (typeof this.value !== 'undefined') {
            this.updateAndMarkForCheckRadios(function (radio) { return radio.checked = radio.value === _this.value; });
        }
    };
    NbRadioGroupComponent.prototype.updateDisabled = function () {
        var _this = this;
        if (typeof this.disabled !== 'undefined') {
            this.updateAndMarkForCheckRadios(function (radio) { return radio.disabled = _this.disabled; });
        }
    };
    NbRadioGroupComponent.prototype.subscribeOnRadiosValueChange = function () {
        var _this = this;
        if (!this.radios || !this.radios.length) {
            return;
        }
        rxjs.merge.apply(void 0, this.radios.map(function (radio) { return radio.valueChange; })).pipe(rxjs_operators.takeUntil(rxjs.merge(this.radios.changes, this.destroy$)))
            .subscribe(function (value) {
            _this.writeValue(value);
            _this.propagateValue(value);
        });
    };
    NbRadioGroupComponent.prototype.propagateValue = function (value) {
        this.valueChange.emit(value);
        this.onChange(value);
    };
    NbRadioGroupComponent.prototype.subscribeOnRadiosBlur = function () {
        var _this = this;
        var hasNoRadios = !this.radios || !this.radios.length;
        if (!_angular_common.isPlatformBrowser(this.platformId) || hasNoRadios) {
            return;
        }
        var hostElement = this.hostElement.nativeElement;
        rxjs.fromEvent(hostElement, 'focusin')
            .pipe(rxjs_operators.filter(function (event) { return hostElement.contains(event.target); }), rxjs_operators.switchMap(function () { return rxjs.merge(rxjs.fromEvent(_this.document, 'focusin'), rxjs.fromEvent(_this.document, 'click')); }), rxjs_operators.filter(function (event) { return !hostElement.contains(event.target); }), rxjs_operators.takeUntil(rxjs.merge(this.radios.changes, this.destroy$)))
            .subscribe(function () { return _this.onTouched(); });
    };
    NbRadioGroupComponent.prototype.updateStatus = function () {
        var _this = this;
        this.updateAndMarkForCheckRadios(function (radio) { return radio.status = _this.status; });
    };
    NbRadioGroupComponent.prototype.updateAndMarkForCheckRadios = function (updateFn) {
        if (this.radios) {
            this.radios.forEach(function (radio) {
                updateFn(radio);
                radio._markForCheck();
            });
        }
    };
    var NbRadioGroupComponent_1;
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbRadioGroupComponent.prototype, "value", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbRadioGroupComponent.prototype, "name", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbRadioGroupComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbRadioGroupComponent.prototype, "status", null);
    tslib.__decorate([
        i0.ContentChildren(NbRadioComponent, { descendants: true }),
        tslib.__metadata("design:type", i0.QueryList)
    ], NbRadioGroupComponent.prototype, "radios", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbRadioGroupComponent.prototype, "valueChange", void 0);
    NbRadioGroupComponent = NbRadioGroupComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'nb-radio-group',
            template: "\n    <ng-content select=\"nb-radio\"></ng-content>",
            providers: [
                {
                    provide: _angular_forms.NG_VALUE_ACCESSOR,
                    useExisting: i0.forwardRef(function () { return NbRadioGroupComponent_1; }),
                    multi: true,
                },
            ],
            changeDetection: i0.ChangeDetectionStrategy.OnPush
        }),
        tslib.__param(1, i0.Inject(i0.PLATFORM_ID)),
        tslib.__param(2, i0.Inject(NB_DOCUMENT)),
        tslib.__metadata("design:paramtypes", [i0.ElementRef, Object, Object])
    ], NbRadioGroupComponent);
    return NbRadioGroupComponent;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbRadioModule = /** @class */ (function () {
    function NbRadioModule() {
    }
    NbRadioModule = tslib.__decorate([
        i0.NgModule({
            imports: [],
            exports: [NbRadioComponent, NbRadioGroupComponent],
            declarations: [NbRadioComponent, NbRadioGroupComponent],
        })
    ], NbRadioModule);
    return NbRadioModule;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_DEFAULT_ROW_LEVEL = 0;
/**
 * Implicit context of cells and rows
 */
var NbTreeGridPresentationNode = /** @class */ (function () {
    function NbTreeGridPresentationNode(
    /**
     * Data object associated with row
     */
    data, children, 
    /**
     * Row expand state
     */
    expanded, level) {
        this.data = data;
        this.children = children;
        this.expanded = expanded;
        this.level = level;
    }
    /**
     * True if row has child rows
     */
    NbTreeGridPresentationNode.prototype.hasChildren = function () {
        return !!this.children && !!this.children.length;
    };
    return NbTreeGridPresentationNode;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbTreeGridDataService = /** @class */ (function () {
    function NbTreeGridDataService() {
        this.defaultGetters = {
            dataGetter: function (node) { return node.data; },
            childrenGetter: function (d) { return d.children || undefined; },
            expandedGetter: function (d) { return !!d.expanded; },
        };
    }
    NbTreeGridDataService.prototype.toPresentationNodes = function (nodes, customGetters, level) {
        if (level === void 0) { level = NB_DEFAULT_ROW_LEVEL; }
        var getters = tslib.__assign(tslib.__assign({}, this.defaultGetters), customGetters);
        return this.mapNodes(nodes, getters, level);
    };
    NbTreeGridDataService.prototype.mapNodes = function (nodes, getters, level) {
        var _this = this;
        var dataGetter = getters.dataGetter, childrenGetter = getters.childrenGetter, expandedGetter = getters.expandedGetter;
        return nodes.map(function (node) {
            var childrenNodes = childrenGetter(node);
            var children;
            if (childrenNodes) {
                children = _this.toPresentationNodes(childrenNodes, getters, level + 1);
            }
            return new NbTreeGridPresentationNode(dataGetter(node), children, expandedGetter(node), level);
        });
    };
    NbTreeGridDataService.prototype.flattenExpanded = function (nodes) {
        var _this = this;
        return nodes.reduce(function (res, node) {
            res.push(node);
            if (node.expanded && node.hasChildren()) {
                res.push.apply(res, _this.flattenExpanded(node.children));
            }
            return res;
        }, []);
    };
    NbTreeGridDataService.prototype.copy = function (nodes) {
        var _this = this;
        return nodes.map(function (node) {
            var children;
            if (node.hasChildren()) {
                children = _this.copy(node.children);
            }
            return new NbTreeGridPresentationNode(node.data, children, node.expanded, node.level);
        });
    };
    NbTreeGridDataService = tslib.__decorate([
        i0.Injectable()
    ], NbTreeGridDataService);
    return NbTreeGridDataService;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Service used to filter tree grid data. Searched searchString in all object values.
 * If you need custom filter, you can extend this service and override filterPredicate or whole filter method.
 */
var NbTreeGridFilterService = /** @class */ (function () {
    function NbTreeGridFilterService() {
    }
    NbTreeGridFilterService.prototype.filter = function (query, data) {
        var _this = this;
        if (!query) {
            return data;
        }
        return data.reduce(function (filtered, node) {
            var filteredChildren;
            if (node.children) {
                filteredChildren = _this.filter(query, node.children);
                node.children = filteredChildren;
            }
            node.expanded = false;
            if (filteredChildren && filteredChildren.length) {
                node.expanded = true;
                filtered.push(node);
            }
            else if (_this.filterPredicate(node.data, query)) {
                filtered.push(node);
            }
            return filtered;
        }, []);
    };
    NbTreeGridFilterService.prototype.filterPredicate = function (data, searchQuery) {
        var preparedQuery = searchQuery.trim().toLocaleLowerCase();
        for (var _i = 0, _a = Object.values(data); _i < _a.length; _i++) {
            var val = _a[_i];
            var preparedVal = ("" + val).trim().toLocaleLowerCase();
            if (preparedVal.includes(preparedQuery)) {
                return true;
            }
        }
        return false;
    };
    NbTreeGridFilterService = tslib.__decorate([
        i0.Injectable()
    ], NbTreeGridFilterService);
    return NbTreeGridFilterService;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */

(function (NbSortDirection) {
    NbSortDirection["ASCENDING"] = "asc";
    NbSortDirection["DESCENDING"] = "desc";
    NbSortDirection["NONE"] = "";
})(exports.NbSortDirection || (exports.NbSortDirection = {}));
var sortDirections = [
    exports.NbSortDirection.ASCENDING,
    exports.NbSortDirection.DESCENDING,
    exports.NbSortDirection.NONE,
];
/**
 * Directive triggers sort method of passed object when sort header changes direction
 */
var NbSortDirective = /** @class */ (function () {
    function NbSortDirective() {
        this.sort = new i0.EventEmitter();
    }
    NbSortDirective.prototype.emitSort = function (sortRequest) {
        if (this.sortable && this.sortable.sort) {
            this.sortable.sort(sortRequest);
        }
        this.sort.emit(sortRequest);
    };
    tslib.__decorate([
        i0.Input('nbSort'),
        tslib.__metadata("design:type", Object)
    ], NbSortDirective.prototype, "sortable", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", i0.EventEmitter)
    ], NbSortDirective.prototype, "sort", void 0);
    NbSortDirective = tslib.__decorate([
        i0.Directive({ selector: '[nbSort]' })
    ], NbSortDirective);
    return NbSortDirective;
}());
/**
 * Directive for headers sort icons. Mark you icon implementation with this structural directive and
 * it'll set template's implicit context with current direction. Context also has `isAscending`,
 * `isDescending` and `isNone` properties.
 */
var NbSortHeaderIconDirective = /** @class */ (function () {
    function NbSortHeaderIconDirective() {
    }
    NbSortHeaderIconDirective = tslib.__decorate([
        i0.Directive({ selector: '[nbSortHeaderIcon]' })
    ], NbSortHeaderIconDirective);
    return NbSortHeaderIconDirective;
}());
var NbSortIconComponent = /** @class */ (function () {
    function NbSortIconComponent() {
        this.direction = exports.NbSortDirection.NONE;
    }
    NbSortIconComponent.prototype.isAscending = function () {
        return this.direction === exports.NbSortDirection.ASCENDING;
    };
    NbSortIconComponent.prototype.isDescending = function () {
        return this.direction === exports.NbSortDirection.DESCENDING;
    };
    NbSortIconComponent.prototype.isDirectionSet = function () {
        return this.isAscending() || this.isDescending();
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbSortIconComponent.prototype, "direction", void 0);
    NbSortIconComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-sort-icon',
            template: "\n    <ng-container *ngIf=\"isDirectionSet()\">\n      <nb-icon *ngIf=\"isAscending()\" icon=\"chevron-down-outline\" pack=\"nebular-essentials\" aria-hidden=\"true\"></nb-icon>\n      <nb-icon *ngIf=\"isDescending()\" icon=\"chevron-up-outline\" pack=\"nebular-essentials\" aria-hidden=\"true\"></nb-icon>\n    </ng-container>\n  "
        })
    ], NbSortIconComponent);
    return NbSortIconComponent;
}());
/**
 * Marks header as sort header so it emitting sort event when clicked.
 */
var NbSortHeaderComponent = /** @class */ (function () {
    function NbSortHeaderComponent(sort, columnDef) {
        this.sort = sort;
        this.columnDef = columnDef;
        this.disabledValue = false;
    }
    Object.defineProperty(NbSortHeaderComponent.prototype, "disabled", {
        get: function () {
            return this.disabledValue;
        },
        /**
         * Disable sort header
         */
        set: function (value) {
            this.disabledValue = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NbSortHeaderComponent.prototype.sortIfEnabled = function () {
        if (!this.disabled) {
            this.sortData();
        }
    };
    NbSortHeaderComponent.prototype.isAscending = function () {
        return this.direction === exports.NbSortDirection.ASCENDING;
    };
    NbSortHeaderComponent.prototype.isDescending = function () {
        return this.direction === exports.NbSortDirection.DESCENDING;
    };
    NbSortHeaderComponent.prototype.sortData = function () {
        var sortRequest = this.createSortRequest();
        this.sort.emitSort(sortRequest);
    };
    NbSortHeaderComponent.prototype.getIconContext = function () {
        return {
            $implicit: this.direction,
            isAscending: this.isAscending(),
            isDescending: this.isDescending(),
            isNone: !this.isAscending() && !this.isDescending(),
        };
    };
    NbSortHeaderComponent.prototype.getDisabledAttributeValue = function () {
        return this.disabled ? '' : null;
    };
    NbSortHeaderComponent.prototype.createSortRequest = function () {
        this.direction = this.getNextDirection();
        return { direction: this.direction, column: this.columnDef.name };
    };
    NbSortHeaderComponent.prototype.getNextDirection = function () {
        var sortDirectionCycle = sortDirections;
        var nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;
        if (nextDirectionIndex >= sortDirectionCycle.length) {
            nextDirectionIndex = 0;
        }
        return sortDirectionCycle[nextDirectionIndex];
    };
    tslib.__decorate([
        i0.ContentChild(NbSortHeaderIconDirective, { read: i0.TemplateRef }),
        tslib.__metadata("design:type", i0.TemplateRef)
    ], NbSortHeaderComponent.prototype, "sortIcon", void 0);
    tslib.__decorate([
        i0.Input('nbSortHeader'),
        tslib.__metadata("design:type", String)
    ], NbSortHeaderComponent.prototype, "direction", void 0);
    tslib.__decorate([
        i0.Input(),
        i0.HostBinding('class.disabled'),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbSortHeaderComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.HostListener('click'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbSortHeaderComponent.prototype, "sortIfEnabled", null);
    NbSortHeaderComponent = tslib.__decorate([
        i0.Component({
            selector: '[nbSortHeader]',
            template: "\n    <button\n      class=\"nb-tree-grid-header-change-sort-button\"\n      type=\"button\"\n      [attr.disabled]=\"getDisabledAttributeValue()\"\n      (click)=\"sortData()\">\n      <ng-content></ng-content>\n    </button>\n    <nb-sort-icon *ngIf=\"!sortIcon; else customIcon\" [direction]=\"direction\"></nb-sort-icon>\n    <ng-template #customIcon [ngTemplateOutlet]=\"sortIcon\" [ngTemplateOutletContext]=\"getIconContext()\"></ng-template>\n  "
        }),
        tslib.__param(1, i0.Inject(NB_SORT_HEADER_COLUMN_DEF)),
        tslib.__metadata("design:paramtypes", [NbSortDirective, Object])
    ], NbSortHeaderComponent);
    return NbSortHeaderComponent;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Service used to sort tree grid data. Uses Array.prototype.sort method.
 * If you need custom sorting, you can extend this service and override comparator or whole sort method.
 */
var NbTreeGridSortService = /** @class */ (function () {
    function NbTreeGridSortService() {
    }
    NbTreeGridSortService.prototype.sort = function (request, data) {
        var _this = this;
        if (!request) {
            return data;
        }
        var sorted = data.sort(function (na, nb) { return _this.comparator(request, na, nb); });
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var node = data_1[_i];
            if (node.children) {
                node.children = this.sort(request, node.children);
            }
        }
        return sorted;
    };
    NbTreeGridSortService.prototype.comparator = function (request, na, nb) {
        var key = request.column;
        var dir = request.direction;
        var a = na.data[key];
        var b = nb.data[key];
        var res = 0;
        if (a > b) {
            res = 1;
        }
        if (a < b) {
            res = -1;
        }
        return dir === exports.NbSortDirection.ASCENDING ? res : res * -1;
    };
    NbTreeGridSortService = tslib.__decorate([
        i0.Injectable()
    ], NbTreeGridSortService);
    return NbTreeGridSortService;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbTreeGridService = /** @class */ (function () {
    function NbTreeGridService() {
    }
    NbTreeGridService.prototype.expand = function (data, row, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var node = this.find(data, row);
        node.expanded = true;
        if (options.deep && node.hasChildren()) {
            node.children.forEach(function (n) { return _this.expand(data, n.data, options); });
        }
    };
    NbTreeGridService.prototype.collapse = function (data, row, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var node = this.find(data, row);
        node.expanded = false;
        if (options.deep && node.hasChildren()) {
            node.children.forEach(function (n) { return _this.collapse(data, n.data, options); });
        }
    };
    NbTreeGridService.prototype.toggle = function (data, row, options) {
        if (options === void 0) { options = {}; }
        var node = this.find(data, row);
        if (node.expanded) {
            this.collapse(data, row, options);
        }
        else {
            this.expand(data, row, options);
        }
    };
    NbTreeGridService.prototype.find = function (data, row) {
        var toCheck = tslib.__spreadArrays(data);
        for (var _i = 0, toCheck_1 = toCheck; _i < toCheck_1.length; _i++) {
            var node = toCheck_1[_i];
            if (node.data === row) {
                return node;
            }
            if (node.hasChildren()) {
                toCheck.push.apply(toCheck, node.children);
            }
        }
    };
    NbTreeGridService = tslib.__decorate([
        i0.Injectable()
    ], NbTreeGridService);
    return NbTreeGridService;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbTreeGridDataSource = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridDataSource, _super);
    function NbTreeGridDataSource(sortService, filterService, treeGridService, treeGridDataService) {
        var _this = _super.call(this) || this;
        _this.sortService = sortService;
        _this.filterService = filterService;
        _this.treeGridService = treeGridService;
        _this.treeGridDataService = treeGridDataService;
        /** Stream emitting render data to the table (depends on ordered data changes). */
        _this.renderData = new rxjs.BehaviorSubject([]);
        _this.filterRequest = new rxjs.BehaviorSubject('');
        _this.sortRequest = new rxjs.BehaviorSubject(null);
        return _this;
    }
    NbTreeGridDataSource.prototype.setData = function (data, customGetters) {
        var presentationData = [];
        if (data) {
            presentationData = this.treeGridDataService.toPresentationNodes(data, customGetters);
        }
        this.data = new rxjs.BehaviorSubject(presentationData);
        this.updateChangeSubscription();
    };
    NbTreeGridDataSource.prototype.connect = function (collectionViewer) {
        return this.renderData;
    };
    NbTreeGridDataSource.prototype.disconnect = function (collectionViewer) {
    };
    NbTreeGridDataSource.prototype.expand = function (row) {
        this.treeGridService.expand(this.data.value, row);
        this.data.next(this.data.value);
    };
    NbTreeGridDataSource.prototype.collapse = function (row) {
        this.treeGridService.collapse(this.data.value, row);
        this.data.next(this.data.value);
    };
    NbTreeGridDataSource.prototype.toggle = function (row, options) {
        this.treeGridService.toggle(this.data.value, row, options);
        this.data.next(this.data.value);
    };
    NbTreeGridDataSource.prototype.toggleByIndex = function (dataIndex, options) {
        var node = this.renderData.value && this.renderData.value[dataIndex];
        if (node) {
            this.toggle(node.data, options);
        }
    };
    NbTreeGridDataSource.prototype.getLevel = function (rowIndex) {
        var row = this.renderData.value[rowIndex];
        return row ? row.level : NB_DEFAULT_ROW_LEVEL;
    };
    NbTreeGridDataSource.prototype.sort = function (sortRequest) {
        this.sortRequest.next(sortRequest);
    };
    NbTreeGridDataSource.prototype.filter = function (searchQuery) {
        this.filterRequest.next(searchQuery);
    };
    NbTreeGridDataSource.prototype.updateChangeSubscription = function () {
        var _this = this;
        var dataStream = this.data;
        var filteredData = rxjs.combineLatest(dataStream, this.filterRequest)
            .pipe(rxjs_operators.map(function (_a) {
            var data = _a[0];
            return _this.treeGridDataService.copy(data);
        }), rxjs_operators.map(function (data) { return _this.filterData(data); }));
        var sortedData = rxjs.combineLatest(filteredData, this.sortRequest)
            .pipe(rxjs_operators.map(function (_a) {
            var data = _a[0];
            return _this.sortData(data);
        }));
        sortedData
            .pipe(rxjs_operators.map(function (data) { return _this.treeGridDataService.flattenExpanded(data); }))
            .subscribe(function (data) { return _this.renderData.next(data); });
    };
    NbTreeGridDataSource.prototype.filterData = function (data) {
        return this.filterService.filter(this.filterRequest.value, data);
    };
    NbTreeGridDataSource.prototype.sortData = function (data) {
        return this.sortService.sort(this.sortRequest.value, data);
    };
    return NbTreeGridDataSource;
}(NbDataSource));
var NbTreeGridDataSourceBuilder = /** @class */ (function () {
    function NbTreeGridDataSourceBuilder(filterService, sortService, treeGridService, treeGridDataService) {
        this.filterService = filterService;
        this.sortService = sortService;
        this.treeGridService = treeGridService;
        this.treeGridDataService = treeGridDataService;
    }
    NbTreeGridDataSourceBuilder.prototype.create = function (data, customGetters) {
        var dataSource = new NbTreeGridDataSource(this.sortService, this.filterService, this.treeGridService, this.treeGridDataService);
        dataSource.setData(data, customGetters);
        return dataSource;
    };
    NbTreeGridDataSourceBuilder = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [NbTreeGridFilterService,
            NbTreeGridSortService,
            NbTreeGridService,
            NbTreeGridDataService])
    ], NbTreeGridDataSourceBuilder);
    return NbTreeGridDataSourceBuilder;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NB_TREE_GRID = new i0.InjectionToken('NB_TREE_GRID');

var NbColumnsService = /** @class */ (function () {
    function NbColumnsService(differs) {
        this.differs = differs;
        this.columnHide$ = new rxjs.Subject();
        this.columnShow$ = new rxjs.Subject();
    }
    NbColumnsService.prototype.setColumns = function (columns) {
        if (!this.changesDiffer) {
            this.changesDiffer = this.differs.find(columns || []).create();
        }
        if (this.changesDiffer.diff(columns)) {
            this.allColumns = Array.from(columns);
            this.visibleColumns = Array.from(columns);
        }
    };
    NbColumnsService.prototype.getVisibleColumns = function () {
        return this.visibleColumns;
    };
    NbColumnsService.prototype.hideColumn = function (column) {
        var toRemove = this.visibleColumns.indexOf(column);
        if (toRemove > -1) {
            this.visibleColumns.splice(toRemove, 1);
            this.columnHide$.next();
        }
    };
    NbColumnsService.prototype.showColumn = function (column) {
        if (this.visibleColumns.includes(column)) {
            return;
        }
        this.visibleColumns.splice(this.findInsertIndex(column), 0, column);
        this.columnShow$.next();
    };
    NbColumnsService.prototype.onColumnsChange = function () {
        return rxjs.merge(this.columnShow$, this.columnHide$);
    };
    NbColumnsService.prototype.findInsertIndex = function (column) {
        var initialIndex = this.allColumns.indexOf(column);
        if (initialIndex === 0 || !this.visibleColumns.length) {
            return 0;
        }
        if (initialIndex === this.allColumns.length - 1) {
            return this.visibleColumns.length;
        }
        var leftSiblingIndex = initialIndex - 1;
        for (var i = leftSiblingIndex; i >= 0; i--) {
            var leftSibling = this.allColumns[i];
            var index = this.visibleColumns.indexOf(leftSibling);
            if (index !== -1) {
                return index + 1;
            }
        }
        var rightSiblingIndex = initialIndex + 1;
        for (var i = rightSiblingIndex; i < this.allColumns.length; i++) {
            var rightSibling = this.allColumns[i];
            var index = this.visibleColumns.indexOf(rightSibling);
            if (index !== -1) {
                return index;
            }
        }
        throw new Error("Can't restore column position.");
    };
    NbColumnsService = tslib.__decorate([
        i0.Injectable(),
        tslib.__metadata("design:paramtypes", [i0.IterableDiffers])
    ], NbColumnsService);
    return NbColumnsService;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Tree grid component that can be used to display nested rows of data.
 * Supports filtering and sorting.
 * @stacked-example(Showcase, tree-grid/tree-grid-showcase.component)
 *
 * ### Installation
 *
 * Import `NbTreeGridModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbTreeGridModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 *
 * ### Usage
 *
 * As the most basic usage you need to define [nbTreeGridRowDef](docs/components/treegrid/api#nbtreegridrowdefdirective)
 * where you should pass columns to display in rows and
 * [nbTreeGridColumnDef](docs/components/treegrid/api#nbtreegridcolumndefdirective) - component containing cell
 * definitions for each column passed to row definition.
 * @stacked-example(Basic, tree-grid/tree-grid-basic.component)
 *
 * `NbTreeGridComponent`'s source input and `NbTreeGridDataSourceBuilder.create` expecting data to be an array of
 * objects with `data`, `children` and `expanded` properties. If your data doesn't match this interface, you can pass
 * getter functions for each property as arguments to `NbTreeGridDataSourceBuilder.create` method.
 * @stacked-example(Custom node structure, tree-grid/tree-grid-custom-node-structure.component)
 *
 * To use sorting you can add `nbSort` directive to table and subscribe to `sort` method. When user click on header,
 * sort event will be emitted. Event object contain clicked column name and desired sort direction.
 * @stacked-example(Sortable, tree-grid/tree-grid-sortable.component)
 *
 * You can use `Data Source Builder` to create `NbTreeGridDataSource` which would have toggle, sort and
 * filter methods. Then you can call this methods to change sort or toggle rows programmatically. Also `nbSort` and
 * `nbFilterInput` directives both support `NbTreeGridDataSource`, so you can pass it directly as an input and
 * directives will trigger sort, toggle themselves.
 * @stacked-example(Data Source Builder, tree-grid/tree-grid-showcase.component)
 *
 * You can create responsive grid by setting `hideOn` and `showOn` inputs of
 * [nbTreeGridColumnDef](docs/components/tree-grid/api#nbtreegridcolumndefdirective) directive.
 * When viewport reaches specified width grid hides or shows columns.
 * @stacked-example(Responsive columns, tree-grid/tree-grid-responsive.component)
 *
 * To customize sort or row toggle icons you can use `nbSortHeaderIcon` and `nbTreeGridRowToggle` directives
 * respectively. `nbSortHeaderIcon` is a structural directive and it's implicit context set to current direction.
 * Also context has three properties: `isAscending`, `isDescending` and `isNone`.
 * @stacked-example(Custom icons, tree-grid/tree-grid-custom-icons.component)
 *
 * By default, row to toggle happens when user clicks anywhere in the row. Also double click expands row deeply.
 * To disable this you can set `[clickToToggle]="false"` input of `nbTreeGridRow`.
 * @stacked-example(Disable click toggle, tree-grid/tree-grid-disable-click-toggle.component)
 *
 * @styles
 *
 * tree-grid-cell-border-width:
 * tree-grid-cell-border-style:
 * tree-grid-cell-border-color:
 * tree-grid-row-min-height:
 * tree-grid-cell-padding:
 * tree-grid-header-background-color:
 * tree-grid-header-text-color:
 * tree-grid-header-text-font-family:
 * tree-grid-header-text-font-size:
 * tree-grid-header-text-font-weight:
 * tree-grid-header-text-line-height:
 * tree-grid-footer-background-color:
 * tree-grid-footer-text-color:
 * tree-grid-footer-text-font-family:
 * tree-grid-footer-text-font-size:
 * tree-grid-footer-text-font-weight:
 * tree-grid-footer-text-line-height:
 * tree-grid-row-background-color:
 * tree-grid-row-even-background-color:
 * tree-grid-row-hover-background-color:
 * tree-grid-row-text-color:
 * tree-grid-row-text-font-family:
 * tree-grid-row-text-font-size:
 * tree-grid-row-text-font-weight:
 * tree-grid-row-text-line-height:
 * tree-grid-sort-header-button-background-color:
 * tree-grid-sort-header-button-border:
 * tree-grid-sort-header-button-padding:
 */
var NbTreeGridComponent = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridComponent, _super);
    function NbTreeGridComponent(dataSourceBuilder, differs, changeDetectorRef, elementRef, role, dir, document, platform, window) {
        var _this = _super.call(this, differs, changeDetectorRef, elementRef, role, dir, document, platform) || this;
        _this.dataSourceBuilder = dataSourceBuilder;
        _this.window = window;
        _this.destroy$ = new rxjs.Subject();
        _this.levelPadding = '';
        _this.equalColumnsWidthValue = false;
        _this.treeClass = true;
        _this.platform = platform;
        return _this;
    }
    NbTreeGridComponent_1 = NbTreeGridComponent;
    Object.defineProperty(NbTreeGridComponent.prototype, "source", {
        /**
         * The table's data
         * @param data
         * @type {<T>[] | NbTreeGridDataSource}
         */
        set: function (data) {
            if (!data) {
                return;
            }
            if (data instanceof NbTreeGridDataSource) {
                this._source = data;
            }
            else {
                this._source = this.dataSourceBuilder.create(data);
            }
            this.dataSource = this._source;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbTreeGridComponent.prototype, "equalColumnsWidth", {
        get: function () {
            return this.equalColumnsWidthValue;
        },
        /**
         * Make all columns equal width. False by default.
         */
        set: function (value) {
            this.equalColumnsWidthValue = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NbTreeGridComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.checkDefsCount();
        var rowsChange$ = rxjs.merge(this._contentRowDefs.changes, this._contentHeaderRowDefs.changes, this._contentFooterRowDefs.changes);
        rowsChange$.pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.checkDefsCount(); });
        if (this.platform.isBrowser) {
            this.updateVisibleColumns();
            var windowResize$ = rxjs.fromEvent(this.window, 'resize').pipe(rxjs_operators.debounceTime(50));
            rxjs.merge(rowsChange$, this._contentColumnDefs.changes, windowResize$)
                .pipe(rxjs_operators.takeUntil(this.destroy$))
                .subscribe(function () { return _this.updateVisibleColumns(); });
        }
    };
    NbTreeGridComponent.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbTreeGridComponent.prototype.toggleRow = function (row, options) {
        var context = this.getRowContext(row);
        this._source.toggle(context.$implicit.data, options);
    };
    NbTreeGridComponent.prototype.toggleCellRow = function (cell) {
        var context = this.getCellContext(cell);
        this._source.toggle(context.$implicit.data);
    };
    NbTreeGridComponent.prototype.getColumnWidth = function () {
        if (this.equalColumnsWidth) {
            return 100 / this.getColumnsCount() + "%";
        }
        return '';
    };
    NbTreeGridComponent.prototype.getCellLevel = function (cell, columnName) {
        if (this.isFirstColumn(columnName)) {
            return this.getCellContext(cell).$implicit.level;
        }
        return NB_DEFAULT_ROW_LEVEL;
    };
    NbTreeGridComponent.prototype.getRowContext = function (row) {
        return this.getContextByRowEl(row.elementRef.nativeElement);
    };
    NbTreeGridComponent.prototype.getCellContext = function (cell) {
        return this.getContextByCellEl(cell.elementRef.nativeElement);
    };
    NbTreeGridComponent.prototype.getContextByCellEl = function (cellEl) {
        return this.getContextByRowEl(cellEl.parentElement);
    };
    NbTreeGridComponent.prototype.getContextByRowEl = function (rowEl) {
        var rowsContainer = this._rowOutlet.viewContainer;
        for (var i = 0; i < rowsContainer.length; i++) {
            var rowViewRef = rowsContainer.get(i);
            if (rowViewRef.rootNodes.includes(rowEl)) {
                return rowViewRef.context;
            }
        }
    };
    NbTreeGridComponent.prototype.getColumns = function () {
        var columns = (this._contentHeaderRowDefs.length
            ? this._contentHeaderRowDefs.first
            : this._contentRowDefs.first).columns;
        return Array.from(columns || []);
    };
    NbTreeGridComponent.prototype.getColumnsCount = function () {
        return this.getColumns().length;
    };
    NbTreeGridComponent.prototype.isFirstColumn = function (columnName) {
        return this.getColumns()[0] === columnName;
    };
    NbTreeGridComponent.prototype.checkDefsCount = function () {
        if (this._contentRowDefs.length > 1) {
            throw new Error("Found multiple row definitions");
        }
        if (this._contentHeaderRowDefs.length > 1) {
            throw new Error("Found multiple header row definitions");
        }
        if (this._contentFooterRowDefs.length > 1) {
            throw new Error("Found multiple footer row definitions");
        }
    };
    NbTreeGridComponent.prototype.updateVisibleColumns = function () {
        var width = this.window.innerWidth;
        var columnDefs = this._contentColumnDefs;
        var columnsToHide = columnDefs
            .filter(function (col) { return col.shouldHide(width); })
            .map(function (col) { return col.name; });
        var columnsToShow = columnDefs
            .filter(function (col) { return col.shouldShow(width); })
            .map(function (col) { return col.name; });
        if (!columnsToHide.length && !columnsToShow.length) {
            return;
        }
        var rowDefs = [
            this._contentHeaderRowDefs.first,
            this._contentRowDefs.first,
            this._contentFooterRowDefs.first,
        ].filter(function (d) { return !!d; });
        for (var _i = 0, rowDefs_1 = rowDefs; _i < rowDefs_1.length; _i++) {
            var rowDef = rowDefs_1[_i];
            for (var _a = 0, columnsToHide_1 = columnsToHide; _a < columnsToHide_1.length; _a++) {
                var column = columnsToHide_1[_a];
                rowDef.hideColumn(column);
            }
            for (var _b = 0, columnsToShow_1 = columnsToShow; _b < columnsToShow_1.length; _b++) {
                var column = columnsToShow_1[_b];
                rowDef.showColumn(column);
            }
        }
    };
    var NbTreeGridComponent_1;
    tslib.__decorate([
        i0.Input('nbTreeGrid'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbTreeGridComponent.prototype, "source", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbTreeGridComponent.prototype, "levelPadding", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbTreeGridComponent.prototype, "equalColumnsWidth", null);
    tslib.__decorate([
        i0.HostBinding('class.nb-tree-grid'),
        tslib.__metadata("design:type", Object)
    ], NbTreeGridComponent.prototype, "treeClass", void 0);
    NbTreeGridComponent = NbTreeGridComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'table[nbTreeGrid]',
            template: NB_TABLE_TEMPLATE,
            providers: [
                { provide: NB_TREE_GRID, useExisting: NbTreeGridComponent_1 },
                NbColumnsService,
            ],
            styles: [":host{table-layout:fixed;border-spacing:0;border-collapse:collapse;width:100%;max-width:100%;overflow:auto}::ng-deep .nb-tree-grid-cell,::ng-deep .nb-tree-grid-header-cell,::ng-deep .nb-tree-grid-footer-cell{overflow:hidden}\n"]
        }),
        tslib.__param(4, i0.Attribute('role')),
        tslib.__param(6, i0.Inject(NB_DOCUMENT)),
        tslib.__param(8, i0.Inject(NB_WINDOW)),
        tslib.__metadata("design:paramtypes", [NbTreeGridDataSourceBuilder,
            i0.IterableDiffers,
            i0.ChangeDetectorRef,
            i0.ElementRef, String, NbDirectionality, Object, NbPlatform, Object])
    ], NbTreeGridComponent);
    return NbTreeGridComponent;
}(NbTable));

var NbCdkRowDef = _angular_cdk_table.CdkRowDef;
var NbCdkRow = _angular_cdk_table.CdkRow;
var NbCdkCellDef = _angular_cdk_table.CdkCellDef;
var NbCdkHeaderRowDef = _angular_cdk_table.CdkHeaderRowDef;
var NbCdkHeaderRow = _angular_cdk_table.CdkHeaderRow;
var NbCdkHeaderCellDef = _angular_cdk_table.CdkHeaderCellDef;
var NbCdkFooterRowDef = _angular_cdk_table.CdkFooterRowDef;
var NbCdkFooterRow = _angular_cdk_table.CdkFooterRow;
var NbCdkFooterCellDef = _angular_cdk_table.CdkFooterCellDef;
var NbCdkColumnDef = _angular_cdk_table.CdkColumnDef;
var NbCdkCell = _angular_cdk_table.CdkCell;
var NbCdkHeaderCell = _angular_cdk_table.CdkHeaderCell;
var NbCdkFooterCell = _angular_cdk_table.CdkFooterCell;

/**
 * Data row definition for the tree-grid.
 * Captures the header row's template and columns to display.
 */
var NbTreeGridRowDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridRowDefDirective, _super);
    function NbTreeGridRowDefDirective(template, differs, columnsService) {
        var _this = _super.call(this, template, differs) || this;
        _this.columnsService = columnsService;
        return _this;
    }
    NbTreeGridRowDefDirective_1 = NbTreeGridRowDefDirective;
    Object.defineProperty(NbTreeGridRowDefDirective.prototype, "columns", {
        get: function () {
            return this.columnsService.getVisibleColumns();
        },
        /**
         * Columns to be displayed on this row
         */
        set: function (value) {
            this.columnsService.setColumns(value);
        },
        enumerable: true,
        configurable: true
    });
    /** @docs-private */
    NbTreeGridRowDefDirective.prototype.hideColumn = function (column) {
        this.columnsService.hideColumn(column);
    };
    /** @docs-private */
    NbTreeGridRowDefDirective.prototype.showColumn = function (column) {
        this.columnsService.showColumn(column);
    };
    var NbTreeGridRowDefDirective_1;
    tslib.__decorate([
        i0.Input('nbTreeGridRowDefColumns'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbTreeGridRowDefDirective.prototype, "columns", null);
    NbTreeGridRowDefDirective = NbTreeGridRowDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbTreeGridRowDef]',
            providers: [{ provide: NbCdkRowDef, useExisting: NbTreeGridRowDefDirective_1 }],
        }),
        tslib.__metadata("design:paramtypes", [i0.TemplateRef,
            i0.IterableDiffers,
            NbColumnsService])
    ], NbTreeGridRowDefDirective);
    return NbTreeGridRowDefDirective;
}(NbRowDefDirective));
var NbTreeGridHeaderRowDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridHeaderRowDefDirective, _super);
    function NbTreeGridHeaderRowDefDirective(template, differs, columnsService) {
        var _this = _super.call(this, template, differs) || this;
        _this.columnsService = columnsService;
        return _this;
    }
    NbTreeGridHeaderRowDefDirective_1 = NbTreeGridHeaderRowDefDirective;
    Object.defineProperty(NbTreeGridHeaderRowDefDirective.prototype, "columns", {
        get: function () {
            return this.columnsService.getVisibleColumns();
        },
        /**
         * Columns to be displayed on this row
         */
        set: function (value) {
            this.columnsService.setColumns(value);
        },
        enumerable: true,
        configurable: true
    });
    /** @docs-private */
    NbTreeGridHeaderRowDefDirective.prototype.hideColumn = function (column) {
        this.columnsService.hideColumn(column);
    };
    /** @docs-private */
    NbTreeGridHeaderRowDefDirective.prototype.showColumn = function (column) {
        this.columnsService.showColumn(column);
    };
    var NbTreeGridHeaderRowDefDirective_1;
    tslib.__decorate([
        i0.Input('nbTreeGridHeaderRowDef'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbTreeGridHeaderRowDefDirective.prototype, "columns", null);
    NbTreeGridHeaderRowDefDirective = NbTreeGridHeaderRowDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbTreeGridHeaderRowDef]',
            providers: [{ provide: NbCdkHeaderRowDef, useExisting: NbTreeGridHeaderRowDefDirective_1 }],
        }),
        tslib.__metadata("design:paramtypes", [i0.TemplateRef,
            i0.IterableDiffers,
            NbColumnsService])
    ], NbTreeGridHeaderRowDefDirective);
    return NbTreeGridHeaderRowDefDirective;
}(NbHeaderRowDefDirective));
var NbTreeGridFooterRowDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridFooterRowDefDirective, _super);
    function NbTreeGridFooterRowDefDirective(template, differs, columnsService) {
        var _this = _super.call(this, template, differs) || this;
        _this.columnsService = columnsService;
        return _this;
    }
    NbTreeGridFooterRowDefDirective_1 = NbTreeGridFooterRowDefDirective;
    Object.defineProperty(NbTreeGridFooterRowDefDirective.prototype, "columns", {
        get: function () {
            return this.columnsService.getVisibleColumns();
        },
        /**
         * Columns to be displayed on this row
         */
        set: function (value) {
            this.columnsService.setColumns(value);
        },
        enumerable: true,
        configurable: true
    });
    /** @docs-private */
    NbTreeGridFooterRowDefDirective.prototype.hideColumn = function (column) {
        this.columnsService.hideColumn(column);
    };
    /** @docs-private */
    NbTreeGridFooterRowDefDirective.prototype.showColumn = function (column) {
        this.columnsService.showColumn(column);
    };
    var NbTreeGridFooterRowDefDirective_1;
    tslib.__decorate([
        i0.Input('nbTreeGridFooterRowDef'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [Object])
    ], NbTreeGridFooterRowDefDirective.prototype, "columns", null);
    NbTreeGridFooterRowDefDirective = NbTreeGridFooterRowDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbTreeGridFooterRowDef]',
            providers: [{ provide: NbCdkFooterRowDef, useExisting: NbTreeGridFooterRowDefDirective_1 }],
        }),
        tslib.__metadata("design:paramtypes", [i0.TemplateRef,
            i0.IterableDiffers,
            NbColumnsService])
    ], NbTreeGridFooterRowDefDirective);
    return NbTreeGridFooterRowDefDirective;
}(NbFooterRowDefDirective));
/**
 * Cell definition for a nb-table.
 * Captures the template of a column's data row cell as well as cell-specific properties.
 */
var NbTreeGridCellDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridCellDefDirective, _super);
    function NbTreeGridCellDefDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbTreeGridCellDefDirective_1 = NbTreeGridCellDefDirective;
    var NbTreeGridCellDefDirective_1;
    NbTreeGridCellDefDirective = NbTreeGridCellDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbTreeGridCellDef]',
            providers: [{ provide: NbCdkCellDef, useExisting: NbTreeGridCellDefDirective_1 }],
        })
    ], NbTreeGridCellDefDirective);
    return NbTreeGridCellDefDirective;
}(NbCellDefDirective));
/**
 * Header cell definition for the nb-table.
 * Captures the template of a column's header cell and as well as cell-specific properties.
 */
var NbTreeGridHeaderCellDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridHeaderCellDefDirective, _super);
    function NbTreeGridHeaderCellDefDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbTreeGridHeaderCellDefDirective_1 = NbTreeGridHeaderCellDefDirective;
    var NbTreeGridHeaderCellDefDirective_1;
    NbTreeGridHeaderCellDefDirective = NbTreeGridHeaderCellDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbTreeGridHeaderCellDef]',
            providers: [{ provide: NbCdkHeaderCellDef, useExisting: NbTreeGridHeaderCellDefDirective_1 }],
        })
    ], NbTreeGridHeaderCellDefDirective);
    return NbTreeGridHeaderCellDefDirective;
}(NbHeaderCellDefDirective));
/**
 * Footer cell definition for the nb-table.
 * Captures the template of a column's footer cell and as well as cell-specific properties.
 */
var NbTreeGridFooterCellDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridFooterCellDefDirective, _super);
    function NbTreeGridFooterCellDefDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbTreeGridFooterCellDefDirective_1 = NbTreeGridFooterCellDefDirective;
    var NbTreeGridFooterCellDefDirective_1;
    NbTreeGridFooterCellDefDirective = NbTreeGridFooterCellDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbTreeGridFooterCellDef]',
            providers: [{ provide: NbCdkFooterCellDef, useExisting: NbTreeGridFooterCellDefDirective_1 }],
        })
    ], NbTreeGridFooterCellDefDirective);
    return NbTreeGridFooterCellDefDirective;
}(NbFooterCellDefDirective));

var NB_ROW_DOUBLE_CLICK_DELAY = 200;
/**
 * Cells container. Adds the right class and role.
 */
var NbTreeGridRowComponent = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridRowComponent, _super);
    function NbTreeGridRowComponent(tree, elementRef) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.doubleClick$ = new rxjs.Subject();
        /**
         * Time to wait for second click to expand row deeply.
         * 200ms by default.
         */
        _this.doubleClickDelay = NB_ROW_DOUBLE_CLICK_DELAY;
        /**
         * Toggle row on click. Enabled by default.
         */
        _this.clickToToggle = true;
        _this.tree = tree;
        return _this;
    }
    NbTreeGridRowComponent_1 = NbTreeGridRowComponent;
    NbTreeGridRowComponent.prototype.toggleIfEnabledNode = function () {
        var _this = this;
        if (!this.clickToToggle) {
            return;
        }
        rxjs.timer(NB_ROW_DOUBLE_CLICK_DELAY)
            .pipe(rxjs_operators.take(1), rxjs_operators.takeUntil(this.doubleClick$))
            .subscribe(function () { return _this.tree.toggleRow(_this); });
    };
    NbTreeGridRowComponent.prototype.toggleIfEnabledNodeDeep = function () {
        if (!this.clickToToggle) {
            return;
        }
        this.doubleClick$.next();
        this.tree.toggleRow(this, { deep: true });
    };
    NbTreeGridRowComponent.prototype.ngOnDestroy = function () {
        this.doubleClick$.complete();
    };
    var NbTreeGridRowComponent_1;
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number)
    ], NbTreeGridRowComponent.prototype, "doubleClickDelay", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean)
    ], NbTreeGridRowComponent.prototype, "clickToToggle", void 0);
    tslib.__decorate([
        i0.HostListener('click'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbTreeGridRowComponent.prototype, "toggleIfEnabledNode", null);
    tslib.__decorate([
        i0.HostListener('dblclick'),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], NbTreeGridRowComponent.prototype, "toggleIfEnabledNodeDeep", null);
    NbTreeGridRowComponent = NbTreeGridRowComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'tr[nbTreeGridRow]',
            template: "<ng-container nbCellOutlet></ng-container>",
            host: {
                'class': 'nb-tree-grid-row',
                'role': 'row',
            },
            providers: [{ provide: NbCdkRow, useExisting: NbTreeGridRowComponent_1 }]
        }),
        tslib.__param(0, i0.Inject(NB_TREE_GRID)),
        tslib.__metadata("design:paramtypes", [Object, i0.ElementRef])
    ], NbTreeGridRowComponent);
    return NbTreeGridRowComponent;
}(NbRowComponent));
var NbTreeGridHeaderRowComponent = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridHeaderRowComponent, _super);
    function NbTreeGridHeaderRowComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbTreeGridHeaderRowComponent_1 = NbTreeGridHeaderRowComponent;
    var NbTreeGridHeaderRowComponent_1;
    NbTreeGridHeaderRowComponent = NbTreeGridHeaderRowComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'tr[nbTreeGridHeaderRow]',
            template: "\n    <ng-container nbCellOutlet></ng-container>",
            host: {
                'class': 'nb-tree-grid-header-row',
                'role': 'row',
            },
            providers: [{ provide: NbCdkHeaderRow, useExisting: NbTreeGridHeaderRowComponent_1 }]
        })
    ], NbTreeGridHeaderRowComponent);
    return NbTreeGridHeaderRowComponent;
}(NbHeaderRowComponent));
var NbTreeGridFooterRowComponent = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridFooterRowComponent, _super);
    function NbTreeGridFooterRowComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NbTreeGridFooterRowComponent_1 = NbTreeGridFooterRowComponent;
    var NbTreeGridFooterRowComponent_1;
    NbTreeGridFooterRowComponent = NbTreeGridFooterRowComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'tr[nbTreeGridFooterRow]',
            template: "\n    <ng-container nbCellOutlet></ng-container>",
            host: {
                'class': 'nb-tree-grid-footer-row',
                'role': 'row',
            },
            providers: [{ provide: NbCdkFooterRow, useExisting: NbTreeGridFooterRowComponent_1 }]
        })
    ], NbTreeGridFooterRowComponent);
    return NbTreeGridFooterRowComponent;
}(NbFooterRowComponent));

/**
 * Column definition for the tree-grid.
 * Defines a set of cells available for a table column.
 */
var NbTreeGridColumnDefDirective = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridColumnDefDirective, _super);
    function NbTreeGridColumnDefDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hideOnValue = null;
        _this.showOnValue = null;
        return _this;
    }
    NbTreeGridColumnDefDirective_1 = NbTreeGridColumnDefDirective;
    Object.defineProperty(NbTreeGridColumnDefDirective.prototype, "hideOn", {
        /**
         * Amount of pixels of viewport at which column should be hidden.
         * type number
         */
        get: function () {
            return this.hideOnValue;
        },
        set: function (value) {
            this.hideOnValue = !value && value !== 0
                ? null
                : parseInt(value, 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbTreeGridColumnDefDirective.prototype, "showOn", {
        /**
         * Amount of pixels of viewport at which column should be shown.
         * type number
         */
        get: function () {
            return this.showOnValue;
        },
        set: function (value) {
            this.showOnValue = !value && value !== 0
                ? null
                : parseInt(value, 10);
        },
        enumerable: true,
        configurable: true
    });
    NbTreeGridColumnDefDirective.prototype.ngOnChanges = function () {
        if (this.hideOn != null && this.showOn != null) {
            throw new Error("hideOn and showOn are mutually exclusive and can't be used simultaneously.");
        }
    };
    NbTreeGridColumnDefDirective.prototype.shouldHide = function (width) {
        return !this.shouldShow(width);
    };
    NbTreeGridColumnDefDirective.prototype.shouldShow = function (width) {
        if (this.hideOn == null && this.showOn == null) {
            return true;
        }
        if (this.hideOn != null) {
            return width > this.hideOn;
        }
        return width >= this.showOn;
    };
    var NbTreeGridColumnDefDirective_1;
    tslib.__decorate([
        i0.Input('nbTreeGridColumnDef'),
        tslib.__metadata("design:type", String)
    ], NbTreeGridColumnDefDirective.prototype, "name", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number),
        tslib.__metadata("design:paramtypes", [Number])
    ], NbTreeGridColumnDefDirective.prototype, "hideOn", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number),
        tslib.__metadata("design:paramtypes", [Number])
    ], NbTreeGridColumnDefDirective.prototype, "showOn", null);
    NbTreeGridColumnDefDirective = NbTreeGridColumnDefDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbTreeGridColumnDef]',
            providers: [
                { provide: NbCdkColumnDef, useExisting: NbTreeGridColumnDefDirective_1 },
                { provide: NB_SORT_HEADER_COLUMN_DEF, useExisting: NbTreeGridColumnDefDirective_1 },
            ],
        })
    ], NbTreeGridColumnDefDirective);
    return NbTreeGridColumnDefDirective;
}(NbColumnDefDirective));

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbTreeGridCellDirective = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridCellDirective, _super);
    function NbTreeGridCellDirective(columnDef, elementRef, tree, platformId, window, sanitizer, directionService, columnService, cd) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.platformId = platformId;
        _this.window = window;
        _this.sanitizer = sanitizer;
        _this.directionService = directionService;
        _this.columnService = columnService;
        _this.cd = cd;
        _this.destroy$ = new rxjs.Subject();
        _this.initialLeftPadding = '';
        _this.initialRightPadding = '';
        _this.tree = tree;
        _this.columnDef = columnDef;
        _this.elementRef = elementRef;
        return _this;
    }
    NbTreeGridCellDirective_1 = NbTreeGridCellDirective;
    Object.defineProperty(NbTreeGridCellDirective.prototype, "columnWidth", {
        get: function () {
            this.latestWidth = this.tree.getColumnWidth();
            if (this.latestWidth) {
                return this.latestWidth;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbTreeGridCellDirective.prototype, "leftPadding", {
        get: function () {
            if (this.directionService.isLtr()) {
                return this.getStartPadding();
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbTreeGridCellDirective.prototype, "rightPadding", {
        get: function () {
            if (this.directionService.isRtl()) {
                return this.getStartPadding();
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    NbTreeGridCellDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (_angular_common.isPlatformBrowser(this.platformId)) {
            var style$$1 = this.window.getComputedStyle(this.elementRef.nativeElement);
            this.initialLeftPadding = style$$1.paddingLeft;
            this.initialRightPadding = style$$1.paddingRight;
        }
        this.columnService.onColumnsChange()
            .pipe(rxjs_operators.filter(function () { return _this.latestWidth !== _this.tree.getColumnWidth(); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.cd.detectChanges(); });
    };
    NbTreeGridCellDirective.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbTreeGridCellDirective.prototype.toggleRow = function () {
        this.tree.toggleCellRow(this);
    };
    Object.defineProperty(NbTreeGridCellDirective.prototype, "initialStartPadding", {
        get: function () {
            return this.directionService.isLtr()
                ? this.initialLeftPadding
                : this.initialRightPadding;
        },
        enumerable: true,
        configurable: true
    });
    NbTreeGridCellDirective.prototype.getStartPadding = function () {
        var rowLevel = this.tree.getCellLevel(this, this.columnDef.name);
        if (rowLevel === NB_DEFAULT_ROW_LEVEL) {
            return null;
        }
        var nestingLevel = rowLevel + 1;
        var padding = '';
        if (this.tree.levelPadding) {
            padding = "calc(" + this.tree.levelPadding + " * " + nestingLevel + ")";
        }
        else if (this.initialStartPadding) {
            padding = "calc(" + this.initialStartPadding + " * " + nestingLevel + ")";
        }
        if (!padding) {
            return null;
        }
        return this.sanitizer.bypassSecurityTrustStyle(padding);
    };
    var NbTreeGridCellDirective_1;
    tslib.__decorate([
        i0.HostBinding('style.width'),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [])
    ], NbTreeGridCellDirective.prototype, "columnWidth", null);
    tslib.__decorate([
        i0.HostBinding('style.padding-left'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbTreeGridCellDirective.prototype, "leftPadding", null);
    tslib.__decorate([
        i0.HostBinding('style.padding-right'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbTreeGridCellDirective.prototype, "rightPadding", null);
    NbTreeGridCellDirective = NbTreeGridCellDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: 'td[nbTreeGridCell]',
            host: {
                'class': 'nb-tree-grid-cell',
                'role': 'gridcell',
            },
            providers: [{ provide: NbCdkCell, useExisting: NbTreeGridCellDirective_1 }],
        }),
        tslib.__param(2, i0.Inject(NB_TREE_GRID)),
        tslib.__param(3, i0.Inject(i0.PLATFORM_ID)),
        tslib.__param(4, i0.Inject(NB_WINDOW)),
        tslib.__metadata("design:paramtypes", [NbTreeGridColumnDefDirective,
            i0.ElementRef, Object, Object, Object, _angular_platformBrowser.DomSanitizer,
            NbLayoutDirectionService,
            NbColumnsService,
            i0.ChangeDetectorRef])
    ], NbTreeGridCellDirective);
    return NbTreeGridCellDirective;
}(NbCellDirective));
var NbTreeGridHeaderCellDirective = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridHeaderCellDirective, _super);
    function NbTreeGridHeaderCellDirective(columnDef, elementRef, tree, columnService, cd) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.columnService = columnService;
        _this.cd = cd;
        _this.destroy$ = new rxjs.Subject();
        _this.tree = tree;
        return _this;
    }
    NbTreeGridHeaderCellDirective_1 = NbTreeGridHeaderCellDirective;
    Object.defineProperty(NbTreeGridHeaderCellDirective.prototype, "columnWidth", {
        get: function () {
            this.latestWidth = this.tree.getColumnWidth();
            return this.latestWidth || null;
        },
        enumerable: true,
        configurable: true
    });
    NbTreeGridHeaderCellDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.columnService.onColumnsChange()
            .pipe(rxjs_operators.filter(function () { return _this.latestWidth !== _this.tree.getColumnWidth(); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.cd.detectChanges(); });
    };
    NbTreeGridHeaderCellDirective.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    var NbTreeGridHeaderCellDirective_1;
    tslib.__decorate([
        i0.HostBinding('style.width'),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [])
    ], NbTreeGridHeaderCellDirective.prototype, "columnWidth", null);
    NbTreeGridHeaderCellDirective = NbTreeGridHeaderCellDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: 'th[nbTreeGridHeaderCell]',
            host: {
                'class': 'nb-tree-grid-header-cell',
                'role': 'columnheader',
            },
            providers: [{ provide: NbCdkHeaderCell, useExisting: NbTreeGridHeaderCellDirective_1 }],
        }),
        tslib.__param(2, i0.Inject(NB_TREE_GRID)),
        tslib.__metadata("design:paramtypes", [NbTreeGridColumnDefDirective,
            i0.ElementRef, Object, NbColumnsService,
            i0.ChangeDetectorRef])
    ], NbTreeGridHeaderCellDirective);
    return NbTreeGridHeaderCellDirective;
}(NbHeaderCellDirective));
var NbTreeGridFooterCellDirective = /** @class */ (function (_super) {
    tslib.__extends(NbTreeGridFooterCellDirective, _super);
    function NbTreeGridFooterCellDirective(columnDef, elementRef, tree, columnService, cd) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.columnService = columnService;
        _this.cd = cd;
        _this.destroy$ = new rxjs.Subject();
        _this.tree = tree;
        return _this;
    }
    NbTreeGridFooterCellDirective_1 = NbTreeGridFooterCellDirective;
    Object.defineProperty(NbTreeGridFooterCellDirective.prototype, "columnWidth", {
        get: function () {
            this.latestWidth = this.tree.getColumnWidth();
            return this.latestWidth || null;
        },
        enumerable: true,
        configurable: true
    });
    NbTreeGridFooterCellDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.columnService.onColumnsChange()
            .pipe(rxjs_operators.filter(function () { return _this.latestWidth !== _this.tree.getColumnWidth(); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.cd.detectChanges(); });
    };
    NbTreeGridFooterCellDirective.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    var NbTreeGridFooterCellDirective_1;
    tslib.__decorate([
        i0.HostBinding('style.width'),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [])
    ], NbTreeGridFooterCellDirective.prototype, "columnWidth", null);
    NbTreeGridFooterCellDirective = NbTreeGridFooterCellDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: 'td[nbTreeGridFooterCell]',
            host: {
                'class': 'nb-tree-grid-footer-cell',
                'role': 'gridcell',
            },
            providers: [{ provide: NbCdkFooterCell, useExisting: NbTreeGridFooterCellDirective_1 }],
        }),
        tslib.__param(2, i0.Inject(NB_TREE_GRID)),
        tslib.__metadata("design:paramtypes", [NbTreeGridColumnDefDirective,
            i0.ElementRef, Object, NbColumnsService,
            i0.ChangeDetectorRef])
    ], NbTreeGridFooterCellDirective);
    return NbTreeGridFooterCellDirective;
}(NbFooterCellDirective));

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbFilterDirective = /** @class */ (function () {
    function NbFilterDirective() {
    }
    NbFilterDirective.prototype.filter = function (filterRequest) {
        this.filterable.filter(filterRequest);
    };
    tslib.__decorate([
        i0.Input('nbFilter'),
        tslib.__metadata("design:type", Object)
    ], NbFilterDirective.prototype, "filterable", void 0);
    NbFilterDirective = tslib.__decorate([
        i0.Directive({ selector: '[nbFilter]' })
    ], NbFilterDirective);
    return NbFilterDirective;
}());
/**
 * Helper directive to trigger data source's filter method when user types in input
 */
var NbFilterInputDirective = /** @class */ (function (_super) {
    tslib.__extends(NbFilterInputDirective, _super);
    function NbFilterInputDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.search$ = new rxjs.Subject();
        _this.destroy$ = new rxjs.Subject();
        /**
         * Debounce time before triggering filter method. Set in milliseconds.
         * Default 200.
         */
        _this.debounceTime = 200;
        return _this;
    }
    NbFilterInputDirective_1 = NbFilterInputDirective;
    NbFilterInputDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.search$
            .pipe(rxjs_operators.debounceTime(this.debounceTime), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function (query) {
            _super.prototype.filter.call(_this, query);
        });
    };
    NbFilterInputDirective.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
        this.search$.complete();
    };
    NbFilterInputDirective.prototype.filter = function (event) {
        this.search$.next(event.target.value);
    };
    var NbFilterInputDirective_1;
    tslib.__decorate([
        i0.Input('nbFilterInput'),
        tslib.__metadata("design:type", Object)
    ], NbFilterInputDirective.prototype, "filterable", void 0);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Number)
    ], NbFilterInputDirective.prototype, "debounceTime", void 0);
    tslib.__decorate([
        i0.HostListener('input', ['$event']),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], NbFilterInputDirective.prototype, "filter", null);
    NbFilterInputDirective = NbFilterInputDirective_1 = tslib.__decorate([
        i0.Directive({
            selector: '[nbFilterInput]',
            providers: [{ provide: NbFilterDirective, useExisting: NbFilterInputDirective_1 }],
        })
    ], NbFilterInputDirective);
    return NbFilterInputDirective;
}(NbFilterDirective));

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * When using custom row toggle, apply this directive on your toggle to toggle row on element click.
 */
var NbTreeGridRowToggleDirective = /** @class */ (function () {
    function NbTreeGridRowToggleDirective(cell) {
        this.cell = cell;
    }
    NbTreeGridRowToggleDirective.prototype.toggleRow = function ($event) {
        this.cell.toggleRow();
        $event.stopPropagation();
    };
    tslib.__decorate([
        i0.HostListener('click', ['$event']),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], NbTreeGridRowToggleDirective.prototype, "toggleRow", null);
    NbTreeGridRowToggleDirective = tslib.__decorate([
        i0.Directive({
            selector: '[nbTreeGridRowToggle]',
        }),
        tslib.__metadata("design:paramtypes", [NbTreeGridCellDirective])
    ], NbTreeGridRowToggleDirective);
    return NbTreeGridRowToggleDirective;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * NbTreeGridRowToggleComponent
 */
var NbTreeGridRowToggleComponent = /** @class */ (function () {
    function NbTreeGridRowToggleComponent(cell) {
        this.cell = cell;
    }
    Object.defineProperty(NbTreeGridRowToggleComponent.prototype, "expanded", {
        get: function () {
            return this.expandedValue;
        },
        set: function (value) {
            this.expandedValue = value;
        },
        enumerable: true,
        configurable: true
    });
    NbTreeGridRowToggleComponent.prototype.toggleRow = function ($event) {
        this.cell.toggleRow();
        $event.stopPropagation();
    };
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbTreeGridRowToggleComponent.prototype, "expanded", null);
    tslib.__decorate([
        i0.HostListener('click', ['$event']),
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], NbTreeGridRowToggleComponent.prototype, "toggleRow", null);
    NbTreeGridRowToggleComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-tree-grid-row-toggle',
            template: "\n    <button class=\"row-toggle-button\" [attr.aria-label]=\"expanded ? 'collapse' : 'expand'\">\n      <nb-icon [icon]=\"expanded ? 'chevron-down-outline' : 'chevron-right-outline'\"\n               pack=\"nebular-essentials\"\n               aria-hidden=\"true\">\n      </nb-icon>\n    </button>\n  ",
            styles: ["\n    button {\n      background: transparent;\n      border: none;\n      padding: 0;\n    }\n  "]
        }),
        tslib.__metadata("design:paramtypes", [NbTreeGridCellDirective])
    ], NbTreeGridRowToggleComponent);
    return NbTreeGridRowToggleComponent;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var COMPONENTS$2 = [
    // Tree Grid
    NbTreeGridComponent,
    NbTreeGridRowDefDirective,
    NbTreeGridRowComponent,
    NbTreeGridCellDefDirective,
    NbTreeGridCellDirective,
    NbTreeGridHeaderRowDefDirective,
    NbTreeGridHeaderRowComponent,
    NbTreeGridHeaderCellDefDirective,
    NbTreeGridHeaderCellDirective,
    NbTreeGridFooterRowDefDirective,
    NbTreeGridFooterRowComponent,
    NbTreeGridFooterCellDefDirective,
    NbTreeGridFooterCellDirective,
    NbTreeGridColumnDefDirective,
    // Sort directives
    NbSortDirective,
    NbSortHeaderComponent,
    NbSortIconComponent,
    // Filter directives
    NbFilterDirective,
    NbFilterInputDirective,
    NbTreeGridRowToggleDirective,
    NbTreeGridRowToggleComponent,
    NbSortHeaderIconDirective,
];
var NbTreeGridModule = /** @class */ (function () {
    function NbTreeGridModule() {
    }
    NbTreeGridModule = tslib.__decorate([
        i0.NgModule({
            imports: [_angular_common.CommonModule, NbTableModule, NbIconModule],
            declarations: tslib.__spreadArrays(COMPONENTS$2),
            exports: tslib.__spreadArrays([NbTableModule], COMPONENTS$2),
            providers: [
                NbTreeGridSortService,
                NbTreeGridFilterService,
                NbTreeGridService,
                NbTreeGridDataService,
                NbTreeGridDataSourceBuilder,
            ],
        })
    ], NbTreeGridModule);
    return NbTreeGridModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Toggle is a control representing `on` and `off` states.
 *
 * @stacked-example(Showcase, toggle/toggle-showcase.component)
 *
 * ### Installation
 *
 * Import `NbToggleComponent` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbToggleModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Toggle may have one of the following statuses: `basic`, `primary`, `success`, `warning`, `danger`, `info`, `control`
 *
 * @stacked-example(Toggle status, toggle/toggle-status.component)
 *
 * Toggle can be disabled via `disabled` input.
 *
 * @stacked-example(Disabled Toggles, toggle/toggle-disabled.component)
 *
 * Toggle may have a label with following positions: `left`, `right`, `start`, `end` (default)
 *
 * @stacked-example(Toggles With Labels, toggle/toggle-label-position.component.ts)
 *
 * You can set control state via `checked` binding:
 *
 * ```html
 * <nb-toggle [(checked)]="checked"></nb-toggle>
 * ```
 *
 * Or it could be set via reactive forms or ngModel bindings:
 *
 * @stacked-example(Toggle form binding, toggle/toggle-form.component)
 *
 * @styles
 *
 * toggle-height:
 * toggle-width:
 * toggle-border-width:
 * toggle-border-radius:
 * toggle-outline-width:
 * toggle-outline-color:
 * toggle-switcher-size:
 * toggle-switcher-icon-size:
 * toggle-text-font-family:
 * toggle-text-font-size:
 * toggle-text-font-weight:
 * toggle-text-line-height:
 * toggle-cursor:
 * toggle-disabled-cursor:
 * toggle-basic-text-color:
 * toggle-basic-background-color:
 * toggle-basic-border-color:
 * toggle-basic-checked-background-color:
 * toggle-basic-checked-border-color:
 * toggle-basic-checked-switcher-background-color:
 * toggle-basic-checked-switcher-checkmark-color:
 * toggle-basic-focus-background-color:
 * toggle-basic-focus-border-color:
 * toggle-basic-focus-checked-background-color:
 * toggle-basic-focus-checked-border-color:
 * toggle-basic-hover-background-color:
 * toggle-basic-hover-border-color:
 * toggle-basic-hover-checked-background-color:
 * toggle-basic-hover-checked-border-color:
 * toggle-basic-active-background-color:
 * toggle-basic-active-border-color:
 * toggle-basic-active-checked-background-color:
 * toggle-basic-active-checked-border-color:
 * toggle-basic-disabled-background-color:
 * toggle-basic-disabled-border-color:
 * toggle-basic-disabled-switcher-background-color:
 * toggle-basic-disabled-checked-switcher-checkmark-color:
 * toggle-basic-disabled-text-color:
 * toggle-primary-text-color:
 * toggle-primary-background-color:
 * toggle-primary-border-color:
 * toggle-primary-checked-background-color:
 * toggle-primary-checked-border-color:
 * toggle-primary-checked-switcher-background-color:
 * toggle-primary-checked-switcher-checkmark-color:
 * toggle-primary-focus-background-color:
 * toggle-primary-focus-border-color:
 * toggle-primary-focus-checked-background-color:
 * toggle-primary-focus-checked-border-color:
 * toggle-primary-hover-background-color:
 * toggle-primary-hover-border-color:
 * toggle-primary-hover-checked-background-color:
 * toggle-primary-hover-checked-border-color:
 * toggle-primary-active-background-color:
 * toggle-primary-active-border-color:
 * toggle-primary-active-checked-background-color:
 * toggle-primary-active-checked-border-color:
 * toggle-primary-disabled-background-color:
 * toggle-primary-disabled-border-color:
 * toggle-primary-disabled-switcher-background-color:
 * toggle-primary-disabled-checked-switcher-checkmark-color:
 * toggle-primary-disabled-text-color:
 * toggle-success-text-color:
 * toggle-success-background-color:
 * toggle-success-border-color:
 * toggle-success-checked-background-color:
 * toggle-success-checked-border-color:
 * toggle-success-checked-switcher-background-color:
 * toggle-success-checked-switcher-checkmark-color:
 * toggle-success-focus-background-color:
 * toggle-success-focus-border-color:
 * toggle-success-focus-checked-background-color:
 * toggle-success-focus-checked-border-color:
 * toggle-success-hover-background-color:
 * toggle-success-hover-border-color:
 * toggle-success-hover-checked-background-color:
 * toggle-success-hover-checked-border-color:
 * toggle-success-active-background-color:
 * toggle-success-active-border-color:
 * toggle-success-active-checked-background-color:
 * toggle-success-active-checked-border-color:
 * toggle-success-disabled-background-color:
 * toggle-success-disabled-border-color:
 * toggle-success-disabled-switcher-background-color:
 * toggle-success-disabled-checked-switcher-checkmark-color:
 * toggle-success-disabled-text-color:
 * toggle-info-text-color:
 * toggle-info-background-color:
 * toggle-info-border-color:
 * toggle-info-checked-background-color:
 * toggle-info-checked-border-color:
 * toggle-info-checked-switcher-background-color:
 * toggle-info-checked-switcher-checkmark-color:
 * toggle-info-focus-background-color:
 * toggle-info-focus-border-color:
 * toggle-info-focus-checked-background-color:
 * toggle-info-focus-checked-border-color:
 * toggle-info-hover-background-color:
 * toggle-info-hover-border-color:
 * toggle-info-hover-checked-background-color:
 * toggle-info-hover-checked-border-color:
 * toggle-info-active-background-color:
 * toggle-info-active-border-color:
 * toggle-info-active-checked-background-color:
 * toggle-info-active-checked-border-color:
 * toggle-info-disabled-background-color:
 * toggle-info-disabled-border-color:
 * toggle-info-disabled-switcher-background-color:
 * toggle-info-disabled-checked-switcher-checkmark-color:
 * toggle-info-disabled-text-color:
 * toggle-warning-text-color:
 * toggle-warning-background-color:
 * toggle-warning-border-color:
 * toggle-warning-checked-background-color:
 * toggle-warning-checked-border-color:
 * toggle-warning-checked-switcher-background-color:
 * toggle-warning-checked-switcher-checkmark-color:
 * toggle-warning-focus-background-color:
 * toggle-warning-focus-border-color:
 * toggle-warning-focus-checked-background-color:
 * toggle-warning-focus-checked-border-color:
 * toggle-warning-hover-background-color:
 * toggle-warning-hover-border-color:
 * toggle-warning-hover-checked-background-color:
 * toggle-warning-hover-checked-border-color:
 * toggle-warning-active-background-color:
 * toggle-warning-active-border-color:
 * toggle-warning-active-checked-background-color:
 * toggle-warning-active-checked-border-color:
 * toggle-warning-disabled-background-color:
 * toggle-warning-disabled-border-color:
 * toggle-warning-disabled-switcher-background-color:
 * toggle-warning-disabled-checked-switcher-checkmark-color:
 * toggle-warning-disabled-text-color:
 * toggle-danger-text-color:
 * toggle-danger-background-color:
 * toggle-danger-border-color:
 * toggle-danger-checked-background-color:
 * toggle-danger-checked-border-color:
 * toggle-danger-checked-switcher-background-color:
 * toggle-danger-checked-switcher-checkmark-color:
 * toggle-danger-focus-background-color:
 * toggle-danger-focus-border-color:
 * toggle-danger-focus-checked-background-color:
 * toggle-danger-focus-checked-border-color:
 * toggle-danger-hover-background-color:
 * toggle-danger-hover-border-color:
 * toggle-danger-hover-checked-background-color:
 * toggle-danger-hover-checked-border-color:
 * toggle-danger-active-background-color:
 * toggle-danger-active-border-color:
 * toggle-danger-active-checked-background-color:
 * toggle-danger-active-checked-border-color:
 * toggle-danger-disabled-background-color:
 * toggle-danger-disabled-border-color:
 * toggle-danger-disabled-switcher-background-color:
 * toggle-danger-disabled-checked-switcher-checkmark-color:
 * toggle-danger-disabled-text-color:
 * toggle-control-text-color:
 * toggle-control-background-color:
 * toggle-control-border-color:
 * toggle-control-checked-background-color:
 * toggle-control-checked-border-color:
 * toggle-control-checked-switcher-background-color:
 * toggle-control-checked-switcher-checkmark-color:
 * toggle-control-focus-background-color:
 * toggle-control-focus-border-color:
 * toggle-control-focus-checked-background-color:
 * toggle-control-focus-checked-border-color:
 * toggle-control-hover-background-color:
 * toggle-control-hover-border-color:
 * toggle-control-hover-checked-background-color:
 * toggle-control-hover-checked-border-color:
 * toggle-control-active-background-color:
 * toggle-control-active-border-color:
 * toggle-control-active-checked-background-color:
 * toggle-control-active-checked-border-color:
 * toggle-control-disabled-background-color:
 * toggle-control-disabled-border-color:
 * toggle-control-disabled-switcher-background-color:
 * toggle-control-disabled-checked-switcher-checkmark-color:
 * toggle-control-disabled-text-color:
 */
var NbToggleComponent = /** @class */ (function () {
    function NbToggleComponent(changeDetector, layoutDirection, renderer, hostElement, zone) {
        this.changeDetector = changeDetector;
        this.layoutDirection = layoutDirection;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.zone = zone;
        this.onChange = function () { };
        this.onTouched = function () { };
        this.destroy$ = new rxjs.Subject();
        this._checked = false;
        this._disabled = false;
        this._status = 'basic';
        /**
         * Toggle label position.
         * Possible values are: `left`, `right`, `start`, `end` (default)
         */
        this.labelPosition = 'end';
        /**
         * Output when checked state is changed by a user
         * @type EventEmitter<boolean>
         */
        this.checkedChange = new i0.EventEmitter();
    }
    NbToggleComponent_1 = NbToggleComponent;
    Object.defineProperty(NbToggleComponent.prototype, "checked", {
        /**
         * Toggle checked
         * @type {boolean}
         */
        get: function () {
            return this._checked;
        },
        set: function (value) {
            this._checked = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "disabled", {
        /**
         * Controls input disabled state
         */
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            this._disabled = convertToBoolProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "status", {
        /**
         * Toggle status.
         * Possible values are: `basic`, `primary`, `success`, `warning`, `danger`, `info`, `control`.
         */
        get: function () {
            return this._status;
        },
        set: function (value) {
            if (value === '') {
                emptyStatusWarning('NbToggle');
                value = 'basic';
            }
            this._status = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "primary", {
        get: function () {
            return this.status === 'primary';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "success", {
        get: function () {
            return this.status === 'success';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "warning", {
        get: function () {
            return this.status === 'warning';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "danger", {
        get: function () {
            return this.status === 'danger';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "info", {
        get: function () {
            return this.status === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "basic", {
        get: function () {
            return this.status === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "control", {
        get: function () {
            return this.status === 'control';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "labelLeft", {
        get: function () {
            return this.labelPosition === 'left';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "labelRight", {
        get: function () {
            return this.labelPosition === 'right';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "labelStart", {
        get: function () {
            return this.labelPosition === 'start';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbToggleComponent.prototype, "labelEnd", {
        get: function () {
            return this.labelPosition === 'end';
        },
        enumerable: true,
        configurable: true
    });
    NbToggleComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.layoutDirection.onDirectionChange()
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.changeDetector.detectChanges(); });
    };
    NbToggleComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // TODO: #2254
        this.zone.runOutsideAngular(function () { return setTimeout(function () {
            _this.renderer.addClass(_this.hostElement.nativeElement, 'nb-transition');
        }); });
    };
    NbToggleComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    NbToggleComponent.prototype.checkState = function () {
        if (this.checked) {
            return this.layoutDirection.isLtr() ? 'right' : 'left';
        }
        return this.layoutDirection.isLtr() ? 'left' : 'right';
    };
    NbToggleComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    NbToggleComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    NbToggleComponent.prototype.writeValue = function (val) {
        this.checked = val;
        this.changeDetector.markForCheck();
    };
    NbToggleComponent.prototype.setDisabledState = function (val) {
        this.disabled = convertToBoolProperty(val);
        this.changeDetector.markForCheck();
    };
    NbToggleComponent.prototype.updateValue = function (event) {
        var input = event.target;
        this.checked = input.checked;
        this.checkedChange.emit(this.checked);
        this.onChange(this.checked);
    };
    NbToggleComponent.prototype.onInputClick = function (event) {
        event.stopPropagation();
    };
    var NbToggleComponent_1;
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbToggleComponent.prototype, "checked", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", Boolean),
        tslib.__metadata("design:paramtypes", [Boolean])
    ], NbToggleComponent.prototype, "disabled", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String),
        tslib.__metadata("design:paramtypes", [String])
    ], NbToggleComponent.prototype, "status", null);
    tslib.__decorate([
        i0.Input(),
        tslib.__metadata("design:type", String)
    ], NbToggleComponent.prototype, "labelPosition", void 0);
    tslib.__decorate([
        i0.Output(),
        tslib.__metadata("design:type", Object)
    ], NbToggleComponent.prototype, "checkedChange", void 0);
    tslib.__decorate([
        i0.HostBinding('class.status-primary'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbToggleComponent.prototype, "primary", null);
    tslib.__decorate([
        i0.HostBinding('class.status-success'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbToggleComponent.prototype, "success", null);
    tslib.__decorate([
        i0.HostBinding('class.status-warning'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbToggleComponent.prototype, "warning", null);
    tslib.__decorate([
        i0.HostBinding('class.status-danger'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbToggleComponent.prototype, "danger", null);
    tslib.__decorate([
        i0.HostBinding('class.status-info'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbToggleComponent.prototype, "info", null);
    tslib.__decorate([
        i0.HostBinding('class.status-basic'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbToggleComponent.prototype, "basic", null);
    tslib.__decorate([
        i0.HostBinding('class.status-control'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbToggleComponent.prototype, "control", null);
    tslib.__decorate([
        i0.HostBinding('class.toggle-label-left'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbToggleComponent.prototype, "labelLeft", null);
    tslib.__decorate([
        i0.HostBinding('class.toggle-label-right'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbToggleComponent.prototype, "labelRight", null);
    tslib.__decorate([
        i0.HostBinding('class.toggle-label-start'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbToggleComponent.prototype, "labelStart", null);
    tslib.__decorate([
        i0.HostBinding('class.toggle-label-end'),
        tslib.__metadata("design:type", Object),
        tslib.__metadata("design:paramtypes", [])
    ], NbToggleComponent.prototype, "labelEnd", null);
    NbToggleComponent = NbToggleComponent_1 = tslib.__decorate([
        i0.Component({
            selector: 'nb-toggle',
            animations: [
                _angular_animations.trigger('position', [
                    _angular_animations.state('right', _angular_animations.style({ right: 0, left: '*' })),
                    _angular_animations.state('left', _angular_animations.style({ left: 0, right: '*' })),
                    _angular_animations.transition(':enter', [_angular_animations.animate(0)]),
                    _angular_animations.transition('right <=> left', [_angular_animations.animate('0.15s')]),
                ]),
            ],
            template: "\n    <label class=\"toggle-label\">\n      <input type=\"checkbox\"\n             class=\"native-input visually-hidden\"\n             role=\"switch\"\n             [attr.aria-checked]=\"checked\"\n             [disabled]=\"disabled\"\n             [checked]=\"checked\"\n             (change)=\"updateValue($event)\"\n             (blur)=\"onTouched()\"\n             (click)=\"onInputClick($event)\">\n      <div class=\"toggle\" [class.checked]=\"checked\">\n        <span [@position]=\"checkState()\" class=\"toggle-switcher\">\n          <nb-icon *ngIf=\"checked\" icon=\"checkmark-bold-outline\" pack=\"nebular-essentials\"></nb-icon>\n        </span>\n      </div>\n      <span class=\"text\">\n        <ng-content></ng-content>\n      </span>\n    </label>\n  ",
            providers: [{
                    provide: _angular_forms.NG_VALUE_ACCESSOR,
                    useExisting: i0.forwardRef(function () { return NbToggleComponent_1; }),
                    multi: true,
                }],
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: [":host{display:inline-flex;outline:none}:host(.toggle-label-left) .text:not(:empty){padding-right:0.6875rem}[dir=ltr] :host(.toggle-label-left) .text:not(:empty){order:-1}[dir=rtl] :host(.toggle-label-left) .text:not(:empty){order:1}:host(.toggle-label-right) .text:not(:empty){padding-left:0.6875rem}[dir=ltr] :host(.toggle-label-right) .text:not(:empty){order:1}[dir=rtl] :host(.toggle-label-right) .text:not(:empty){order:-1}:host(.toggle-label-start) .toggle-label{flex-direction:row-reverse}[dir=ltr] :host(.toggle-label-start) .toggle-label .text:not(:empty){padding-right:.6875rem}[dir=rtl] :host(.toggle-label-start) .toggle-label .text:not(:empty){padding-left:.6875rem}[dir=ltr] :host(.toggle-label-end) .text:not(:empty){padding-left:.6875rem}[dir=rtl] :host(.toggle-label-end) .text:not(:empty){padding-right:.6875rem}:host(.nb-transition) .toggle{transition-duration:0.15s;transition-property:background-color,border,box-shadow;transition-timing-function:ease-in}.toggle-label{position:relative;display:inline-flex;align-items:center}.toggle{position:relative;display:inline-flex;box-sizing:content-box}.toggle-switcher{position:absolute;border-radius:50%;margin:1px}.toggle-switcher nb-icon{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}\n"]
        }),
        tslib.__metadata("design:paramtypes", [i0.ChangeDetectorRef,
            NbLayoutDirectionService,
            i0.Renderer2,
            i0.ElementRef,
            i0.NgZone])
    ], NbToggleComponent);
    return NbToggleComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbToggleModule = /** @class */ (function () {
    function NbToggleModule() {
    }
    NbToggleModule = tslib.__decorate([
        i0.NgModule({
            imports: [
                _angular_common.CommonModule,
                NbIconModule,
            ],
            declarations: [NbToggleComponent],
            exports: [NbToggleComponent],
        })
    ], NbToggleModule);
    return NbToggleModule;
}());

var NbPrefixDirective = /** @class */ (function () {
    function NbPrefixDirective() {
    }
    NbPrefixDirective = tslib.__decorate([
        i0.Directive({
            selector: '[nbPrefix]',
        })
    ], NbPrefixDirective);
    return NbPrefixDirective;
}());

var NbSuffixDirective = /** @class */ (function () {
    function NbSuffixDirective() {
    }
    NbSuffixDirective = tslib.__decorate([
        i0.Directive({
            selector: '[nbSuffix]',
        })
    ], NbSuffixDirective);
    return NbSuffixDirective;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
function throwFormControlElementNotFound() {
    throw new Error("NbFormFieldComponent must contain [nbInput]");
}
/*
 * NbFormFieldComponent
 *
 * @styles
 *
 * form-field-addon-basic-text-color:
 * form-field-addon-basic-highlight-text-color:
 * form-field-addon-primary-text-color:
 * form-field-addon-primary-highlight-text-color:
 * form-field-addon-success-text-color:
 * form-field-addon-success-highlight-text-color:
 * form-field-addon-info-text-color:
 * form-field-addon-info-highlight-text-color:
 * form-field-addon-warning-text-color:
 * form-field-addon-warning-highlight-text-color:
 * form-field-addon-danger-text-color:
 * form-field-addon-danger-highlight-text-color:
 * form-field-addon-control-text-color:
 * form-field-addon-control-highlight-text-color:
 * form-field-addon-disabled-text-color:
 * form-field-addon-tiny-height:
 * form-field-addon-tiny-width:
 * form-field-addon-tiny-icon-size:
 * form-field-addon-tiny-font-size:
 * form-field-addon-tiny-line-height:
 * form-field-addon-tiny-font-weight:
 * form-field-addon-small-height:
 * form-field-addon-small-width:
 * form-field-addon-small-icon-size:
 * form-field-addon-small-font-size:
 * form-field-addon-small-line-height:
 * form-field-addon-small-font-weight:
 * form-field-addon-medium-height:
 * form-field-addon-medium-width:
 * form-field-addon-medium-icon-size:
 * form-field-addon-medium-font-size:
 * form-field-addon-medium-line-height:
 * form-field-addon-medium-font-weight:
 * form-field-addon-large-height:
 * form-field-addon-large-width:
 * form-field-addon-large-icon-size:
 * form-field-addon-large-font-size:
 * form-field-addon-large-line-height:
 * form-field-addon-large-font-weight:
 * form-field-addon-giant-height:
 * form-field-addon-giant-width:
 * form-field-addon-giant-icon-size:
 * form-field-addon-giant-font-size:
 * form-field-addon-giant-line-height:
 * form-field-addon-giant-font-weight:
 **/
var NbFormFieldComponent = /** @class */ (function () {
    function NbFormFieldComponent(cd, zone, elementRef, renderer) {
        var _this = this;
        this.cd = cd;
        this.zone = zone;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.destroy$ = new rxjs.Subject();
        this.formControlState$ = new rxjs.ReplaySubject(1);
        this.prefixClasses$ = this.formControlState$.pipe(rxjs_operators.map(function (s) { return _this.getAddonClasses('prefix', s); }));
        this.suffixClasses$ = this.formControlState$.pipe(rxjs_operators.map(function (s) { return _this.getAddonClasses('suffix', s); }));
    }
    NbFormFieldComponent.prototype.ngAfterContentChecked = function () {
        if (!this.formControl) {
            throwFormControlElementNotFound();
        }
    };
    NbFormFieldComponent.prototype.ngAfterContentInit = function () {
        this.subscribeToFormControlStateChange();
        this.subscribeToAddonChange();
    };
    NbFormFieldComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // TODO: #2254
        this.zone.runOutsideAngular(function () { return setTimeout(function () {
            _this.renderer.addClass(_this.elementRef.nativeElement, 'nb-transition');
        }); });
    };
    NbFormFieldComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
    };
    NbFormFieldComponent.prototype.shouldShowPrefix = function () {
        return this.getFormControlConfig().supportsPrefix && !!this.prefix.length;
    };
    NbFormFieldComponent.prototype.shouldShowSuffix = function () {
        return this.getFormControlConfig().supportsSuffix && !!this.suffix.length;
    };
    NbFormFieldComponent.prototype.subscribeToFormControlStateChange = function () {
        var _this = this;
        var _a = this.formControl, disabled$ = _a.disabled$, focused$ = _a.focused$, size$ = _a.size$, status$ = _a.status$;
        rxjs.combineLatest([disabled$, focused$, size$, status$])
            .pipe(rxjs_operators.map(function (_a) {
            var disabled = _a[0], focused = _a[1], size = _a[2], status = _a[3];
            return ({ disabled: disabled, focused: focused, size: size, status: status });
        }), rxjs_operators.distinctUntilChanged(function (oldState, state$$1) { return _this.isStatesEqual(oldState, state$$1); }), rxjs_operators.takeUntil(this.destroy$))
            .subscribe(this.formControlState$);
    };
    NbFormFieldComponent.prototype.subscribeToAddonChange = function () {
        var _this = this;
        rxjs.merge(this.prefix.changes, this.suffix.changes)
            .pipe(rxjs_operators.takeUntil(this.destroy$))
            .subscribe(function () { return _this.cd.markForCheck(); });
    };
    NbFormFieldComponent.prototype.getAddonClasses = function (addon, state$$1) {
        var classes = [
            'nb-form-field-addon',
            "nb-form-field-" + addon + "-" + state$$1.size,
        ];
        if (state$$1.disabled) {
            classes.push("nb-form-field-addon-disabled");
        }
        else if (state$$1.focused) {
            classes.push("nb-form-field-addon-" + state$$1.status + "-highlight");
        }
        else {
            classes.push("nb-form-field-addon-" + state$$1.status);
        }
        return classes;
    };
    NbFormFieldComponent.prototype.getFormControlConfig = function () {
        return this.formControlConfig || new NbFormFieldControlConfig();
    };
    NbFormFieldComponent.prototype.isStatesEqual = function (oldState, state$$1) {
        return oldState.status === state$$1.status &&
            oldState.disabled === state$$1.disabled &&
            oldState.focused === state$$1.focused &&
            oldState.size === state$$1.size;
    };
    tslib.__decorate([
        i0.ContentChildren(NbPrefixDirective, { descendants: true }),
        tslib.__metadata("design:type", i0.QueryList)
    ], NbFormFieldComponent.prototype, "prefix", void 0);
    tslib.__decorate([
        i0.ContentChildren(NbSuffixDirective, { descendants: true }),
        tslib.__metadata("design:type", i0.QueryList)
    ], NbFormFieldComponent.prototype, "suffix", void 0);
    tslib.__decorate([
        i0.ContentChild(NbFormFieldControl, { static: false }),
        tslib.__metadata("design:type", NbFormFieldControl)
    ], NbFormFieldComponent.prototype, "formControl", void 0);
    tslib.__decorate([
        i0.ContentChild(NbFormFieldControlConfig, { static: false }),
        tslib.__metadata("design:type", NbFormFieldControlConfig)
    ], NbFormFieldComponent.prototype, "formControlConfig", void 0);
    NbFormFieldComponent = tslib.__decorate([
        i0.Component({
            selector: 'nb-form-field',
            template: "<div *ngIf=\"shouldShowPrefix()\" [ngClass]=\"prefixClasses$ | async\">\n  <ng-content select=\"[nbPrefix]\"></ng-content>\n</div>\n\n<div class=\"nb-form-control-container\"\n     [class.nb-form-field-control-with-prefix]=\"shouldShowPrefix()\"\n     [class.nb-form-field-control-with-suffix]=\"shouldShowSuffix()\">\n  <ng-content></ng-content>\n</div>\n\n<div *ngIf=\"shouldShowSuffix()\" [ngClass]=\"suffixClasses$ | async\">\n  <ng-content select=\"[nbSuffix]\"></ng-content>\n</div>\n",
            changeDetection: i0.ChangeDetectionStrategy.OnPush,
            styles: [":host{display:flex;align-items:center}.nb-form-control-container{width:100%}\n"]
        }),
        tslib.__metadata("design:paramtypes", [i0.ChangeDetectorRef,
            i0.NgZone,
            i0.ElementRef,
            i0.Renderer2])
    ], NbFormFieldComponent);
    return NbFormFieldComponent;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var COMPONENTS$3 = [
    NbFormFieldComponent,
    NbPrefixDirective,
    NbSuffixDirective,
];
var NbFormFieldModule = /** @class */ (function () {
    function NbFormFieldModule() {
    }
    NbFormFieldModule = tslib.__decorate([
        i0.NgModule({
            imports: [_angular_common.CommonModule],
            declarations: tslib.__spreadArrays(COMPONENTS$3),
            exports: tslib.__spreadArrays(COMPONENTS$3),
        })
    ], NbFormFieldModule);
    return NbFormFieldModule;
}());

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
// TODO: export all components

/**
 * Generated bundle index. Do not edit.
 */

exports.ɵd = NbActiveDescendantKeyManagerFactoryService;
exports.ɵc = NbFocusKeyManagerFactoryService;
exports.ɵa = NbMenuInternalService;
exports.ɵb = NbSharedModule;
exports.NbCalendarDayCellComponent = NbCalendarDayCellComponent;
exports.NbCalendarYearPickerComponent = NbCalendarYearPickerComponent;
exports.NbCalendarMonthPickerComponent = NbCalendarMonthPickerComponent;
exports.MONTHS_IN_VIEW = MONTHS_IN_VIEW;
exports.MONTHS_IN_COLUMN = MONTHS_IN_COLUMN;
exports.NbCalendarDayPickerComponent = NbCalendarDayPickerComponent;
exports.NbCalendarViewModeComponent = NbCalendarViewModeComponent;
exports.NbCalendarPageableNavigationComponent = NbCalendarPageableNavigationComponent;
exports.NbCalendarDaysNamesComponent = NbCalendarDaysNamesComponent;
exports.NbCalendarWeekNumberComponent = NbCalendarWeekNumberComponent;
exports.NbCalendarMonthCellComponent = NbCalendarMonthCellComponent;
exports.NbCalendarYearCellComponent = NbCalendarYearCellComponent;
exports.NbCalendarPickerRowComponent = NbCalendarPickerRowComponent;
exports.NbCalendarPickerComponent = NbCalendarPickerComponent;
exports.NbCalendarMonthModelService = NbCalendarMonthModelService;
exports.NbNativeDateService = NbNativeDateService;
exports.NbDateService = NbDateService;
exports.NbMenuService = NbMenuService;
exports.NbMenuItem = NbMenuItem;
exports.NB_THEME_OPTIONS = NB_THEME_OPTIONS;
exports.NB_MEDIA_BREAKPOINTS = NB_MEDIA_BREAKPOINTS;
exports.NB_BUILT_IN_JS_THEMES = NB_BUILT_IN_JS_THEMES;
exports.NB_JS_THEMES = NB_JS_THEMES;
exports.NB_WINDOW = NB_WINDOW;
exports.NB_DOCUMENT = NB_DOCUMENT;
exports.windowFactory = windowFactory;
exports.NbThemeModule = NbThemeModule;
exports.NbThemeService = NbThemeService;
exports.NbSpinnerService = NbSpinnerService;
exports.DEFAULT_MEDIA_BREAKPOINTS = DEFAULT_MEDIA_BREAKPOINTS;
exports.NbMediaBreakpointsService = NbMediaBreakpointsService;
exports.NbColorHelper = NbColorHelper;
exports.NB_LAYOUT_DIRECTION = NB_LAYOUT_DIRECTION;
exports.NbLayoutDirectionService = NbLayoutDirectionService;
exports.NbLayoutScrollService = NbLayoutScrollService;
exports.NbLayoutRulerService = NbLayoutRulerService;
exports.BUILT_IN_THEMES = BUILT_IN_THEMES;
exports.NbJSThemesRegistry = NbJSThemesRegistry;
exports.CORPORATE_THEME = CORPORATE_THEME;
exports.COSMIC_THEME = COSMIC_THEME;
exports.DEFAULT_THEME = DEFAULT_THEME;
exports.DARK_THEME = DARK_THEME;
exports.NbCardModule = NbCardModule;
exports.NbCardHeaderComponent = NbCardHeaderComponent;
exports.NbCardBodyComponent = NbCardBodyComponent;
exports.NbCardFooterComponent = NbCardFooterComponent;
exports.NbCardComponent = NbCardComponent;
exports.NbFlipCardComponent = NbFlipCardComponent;
exports.NbRevealCardComponent = NbRevealCardComponent;
exports.NbCardFrontComponent = NbCardFrontComponent;
exports.NbCardBackComponent = NbCardBackComponent;
exports.NbCalendarModule = NbCalendarModule;
exports.NbCalendarComponent = NbCalendarComponent;
exports.NbCalendarRangeModule = NbCalendarRangeModule;
exports.NbCalendarRangeComponent = NbCalendarRangeComponent;
exports.NbBaseCalendarComponent = NbBaseCalendarComponent;
exports.NbBaseCalendarModule = NbBaseCalendarModule;
exports.NbBaseCalendarRangeCell = NbBaseCalendarRangeCell;
exports.NbCalendarRangeDayCellComponent = NbCalendarRangeDayCellComponent;
exports.NbCalendarRangeMonthCellComponent = NbCalendarRangeMonthCellComponent;
exports.NbCalendarRangeYearCellComponent = NbCalendarRangeYearCellComponent;
exports.NbCalendarYearModelService = NbCalendarYearModelService;
exports.NbCalendarKitModule = NbCalendarKitModule;
exports.NbLayoutModule = NbLayoutModule;
exports.NbLayoutComponent = NbLayoutComponent;
exports.NbLayoutColumnComponent = NbLayoutColumnComponent;
exports.NbLayoutHeaderComponent = NbLayoutHeaderComponent;
exports.NbLayoutFooterComponent = NbLayoutFooterComponent;
exports.NbRestoreScrollTopHelper = NbRestoreScrollTopHelper;
exports.NbMenuModule = NbMenuModule;
exports.NbMenuItemComponent = NbMenuItemComponent;
exports.NbMenuComponent = NbMenuComponent;
exports.NbRouteTabsetModule = NbRouteTabsetModule;
exports.NbRouteTabsetComponent = NbRouteTabsetComponent;
exports.NbSidebarModule = NbSidebarModule;
exports.NbSidebarService = NbSidebarService;
exports.NbSidebarHeaderComponent = NbSidebarHeaderComponent;
exports.NbSidebarFooterComponent = NbSidebarFooterComponent;
exports.NbSidebarComponent = NbSidebarComponent;
exports.NbTabsetModule = NbTabsetModule;
exports.NbTabComponent = NbTabComponent;
exports.NbTabsetComponent = NbTabsetComponent;
exports.NbUserModule = NbUserModule;
exports.NbUserComponent = NbUserComponent;
exports.NbActionsModule = NbActionsModule;
exports.NbActionComponent = NbActionComponent;
exports.NbActionsComponent = NbActionsComponent;
exports.NbSearchModule = NbSearchModule;
exports.NbSearchService = NbSearchService;
exports.NbSearchFieldComponent = NbSearchFieldComponent;
exports.NbSearchComponent = NbSearchComponent;
exports.NbCheckboxComponent = NbCheckboxComponent;
exports.NbCheckboxModule = NbCheckboxModule;
exports.NbBadgeComponent = NbBadgeComponent;
exports.NbBadgeModule = NbBadgeModule;
exports.NbPopoverDirective = NbPopoverDirective;
exports.NbPopoverModule = NbPopoverModule;
exports.NbPopoverComponent = NbPopoverComponent;
exports.NbContextMenuDirective = NbContextMenuDirective;
exports.NbContextMenuComponent = NbContextMenuComponent;
exports.NbContextMenuModule = NbContextMenuModule;
exports.NbProgressBarComponent = NbProgressBarComponent;
exports.NbProgressBarModule = NbProgressBarModule;
exports.NbAlertComponent = NbAlertComponent;
exports.NbAlertModule = NbAlertModule;
exports.NbChatComponent = NbChatComponent;
exports.NbChatMessageComponent = NbChatMessageComponent;
exports.NbChatMessageMapComponent = NbChatMessageMapComponent;
exports.NbChatMessageFileComponent = NbChatMessageFileComponent;
exports.NbChatMessageQuoteComponent = NbChatMessageQuoteComponent;
exports.NbChatMessageTextComponent = NbChatMessageTextComponent;
exports.NbChatFormComponent = NbChatFormComponent;
exports.NbChatModule = NbChatModule;
exports.NbChatOptions = NbChatOptions;
exports.NbSpinnerComponent = NbSpinnerComponent;
exports.NbSpinnerDirective = NbSpinnerDirective;
exports.NbSpinnerModule = NbSpinnerModule;
exports.NB_STEPPER = NB_STEPPER;
exports.NbStepperComponent = NbStepperComponent;
exports.NbStepComponent = NbStepComponent;
exports.NbStepperNextDirective = NbStepperNextDirective;
exports.NbStepperPreviousDirective = NbStepperPreviousDirective;
exports.NbStepperModule = NbStepperModule;
exports.NbAccordionComponent = NbAccordionComponent;
exports.NbAccordionItemComponent = NbAccordionItemComponent;
exports.NbAccordionItemBodyComponent = NbAccordionItemBodyComponent;
exports.NbAccordionItemHeaderComponent = NbAccordionItemHeaderComponent;
exports.NbAccordionModule = NbAccordionModule;
exports.NbButtonComponent = NbButtonComponent;
exports.NbButtonModule = NbButtonModule;
exports.NbListComponent = NbListComponent;
exports.NbListItemComponent = NbListItemComponent;
exports.NbListModule = NbListModule;
exports.NbListPageTrackerDirective = NbListPageTrackerDirective;
exports.NbScrollableContainerDimentions = NbScrollableContainerDimentions;
exports.NbInfiniteListDirective = NbInfiniteListDirective;
exports.NbInputDirective = NbInputDirective;
exports.NbInputModule = NbInputModule;
exports.NbOverlayModule = NbOverlayModule;
exports.patch = patch;
exports.createContainer = createContainer;
exports.NbOverlayService = NbOverlayService;
exports.NbAdjustableConnectedPositionStrategy = NbAdjustableConnectedPositionStrategy;
exports.NbGlobalPositionStrategy = NbGlobalPositionStrategy;
exports.NbPositionBuilderService = NbPositionBuilderService;
exports.NbPositionedContainer = NbPositionedContainer;
exports.NbOverlayContainerComponent = NbOverlayContainerComponent;
exports.NbTriggerStrategyBase = NbTriggerStrategyBase;
exports.NbClickTriggerStrategy = NbClickTriggerStrategy;
exports.NbHoverTriggerStrategy = NbHoverTriggerStrategy;
exports.NbHintTriggerStrategy = NbHintTriggerStrategy;
exports.NbFocusTriggerStrategy = NbFocusTriggerStrategy;
exports.NbNoopTriggerStrategy = NbNoopTriggerStrategy;
exports.NbTriggerStrategyBuilderService = NbTriggerStrategyBuilderService;
exports.NbPortalDirective = NbPortalDirective;
exports.NbPortalOutletDirective = NbPortalOutletDirective;
exports.NbComponentPortal = NbComponentPortal;
exports.NbOverlay = NbOverlay;
exports.NbOverlayPositionBuilder = NbOverlayPositionBuilder;
exports.NbTemplatePortal = NbTemplatePortal;
exports.NbOverlayContainer = NbOverlayContainer;
exports.NbFlexibleConnectedPositionStrategy = NbFlexibleConnectedPositionStrategy;
exports.NbPortalInjector = NbPortalInjector;
exports.NbCdkMappingModule = NbCdkMappingModule;
exports.NbPositionHelper = NbPositionHelper;
exports.NbDynamicOverlay = NbDynamicOverlay;
exports.NbDynamicOverlayChange = NbDynamicOverlayChange;
exports.NbDynamicOverlayHandler = NbDynamicOverlayHandler;
exports.NbPlatform = NbPlatform;
exports.NbFocusMonitor = NbFocusMonitor;
exports.NbA11yModule = NbA11yModule;
exports.NbFocusTrap = NbFocusTrap;
exports.NbFocusTrapFactoryService = NbFocusTrapFactoryService;
exports.NbCdkAdapterModule = NbCdkAdapterModule;
exports.NbBlockScrollStrategyAdapter = NbBlockScrollStrategyAdapter;
exports.NbScrollStrategyOptions = NbScrollStrategyOptions;
exports.NbOverlayContainerAdapter = NbOverlayContainerAdapter;
exports.NbScrollDispatcherAdapter = NbScrollDispatcherAdapter;
exports.NbViewportRulerAdapter = NbViewportRulerAdapter;
exports.NbDirectionality = NbDirectionality;
exports.NbBidiModule = NbBidiModule;
exports.NbCellDefDirective = NbCellDefDirective;
exports.NbHeaderCellDefDirective = NbHeaderCellDefDirective;
exports.NbFooterCellDefDirective = NbFooterCellDefDirective;
exports.NB_SORT_HEADER_COLUMN_DEF = NB_SORT_HEADER_COLUMN_DEF;
exports.NbColumnDefDirective = NbColumnDefDirective;
exports.NbHeaderCellDirective = NbHeaderCellDirective;
exports.NbFooterCellDirective = NbFooterCellDirective;
exports.NbCellDirective = NbCellDirective;
exports.NbDataSource = NbDataSource;
exports.NbDataRowOutletDirective = NbDataRowOutletDirective;
exports.NbHeaderRowOutletDirective = NbHeaderRowOutletDirective;
exports.NbFooterRowOutletDirective = NbFooterRowOutletDirective;
exports.NbCellOutletDirective = NbCellOutletDirective;
exports.NbHeaderRowDefDirective = NbHeaderRowDefDirective;
exports.NbFooterRowDefDirective = NbFooterRowDefDirective;
exports.NbRowDefDirective = NbRowDefDirective;
exports.NbHeaderRowComponent = NbHeaderRowComponent;
exports.NbFooterRowComponent = NbFooterRowComponent;
exports.NbRowComponent = NbRowComponent;
exports.NB_TABLE_TEMPLATE = NB_TABLE_TEMPLATE;
exports.NbTable = NbTable;
exports.NbTableModule = NbTableModule;
exports.NB_DIALOG_CONFIG = NB_DIALOG_CONFIG;
exports.NbDialogConfig = NbDialogConfig;
exports.NbDialogRef = NbDialogRef;
exports.NbDialogService = NbDialogService;
exports.NbDialogModule = NbDialogModule;
exports.NbToastrModule = NbToastrModule;
exports.NbToastRef = NbToastRef;
exports.NbToastContainer = NbToastContainer;
exports.NbToastrContainerRegistry = NbToastrContainerRegistry;
exports.NbToastrService = NbToastrService;
exports.NbToast = NbToast;
exports.NbToastComponent = NbToastComponent;
exports.NB_TOASTR_CONFIG = NB_TOASTR_CONFIG;
exports.NbToastrConfig = NbToastrConfig;
exports.NbToastrContainerComponent = NbToastrContainerComponent;
exports.NbTooltipModule = NbTooltipModule;
exports.NbTooltipDirective = NbTooltipDirective;
exports.NbTooltipComponent = NbTooltipComponent;
exports.NbSelectModule = NbSelectModule;
exports.NbSelectLabelComponent = NbSelectLabelComponent;
exports.nbSelectFormFieldControlConfigFactory = nbSelectFormFieldControlConfigFactory;
exports.NbSelectComponent = NbSelectComponent;
exports.NbOptionModule = NbOptionModule;
exports.NbOptionComponent = NbOptionComponent;
exports.NbOptionGroupComponent = NbOptionGroupComponent;
exports.NbOptionListComponent = NbOptionListComponent;
exports.NB_SELECT_INJECTION_TOKEN = NB_SELECT_INJECTION_TOKEN;
exports.NbAutocompleteModule = NbAutocompleteModule;
exports.NbAutocompleteComponent = NbAutocompleteComponent;
exports.NbAutocompleteDirective = NbAutocompleteDirective;
exports.NbWindowModule = NbWindowModule;
exports.NbWindowService = NbWindowService;
exports.NbWindowRef = NbWindowRef;
exports.NbWindowConfig = NbWindowConfig;
exports.NB_WINDOW_CONTENT = NB_WINDOW_CONTENT;
exports.NB_WINDOW_CONFIG = NB_WINDOW_CONFIG;
exports.NB_WINDOW_CONTEXT = NB_WINDOW_CONTEXT;
exports.NbWindowComponent = NbWindowComponent;
exports.NbWindowsContainerComponent = NbWindowsContainerComponent;
exports.NbDatepickerModule = NbDatepickerModule;
exports.NbDatepickerAdapter = NbDatepickerAdapter;
exports.NbDatepicker = NbDatepicker;
exports.NB_DATE_ADAPTER = NB_DATE_ADAPTER;
exports.NB_DATE_SERVICE_OPTIONS = NB_DATE_SERVICE_OPTIONS;
exports.NbDatepickerDirective = NbDatepickerDirective;
exports.NbDateAdapterService = NbDateAdapterService;
exports.NbRangeAdapterService = NbRangeAdapterService;
exports.NbDatepickerContainerComponent = NbDatepickerContainerComponent;
exports.NbBasePicker = NbBasePicker;
exports.NbBasePickerComponent = NbBasePickerComponent;
exports.NbDatepickerComponent = NbDatepickerComponent;
exports.NbRangepickerComponent = NbRangepickerComponent;
exports.NbDialogContainerComponent = NbDialogContainerComponent;
exports.NbRadioModule = NbRadioModule;
exports.NbRadioGroupComponent = NbRadioGroupComponent;
exports.NbRadioComponent = NbRadioComponent;
exports.NbTreeGridModule = NbTreeGridModule;
exports.NbTreeGridComponent = NbTreeGridComponent;
exports.NB_ROW_DOUBLE_CLICK_DELAY = NB_ROW_DOUBLE_CLICK_DELAY;
exports.NbTreeGridRowComponent = NbTreeGridRowComponent;
exports.NbTreeGridHeaderRowComponent = NbTreeGridHeaderRowComponent;
exports.NbTreeGridFooterRowComponent = NbTreeGridFooterRowComponent;
exports.NB_TREE_GRID = NB_TREE_GRID;
exports.NbSortDirective = NbSortDirective;
exports.NbSortHeaderIconDirective = NbSortHeaderIconDirective;
exports.NbSortIconComponent = NbSortIconComponent;
exports.NbSortHeaderComponent = NbSortHeaderComponent;
exports.NbTreeGridRowToggleComponent = NbTreeGridRowToggleComponent;
exports.NbTreeGridColumnDefDirective = NbTreeGridColumnDefDirective;
exports.NbTreeGridCellDirective = NbTreeGridCellDirective;
exports.NbTreeGridHeaderCellDirective = NbTreeGridHeaderCellDirective;
exports.NbTreeGridFooterCellDirective = NbTreeGridFooterCellDirective;
exports.NbTreeGridRowDefDirective = NbTreeGridRowDefDirective;
exports.NbTreeGridHeaderRowDefDirective = NbTreeGridHeaderRowDefDirective;
exports.NbTreeGridFooterRowDefDirective = NbTreeGridFooterRowDefDirective;
exports.NbTreeGridCellDefDirective = NbTreeGridCellDefDirective;
exports.NbTreeGridHeaderCellDefDirective = NbTreeGridHeaderCellDefDirective;
exports.NbTreeGridFooterCellDefDirective = NbTreeGridFooterCellDefDirective;
exports.NbFilterDirective = NbFilterDirective;
exports.NbFilterInputDirective = NbFilterInputDirective;
exports.NbTreeGridRowToggleDirective = NbTreeGridRowToggleDirective;
exports.NB_DEFAULT_ROW_LEVEL = NB_DEFAULT_ROW_LEVEL;
exports.NbTreeGridPresentationNode = NbTreeGridPresentationNode;
exports.NbTreeGridDataSource = NbTreeGridDataSource;
exports.NbTreeGridDataSourceBuilder = NbTreeGridDataSourceBuilder;
exports.NbTreeGridDataService = NbTreeGridDataService;
exports.NbTreeGridFilterService = NbTreeGridFilterService;
exports.NbTreeGridService = NbTreeGridService;
exports.NbTreeGridSortService = NbTreeGridSortService;
exports.NbColumnsService = NbColumnsService;
exports.NbIconModule = NbIconModule;
exports.NbIconComponent = NbIconComponent;
exports.NbFontIcon = NbFontIcon;
exports.NbSvgIcon = NbSvgIcon;
exports.NbIconDefinition = NbIconDefinition;
exports.NbIconLibraries = NbIconLibraries;
exports.NbToggleModule = NbToggleModule;
exports.NbToggleComponent = NbToggleComponent;
exports.NbFormFieldModule = NbFormFieldModule;
exports.NbFormFieldComponent = NbFormFieldComponent;
exports.NbPrefixDirective = NbPrefixDirective;
exports.NbSuffixDirective = NbSuffixDirective;
exports.NbFormFieldControl = NbFormFieldControl;
exports.NbFormFieldControlConfig = NbFormFieldControlConfig;

Object.defineProperty(exports, '__esModule', { value: true });

})));
