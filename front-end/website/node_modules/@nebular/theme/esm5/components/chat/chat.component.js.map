{"version":3,"file":"chat.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/chat/chat.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  Component,\n  Input,\n  HostBinding,\n  ViewChild,\n  ElementRef,\n  ContentChildren,\n  QueryList,\n  AfterViewInit,\n  ContentChild,\n  SimpleChanges,\n  AfterContentInit,\n  OnChanges,\n} from '@angular/core';\n\nimport { NbComponentSize } from '../component-size';\nimport { NbComponentStatus } from '../component-status';\nimport { convertToBoolProperty, emptyStatusWarning, NbBooleanInput } from '../helpers';\nimport { NbChatFormComponent } from './chat-form.component';\nimport { NbChatMessageComponent } from './chat-message.component';\n\n/**\n * Conversational UI collection - a set of components for chat-like UI construction.\n *\n * Main features:\n * - different message types support (text, image, file, file group, map, etc)\n * - drag & drop for images and files with preview\n * - different UI styles\n * - custom action buttons (coming soon)\n *\n * Here's a complete example build in a bot-like app. Type `help` to be able to receive different message types.\n * Enjoy the conversation and the beautiful UI.\n * @stacked-example(Showcase, chat/chat-showcase.component)\n *\n * Basic chat configuration and usage:\n * ```ts\n * <nb-chat title=\"Nebular Conversational UI\">\n *       <nb-chat-message *ngFor=\"let msg of messages\"\n *                        [type]=\"msg.type\"\n *                        [message]=\"msg.text\"\n *                        [reply]=\"msg.reply\"\n *                        [sender]=\"msg.user.name\"\n *                        [date]=\"msg.date\"\n *                        [files]=\"msg.files\"\n *                        [quote]=\"msg.quote\"\n *                        [latitude]=\"msg.latitude\"\n *                        [longitude]=\"msg.longitude\"\n *                        [avatar]=\"msg.user.avatar\">\n *   </nb-chat-message>\n *\n *   <nb-chat-form (send)=\"sendMessage($event)\" [dropFiles]=\"true\">\n *   </nb-chat-form>\n * </nb-chat>\n * ```\n * ### Installation\n *\n * Import `NbChatModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbChatModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n *\n * If you need to provide an API key for a `map` message type (which is required by Google Maps)\n * you may use `NbChatModule.forRoot({ ... })` call if this is a global app configuration\n * or `NbChatModule.forChild({ ... })` for a feature module configuration:\n *\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbChatModule.forRoot({ messageGoogleMapKey: 'MAP_KEY' }),\n *   ],\n * })\n * export class AppModule { }\n * ```\n *\n * ### Usage\n *\n * There are three main components:\n * ```ts\n * <nb-chat>\n * </nb-chat> // chat container\n *\n * <nb-chat-form>\n * </nb-chat-form> // chat form with drag&drop files feature\n *\n * <nb-chat-message>\n * </nb-chat-message> // chat message, available multiple types\n * ```\n *\n * Two users conversation showcase:\n * @stacked-example(Conversation, chat/chat-conversation-showcase.component)\n *\n * Chat UI is also available in different colors by specifying a `[status]` input:\n *\n * @stacked-example(Colored Chat, chat/chat-colors.component)\n *\n * Also it is possible to configure sizes through `[size]` input:\n *\n * @stacked-example(Chat Sizes, chat/chat-sizes.component)\n *\n * @styles\n *\n * chat-background-color:\n * chat-border:\n * chat-border-radius:\n * chat-shadow:\n * chat-padding:\n * chat-scrollbar-color:\n * chat-scrollbar-background-color:\n * chat-scrollbar-width:\n * chat-text-color:\n * chat-text-font-family:\n * chat-text-font-size:\n * chat-text-font-weight:\n * chat-text-line-height:\n * chat-header-text-font-family:\n * chat-header-text-font-size:\n * chat-header-text-font-weight:\n * chat-header-text-line-height:\n * chat-tiny-height:\n * chat-small-height:\n * chat-medium-height:\n * chat-large-height:\n * chat-giant-height:\n * chat-basic-background-color:\n * chat-basic-text-color:\n * chat-primary-background-color:\n * chat-primary-text-color:\n * chat-success-background-color:\n * chat-success-text-color:\n * chat-info-background-color:\n * chat-info-text-color:\n * chat-warning-background-color:\n * chat-warning-text-color:\n * chat-danger-background-color:\n * chat-danger-text-color:\n * chat-control-background-color:\n * chat-control-text-color:\n * chat-divider-color:\n * chat-divider-style:\n * chat-divider-width:\n * chat-message-background:\n * chat-message-text-color:\n * chat-message-reply-background-color:\n * chat-message-reply-text-color:\n * chat-message-avatar-background-color:\n * chat-message-sender-text-color:\n * chat-message-quote-background-color:\n * chat-message-quote-text-color:\n * chat-message-file-text-color:\n * chat-message-file-background-color:\n */\n@Component({\n  selector: 'nb-chat',\n  styleUrls: ['./chat.component.css'],\n  template: `\n    <div class=\"header\">{{ title }}</div>\n    <div class=\"scrollable\" #scrollable>\n      <div class=\"messages\">\n        <ng-content select=\"nb-chat-message\"></ng-content>\n        <p class=\"no-messages\" *ngIf=\"!messages?.length\">{{ noMessagesPlaceholder }}</p>\n      </div>\n    </div>\n    <div class=\"form\">\n      <ng-content select=\"nb-chat-form\"></ng-content>\n    </div>\n  `,\n})\nexport class NbChatComponent implements OnChanges, AfterContentInit, AfterViewInit {\n\n  @Input() title: string;\n\n  /**\n   * Chat size, available sizes:\n   * `tiny`, `small`, `medium`, `large`, `giant`\n   */\n  @Input() size: NbComponentSize;\n\n  /**\n   * Chat status color (adds specific styles):\n   * `basic` (default), `primary`, `success`, `info`, `warning`, `danger`, `control`.\n   */\n  @Input()\n  get status(): NbComponentStatus {\n    return this._status;\n  }\n  set status(value: NbComponentStatus) {\n    if (!value) {\n      emptyStatusWarning('NbChat');\n      value = 'basic';\n    }\n    this._status = value;\n  }\n  protected _status: NbComponentStatus = 'basic';\n\n  @Input() noMessagesPlaceholder: string = 'No messages yet.';\n\n  /**\n   * Scroll chat to the bottom of the list when a new message arrives\n   */\n  @Input()\n  get scrollBottom(): boolean {\n    return this._scrollBottom\n  }\n  set scrollBottom(value: boolean) {\n    this._scrollBottom = convertToBoolProperty(value);\n  }\n  protected _scrollBottom: boolean = true;\n  static ngAcceptInputType_scrollBottom: NbBooleanInput;\n\n  @ViewChild('scrollable') scrollable: ElementRef;\n  @ContentChildren(NbChatMessageComponent) messages: QueryList<NbChatMessageComponent>;\n  @ContentChild(NbChatFormComponent) chatForm: NbChatFormComponent;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('status' in changes) {\n      this.updateFormStatus();\n    }\n  }\n\n  ngAfterContentInit() {\n    this.updateFormStatus();\n  }\n\n  ngAfterViewInit() {\n    this.messages.changes\n      .subscribe((messages) => {\n        this.messages = messages;\n        this.updateView();\n      });\n\n    this.updateView();\n  }\n\n  updateView() {\n    if (this.scrollBottom) {\n      this.scrollListBottom();\n    }\n  }\n\n  scrollListBottom() {\n    this.scrollable.nativeElement.scrollTop = this.scrollable.nativeElement.scrollHeight;\n  }\n\n  protected updateFormStatus(): void {\n    if (this.chatForm) {\n      this.chatForm.setStatus(this.status);\n    }\n  }\n\n  @HostBinding('class.size-tiny')\n  get tiny(): boolean {\n    return this.size === 'tiny';\n  }\n\n  @HostBinding('class.size-small')\n  get small(): boolean {\n    return this.size === 'small';\n  }\n\n  @HostBinding('class.size-medium')\n  get medium(): boolean {\n    return this.size === 'medium';\n  }\n\n  @HostBinding('class.size-large')\n  get large(): boolean {\n    return this.size === 'large';\n  }\n\n  @HostBinding('class.size-giant')\n  get giant(): boolean {\n    return this.size === 'giant';\n  }\n\n  @HostBinding('class.status-primary')\n  get primary(): boolean {\n    return this.status === 'primary';\n  }\n\n  @HostBinding('class.status-success')\n  get success(): boolean {\n    return this.status === 'success';\n  }\n\n  @HostBinding('class.status-info')\n  get info(): boolean {\n    return this.status === 'info';\n  }\n\n  @HostBinding('class.status-warning')\n  get warning(): boolean {\n    return this.status === 'warning';\n  }\n\n  @HostBinding('class.status-danger')\n  get danger(): boolean {\n    return this.status === 'danger';\n  }\n\n  @HostBinding('class.status-basic')\n  get basic(): boolean {\n    return this.status === 'basic';\n  }\n\n  @HostBinding('class.status-control')\n  get control(): boolean {\n    return this.status === 'control';\n  }\n}\n"]}