{"version":3,"file":"spinner.directive.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/spinner/spinner.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  ComponentFactoryResolver,\n  ComponentFactory,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n  HostBinding,\n} from '@angular/core';\n\nimport { NbComponentSize } from '../component-size';\nimport { NbComponentStatus } from '../component-status';\nimport { NbSpinnerComponent } from './spinner.component';\n\n/**\n * Styled spinner directive\n *\n * @stacked-example(Spinner Showcase, spinner/spinner-card.component)\n *\n *\n * ```ts\n * <nb-card [nbSpinner]=\"loading\" nbSpinnerStatus=\"danger\">\n *   <nb-card-body>Card Content</nb-card-body>\n * </nb-card>\n * ```\n *\n * ### Installation\n *\n * Import `NbSpinnerModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbSpinnerModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Could be colored using `status` property\n *\n * @stacked-example(Spinner Colors, spinner/spinner-colors.component)\n *\n * Available in different sizes with `size` property:\n *\n * @stacked-example(Spinner Sizes, spinner/spinner-sizes.component)\n *\n * It is also possible to place it into the button:\n * @stacked-example(Buttons with spinner, spinner/spinner-button.component)\n *\n * Or tabs:\n * @stacked-example(Spinner in tabs, spinner/spinner-tabs.component)\n */\n@Directive({selector: '[nbSpinner]'})\nexport class NbSpinnerDirective implements OnInit {\n\n  private shouldShow = false;\n  spinner: ComponentRef<NbSpinnerComponent>;\n  componentFactory: ComponentFactory<NbSpinnerComponent>;\n\n  /**\n   * Spinner message shown next to the icon\n   * @type {string}\n   */\n  @Input('nbSpinnerMessage') spinnerMessage: string;\n\n  /**\n   * Spinner status color\n   * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`.\n   */\n  @Input('nbSpinnerStatus') spinnerStatus: NbComponentStatus = 'basic';\n\n  /**\n   * Spinner size. Possible values: `tiny`, `small`, `medium` (default), `large`, `giant`\n   */\n  @Input('nbSpinnerSize') spinnerSize: NbComponentSize = 'medium';\n\n  /**\n   * Directive value - show or hide spinner\n   * @param {boolean} val\n   */\n  @Input('nbSpinner')\n  set nbSpinner(val: boolean) {\n    if (this.componentFactory) {\n      if (val) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    } else {\n      this.shouldShow = val;\n    }\n  }\n\n  @HostBinding('class.nb-spinner-container') isSpinnerExist = false;\n\n  constructor(private directiveView: ViewContainerRef,\n              private componentFactoryResolver: ComponentFactoryResolver,\n              private renderer: Renderer2,\n              private directiveElement: ElementRef) {\n  }\n\n  ngOnInit() {\n    this.componentFactory = this.componentFactoryResolver.resolveComponentFactory(NbSpinnerComponent);\n    if (this.shouldShow) {\n      this.show();\n    }\n  }\n\n  hide() {\n    if (this.isSpinnerExist) {\n      this.directiveView.remove();\n      this.isSpinnerExist = false;\n    }\n  }\n\n  show() {\n    if (!this.isSpinnerExist) {\n      this.spinner = this.directiveView.createComponent<NbSpinnerComponent>(this.componentFactory);\n      this.setInstanceInputs(this.spinner.instance);\n      this.spinner.changeDetectorRef.detectChanges();\n      this.renderer.appendChild(this.directiveElement.nativeElement, this.spinner.location.nativeElement);\n      this.isSpinnerExist = true;\n    }\n  }\n\n  setInstanceInputs(instance: NbSpinnerComponent) {\n    instance.message = this.spinnerMessage\n    typeof this.spinnerStatus !== 'undefined' && (instance.status = this.spinnerStatus);\n    typeof this.spinnerSize !== 'undefined' && (instance.size = this.spinnerSize);\n  }\n}\n"]}