{"version":3,"file":"tree-grid.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tree-grid/tree-grid.component.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Inject,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n  EmbeddedViewRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\n\nimport { NB_DOCUMENT, NB_WINDOW } from '../../theme.options';\nimport { NbPlatform } from '../cdk/platform/platform-service';\nimport { NbDirectionality } from '../cdk/bidi/bidi-service';\nimport { NB_TABLE_TEMPLATE, NbTable } from '../cdk/table/table.module';\nimport { NbRowContext } from '../cdk/table/type-mappings';\nimport { NbTreeGridDataSource, NbTreeGridDataSourceBuilder } from './data-source/tree-grid-data-source';\nimport { NB_DEFAULT_ROW_LEVEL, NbTreeGridPresentationNode } from './data-source/tree-grid.model';\nimport { NbToggleOptions } from './data-source/tree-grid.service';\nimport { NB_TREE_GRID } from './tree-grid-injection-tokens';\nimport { NbTreeGridRowComponent } from './tree-grid-row.component';\nimport { NbTreeGridCellDirective } from './tree-grid-cell.component';\nimport { convertToBoolProperty, NbBooleanInput } from '../helpers';\nimport { NbTreeGridColumnDefDirective } from './tree-grid-column-def.directive';\nimport {\n  NbTreeGridFooterRowDefDirective,\n  NbTreeGridHeaderRowDefDirective,\n  NbTreeGridRowDefDirective,\n} from './tree-grid-def.component';\nimport { NbColumnsService } from './tree-grid-columns.service';\n\n/**\n * Tree grid component that can be used to display nested rows of data.\n * Supports filtering and sorting.\n * @stacked-example(Showcase, tree-grid/tree-grid-showcase.component)\n *\n * ### Installation\n *\n * Import `NbTreeGridModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbTreeGridModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n *\n * ### Usage\n *\n * As the most basic usage you need to define [nbTreeGridRowDef](docs/components/treegrid/api#nbtreegridrowdefdirective)\n * where you should pass columns to display in rows and\n * [nbTreeGridColumnDef](docs/components/treegrid/api#nbtreegridcolumndefdirective) - component containing cell\n * definitions for each column passed to row definition.\n * @stacked-example(Basic, tree-grid/tree-grid-basic.component)\n *\n * `NbTreeGridComponent`'s source input and `NbTreeGridDataSourceBuilder.create` expecting data to be an array of\n * objects with `data`, `children` and `expanded` properties. If your data doesn't match this interface, you can pass\n * getter functions for each property as arguments to `NbTreeGridDataSourceBuilder.create` method.\n * @stacked-example(Custom node structure, tree-grid/tree-grid-custom-node-structure.component)\n *\n * To use sorting you can add `nbSort` directive to table and subscribe to `sort` method. When user click on header,\n * sort event will be emitted. Event object contain clicked column name and desired sort direction.\n * @stacked-example(Sortable, tree-grid/tree-grid-sortable.component)\n *\n * You can use `Data Source Builder` to create `NbTreeGridDataSource` which would have toggle, sort and\n * filter methods. Then you can call this methods to change sort or toggle rows programmatically. Also `nbSort` and\n * `nbFilterInput` directives both support `NbTreeGridDataSource`, so you can pass it directly as an input and\n * directives will trigger sort, toggle themselves.\n * @stacked-example(Data Source Builder, tree-grid/tree-grid-showcase.component)\n *\n * You can create responsive grid by setting `hideOn` and `showOn` inputs of\n * [nbTreeGridColumnDef](docs/components/tree-grid/api#nbtreegridcolumndefdirective) directive.\n * When viewport reaches specified width grid hides or shows columns.\n * @stacked-example(Responsive columns, tree-grid/tree-grid-responsive.component)\n *\n * To customize sort or row toggle icons you can use `nbSortHeaderIcon` and `nbTreeGridRowToggle` directives\n * respectively. `nbSortHeaderIcon` is a structural directive and it's implicit context set to current direction.\n * Also context has three properties: `isAscending`, `isDescending` and `isNone`.\n * @stacked-example(Custom icons, tree-grid/tree-grid-custom-icons.component)\n *\n * By default, row to toggle happens when user clicks anywhere in the row. Also double click expands row deeply.\n * To disable this you can set `[clickToToggle]=\"false\"` input of `nbTreeGridRow`.\n * @stacked-example(Disable click toggle, tree-grid/tree-grid-disable-click-toggle.component)\n *\n * @styles\n *\n * tree-grid-cell-border-width:\n * tree-grid-cell-border-style:\n * tree-grid-cell-border-color:\n * tree-grid-row-min-height:\n * tree-grid-cell-padding:\n * tree-grid-header-background-color:\n * tree-grid-header-text-color:\n * tree-grid-header-text-font-family:\n * tree-grid-header-text-font-size:\n * tree-grid-header-text-font-weight:\n * tree-grid-header-text-line-height:\n * tree-grid-footer-background-color:\n * tree-grid-footer-text-color:\n * tree-grid-footer-text-font-family:\n * tree-grid-footer-text-font-size:\n * tree-grid-footer-text-font-weight:\n * tree-grid-footer-text-line-height:\n * tree-grid-row-background-color:\n * tree-grid-row-even-background-color:\n * tree-grid-row-hover-background-color:\n * tree-grid-row-text-color:\n * tree-grid-row-text-font-family:\n * tree-grid-row-text-font-size:\n * tree-grid-row-text-font-weight:\n * tree-grid-row-text-line-height:\n * tree-grid-sort-header-button-background-color:\n * tree-grid-sort-header-button-border:\n * tree-grid-sort-header-button-padding:\n */\n@Component({\n  selector: 'table[nbTreeGrid]',\n  template: NB_TABLE_TEMPLATE,\n  styleUrls: ['./tree-grid.component.css'],\n  providers: [\n    { provide: NB_TREE_GRID, useExisting: NbTreeGridComponent },\n    NbColumnsService,\n  ],\n})\nexport class NbTreeGridComponent<T> extends NbTable<NbTreeGridPresentationNode<T>>\n                                    implements AfterViewInit, OnDestroy {\n\n  constructor(private dataSourceBuilder: NbTreeGridDataSourceBuilder<T>,\n              differs: IterableDiffers,\n              changeDetectorRef: ChangeDetectorRef,\n              elementRef: ElementRef,\n              @Attribute('role') role: string,\n              dir: NbDirectionality,\n              @Inject(NB_DOCUMENT) document,\n              platform: NbPlatform,\n              @Inject(NB_WINDOW) private window,\n  ) {\n    super(differs, changeDetectorRef, elementRef, role, dir, document, platform);\n    this.platform = platform;\n  }\n\n  private destroy$ = new Subject<void>();\n  private _source: NbTreeGridDataSource<T>;\n  private platform: NbPlatform;\n\n  /**\n   * The table's data\n   * @param data\n   * @type {<T>[] | NbTreeGridDataSource}\n   */\n  @Input('nbTreeGrid') set source(data: T[] | NbTreeGridDataSource<T>) {\n    if (!data) {\n      return;\n    }\n\n    if (data instanceof NbTreeGridDataSource) {\n      this._source = data;\n    } else {\n      this._source = this.dataSourceBuilder.create(data);\n    }\n    this.dataSource = this._source;\n  }\n\n  @Input() levelPadding: string = '';\n\n  /**\n   * Make all columns equal width. False by default.\n   */\n  @Input()\n  set equalColumnsWidth(value: boolean) {\n    this.equalColumnsWidthValue = convertToBoolProperty(value);\n  }\n  get equalColumnsWidth(): boolean {\n    return this.equalColumnsWidthValue;\n  }\n  private equalColumnsWidthValue: boolean = false;\n  static ngAcceptInputType_equalColumnsWidth: NbBooleanInput;\n\n  @HostBinding('class.nb-tree-grid') readonly treeClass = true;\n\n  ngAfterViewInit() {\n    this.checkDefsCount();\n    const rowsChange$ = merge(\n      this._contentRowDefs.changes,\n      this._contentHeaderRowDefs.changes,\n      this._contentFooterRowDefs.changes,\n    );\n    rowsChange$.pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.checkDefsCount());\n\n    if (this.platform.isBrowser) {\n      this.updateVisibleColumns();\n\n      const windowResize$ = fromEvent(this.window, 'resize').pipe(debounceTime(50));\n      merge(rowsChange$, this._contentColumnDefs.changes, windowResize$)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe(() => this.updateVisibleColumns());\n    }\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  toggleRow(row: NbTreeGridRowComponent, options?: NbToggleOptions): void {\n    const context = this.getRowContext(row);\n    this._source.toggle(context.$implicit.data, options);\n  }\n\n  toggleCellRow(cell: NbTreeGridCellDirective): void {\n    const context = this.getCellContext(cell);\n    this._source.toggle(context.$implicit.data);\n  }\n\n  getColumnWidth(): string {\n    if (this.equalColumnsWidth) {\n      return `${100 / this.getColumnsCount()}%`;\n    }\n    return '';\n  }\n\n  getCellLevel(cell: NbTreeGridCellDirective, columnName: string): number {\n    if (this.isFirstColumn(columnName)) {\n      return this.getCellContext(cell).$implicit.level;\n    }\n    return NB_DEFAULT_ROW_LEVEL;\n  }\n\n  private getRowContext(row: NbTreeGridRowComponent): NbRowContext<NbTreeGridPresentationNode<T>> {\n    return this.getContextByRowEl(row.elementRef.nativeElement);\n  }\n\n  private getCellContext(cell: NbTreeGridCellDirective): NbRowContext<NbTreeGridPresentationNode<T>> {\n    return this.getContextByCellEl(cell.elementRef.nativeElement);\n  }\n\n  private getContextByCellEl(cellEl: HTMLElement): NbRowContext<NbTreeGridPresentationNode<T>> {\n    return this.getContextByRowEl(cellEl.parentElement);\n  }\n\n  private getContextByRowEl(rowEl: HTMLElement): NbRowContext<NbTreeGridPresentationNode<T>> {\n    const rowsContainer: ViewContainerRef = this._rowOutlet.viewContainer;\n\n    for (let i = 0; i < rowsContainer.length; i++) {\n      const rowViewRef = rowsContainer.get(i) as EmbeddedViewRef<NbRowContext<NbTreeGridPresentationNode<T>>>;\n\n      if (rowViewRef.rootNodes.includes(rowEl)) {\n        return rowViewRef.context;\n      }\n    }\n  }\n\n  private getColumns(): string[] {\n    const { columns } = this._contentHeaderRowDefs.length\n      ? this._contentHeaderRowDefs.first\n      : this._contentRowDefs.first;\n\n    return Array.from(columns || []);\n  }\n\n  private getColumnsCount(): number {\n    return this.getColumns().length;\n  }\n\n  private isFirstColumn(columnName: string): boolean {\n    return this.getColumns()[0] === columnName;\n  }\n\n  private checkDefsCount(): void {\n    if (this._contentRowDefs.length > 1) {\n      throw new Error(`Found multiple row definitions`);\n    }\n    if (this._contentHeaderRowDefs.length > 1) {\n      throw new Error(`Found multiple header row definitions`);\n    }\n    if (this._contentFooterRowDefs.length > 1) {\n      throw new Error(`Found multiple footer row definitions`);\n    }\n  }\n\n  private updateVisibleColumns(): void {\n    const width = this.window.innerWidth;\n    const columnDefs = (this._contentColumnDefs as QueryList<NbTreeGridColumnDefDirective>);\n\n    const columnsToHide: string[] = columnDefs\n      .filter((col: NbTreeGridColumnDefDirective) => col.shouldHide(width))\n      .map(col => col.name);\n\n    const columnsToShow: string[] = columnDefs\n      .filter((col: NbTreeGridColumnDefDirective) => col.shouldShow(width))\n      .map(col => col.name);\n\n    if (!columnsToHide.length && !columnsToShow.length) {\n      return;\n    }\n\n    const rowDefs = [\n      this._contentHeaderRowDefs.first as NbTreeGridHeaderRowDefDirective,\n      this._contentRowDefs.first as NbTreeGridRowDefDirective<any>,\n      this._contentFooterRowDefs.first as NbTreeGridFooterRowDefDirective,\n    ].filter(d => !!d);\n\n    for (const rowDef of rowDefs) {\n      for (const column of columnsToHide) {\n        rowDef.hideColumn(column);\n      }\n\n      for (const column of columnsToShow) {\n        rowDef.showColumn(column);\n      }\n    }\n  }\n}\n"]}