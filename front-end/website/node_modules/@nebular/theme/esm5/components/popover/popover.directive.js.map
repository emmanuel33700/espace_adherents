{"version":3,"file":"popover.directive.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/popover/popover.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  EventEmitter,\n} from '@angular/core';\n\nimport { NbDynamicOverlay, NbDynamicOverlayController } from '../cdk/overlay/dynamic/dynamic-overlay';\nimport { NbDynamicOverlayHandler } from '../cdk/overlay/dynamic/dynamic-overlay-handler';\nimport { NbAdjustment, NbPosition, NbPositionValues } from '../cdk/overlay/overlay-position';\nimport { NbOverlayContent } from '../cdk/overlay/overlay-service';\nimport { NbTrigger, NbTriggerValues } from '../cdk/overlay/overlay-trigger';\nimport { NbPopoverComponent } from './popover.component';\nimport { takeUntil, skip } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Powerful popover directive, which provides the best UX for your users.\n *\n * @stacked-example(Showcase, popover/popover-showcase.component)\n *\n * Popover can accept different content such as:\n * TemplateRef\n *\n * ```html\n * <button [nbPopover]=\"templateRef\"></button>\n * <ng-template #templateRef>\n *   <span>Hello, Popover!</span>\n * </ng-template>\n * ```\n * ### Installation\n *\n * Import `NbPopoverModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbPopoverModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Custom components\n *\n * ```html\n * <button [nbPopover]=\"MyPopoverComponent\"></button>\n * ```\n *\n * Both custom components and templateRef popovers can receive *contentContext* property\n * that will be passed to the content props.\n *\n * Primitive types\n *\n * ```html\n * <button nbPopover=\"Hello, Popover!\"></button>\n * ```\n *\n * Popover has different placements, such as: top, bottom, left, right, start and end\n * which can be used as following:\n *\n * @stacked-example(Placements, popover/popover-placements.component)\n *\n * By default popover will try to adjust itself to maximally fit viewport\n * and provide the best user experience. It will try to change position of the popover container.\n * If you want to disable this behaviour set it `noop`.\n *\n * ```html\n * <button nbPopover=\"Hello, Popover!\" nbPopoverAdjustment=\"noop\"></button>\n * ```\n *\n * Popover has a number of triggers which provides an ability to show and hide the component in different ways:\n *\n * - Click mode shows the component when a user clicks on the host element and hides when the user clicks\n * somewhere on the document outside the component.\n * - Hint provides capability to show the component when the user hovers over the host element\n * and hide when the user hovers out of the host.\n * - Hover works like hint mode with one exception - when the user moves mouse from host element to\n * the container element the component remains open, so that it is possible to interact with it content.\n * - Focus mode is applied when user focuses the element.\n * - Noop mode - the component won't react to the user interaction.\n *\n * @stacked-example(Available Triggers, popover/popover-modes.component.html)\n *\n * Noop mode is especially useful when you need to control Popover programmatically, for example show/hide\n * as a result of some third-party action, like HTTP request or validation check:\n *\n * @stacked-example(Manual Control, popover/popover-noop.component)\n *\n * Below are examples for manual popover settings control, both via template binding and code.\n * @stacked-example(Popover Settings, popover/popover-dynamic.component)\n *\n * Please note, while manipulating Popover setting via code, you need to call `rebuild()` method to apply the settings\n * changed.\n * @stacked-example(Popover Settings Code, popover/popover-dynamic-code.component)\n *\n * @additional-example(Template Ref, popover/popover-template-ref.component)\n * @additional-example(Custom Component, popover/popover-custom-component.component)\n * */\n@Directive({\n  selector: '[nbPopover]',\n  exportAs: 'nbPopover',\n  providers: [NbDynamicOverlayHandler, NbDynamicOverlay],\n})\nexport class NbPopoverDirective implements NbDynamicOverlayController, OnChanges, AfterViewInit, OnDestroy, OnInit {\n\n  protected popoverComponent = NbPopoverComponent;\n  protected dynamicOverlay: NbDynamicOverlay;\n  protected destroy$ = new Subject<void>();\n\n  /**\n   * Popover content which will be rendered in NbArrowedOverlayContainerComponent.\n   * Available content: template ref, component and any primitive.\n   * */\n  @Input('nbPopover')\n  content: NbOverlayContent;\n\n  /**\n   * Container content context. Will be applied to the rendered component.\n   * */\n  @Input('nbPopoverContext')\n  context: Object = {};\n\n  /**\n   * Position will be calculated relatively host element based on the position.\n   * Can be top, right, bottom, left, start or end.\n   * */\n  @Input('nbPopoverPlacement')\n  position: NbPosition = NbPosition.TOP;\n  static ngAcceptInputType_position: NbPositionValues;\n\n  /**\n   * Container position will be changes automatically based on this strategy if container can't fit view port.\n   * Set this property to `noop` value if you want to disable automatically adjustment.\n   * Available values: `clockwise` (default), `counterclockwise`, `vertical`, `horizontal`, `noop`.\n   * */\n  @Input('nbPopoverAdjustment')\n  get adjustment(): NbAdjustment {\n    return this._adjustment;\n  }\n  set adjustment(value: NbAdjustment) {\n    if (!value) {\n      // @breaking-change Remove @5.0.0\n      console.warn(`Falsy values for 'nbPopoverAdjustment' are deprecated and will be removed in Nebular 5.\n Use 'noop' instead.`);\n      value = NbAdjustment.NOOP;\n    }\n    this._adjustment = value;\n  }\n  protected _adjustment: NbAdjustment = NbAdjustment.CLOCKWISE;\n\n  /**\n   * Describes when the container will be shown.\n   * Available options: `click`, `hover`, `hint`, `focus` and `noop`\n   * */\n  @Input('nbPopoverTrigger')\n  trigger: NbTrigger = NbTrigger.CLICK;\n  static ngAcceptInputType_trigger: NbTriggerValues;\n\n  /**\n   * Sets popover offset\n   * */\n  @Input('nbPopoverOffset')\n  offset = 15;\n\n  @Input('nbPopoverClass')\n  popoverClass: string = '';\n\n  @Output()\n  nbPopoverShowStateChange = new EventEmitter<{ isShown: boolean }>();\n\n  get isShown(): boolean {\n    return !!(this.dynamicOverlay && this.dynamicOverlay.isAttached);\n  }\n\n  constructor(protected hostRef: ElementRef,\n              protected dynamicOverlayHandler: NbDynamicOverlayHandler) {\n  }\n\n  ngOnInit() {\n    this.dynamicOverlayHandler\n      .host(this.hostRef)\n      .componentType(this.popoverComponent);\n  }\n\n  ngOnChanges() {\n    this.rebuild();\n  }\n\n  ngAfterViewInit() {\n    this.dynamicOverlay = this.configureDynamicOverlay()\n      .build();\n\n    this.dynamicOverlay.isShown\n      .pipe(\n        skip(1),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((isShown: boolean) => this.nbPopoverShowStateChange.emit({ isShown }));\n  }\n\n  rebuild() {\n    this.dynamicOverlay = this.configureDynamicOverlay()\n      .rebuild();\n  }\n\n  show() {\n    this.dynamicOverlay.show();\n  }\n\n  hide() {\n    this.dynamicOverlay.hide();\n  }\n\n  toggle() {\n    this.dynamicOverlay.toggle();\n  }\n\n  ngOnDestroy() {\n    this.dynamicOverlayHandler.destroy();\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected configureDynamicOverlay() {\n    return this.dynamicOverlayHandler\n      .position(this.position)\n      .trigger(this.trigger)\n      .offset(this.offset)\n      .adjustment(this.adjustment)\n      .content(this.content)\n      .context(this.context)\n      .overlayConfig({ panelClass: this.popoverClass });\n  }\n}\n"]}