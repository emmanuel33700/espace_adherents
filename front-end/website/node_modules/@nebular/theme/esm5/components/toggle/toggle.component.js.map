{"version":3,"file":"toggle.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/toggle/toggle.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  Component,\n  Input,\n  HostBinding,\n  forwardRef,\n  ChangeDetectorRef,\n  OnInit,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  Renderer2,\n  ElementRef,\n  AfterViewInit,\n  NgZone,\n} from '@angular/core';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { NbLayoutDirectionService } from '../../services/direction.service';\nimport { NbComponentStatus } from '../component-status';\n\nimport { convertToBoolProperty, emptyStatusWarning, NbBooleanInput } from '../helpers';\n\n/**\n * Toggle is a control representing `on` and `off` states.\n *\n * @stacked-example(Showcase, toggle/toggle-showcase.component)\n *\n * ### Installation\n *\n * Import `NbToggleComponent` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbToggleModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Toggle may have one of the following statuses: `basic`, `primary`, `success`, `warning`, `danger`, `info`, `control`\n *\n * @stacked-example(Toggle status, toggle/toggle-status.component)\n *\n * Toggle can be disabled via `disabled` input.\n *\n * @stacked-example(Disabled Toggles, toggle/toggle-disabled.component)\n *\n * Toggle may have a label with following positions: `left`, `right`, `start`, `end` (default)\n *\n * @stacked-example(Toggles With Labels, toggle/toggle-label-position.component.ts)\n *\n * You can set control state via `checked` binding:\n *\n * ```html\n * <nb-toggle [(checked)]=\"checked\"></nb-toggle>\n * ```\n *\n * Or it could be set via reactive forms or ngModel bindings:\n *\n * @stacked-example(Toggle form binding, toggle/toggle-form.component)\n *\n * @styles\n *\n * toggle-height:\n * toggle-width:\n * toggle-border-width:\n * toggle-border-radius:\n * toggle-outline-width:\n * toggle-outline-color:\n * toggle-switcher-size:\n * toggle-switcher-icon-size:\n * toggle-text-font-family:\n * toggle-text-font-size:\n * toggle-text-font-weight:\n * toggle-text-line-height:\n * toggle-cursor:\n * toggle-disabled-cursor:\n * toggle-basic-text-color:\n * toggle-basic-background-color:\n * toggle-basic-border-color:\n * toggle-basic-checked-background-color:\n * toggle-basic-checked-border-color:\n * toggle-basic-checked-switcher-background-color:\n * toggle-basic-checked-switcher-checkmark-color:\n * toggle-basic-focus-background-color:\n * toggle-basic-focus-border-color:\n * toggle-basic-focus-checked-background-color:\n * toggle-basic-focus-checked-border-color:\n * toggle-basic-hover-background-color:\n * toggle-basic-hover-border-color:\n * toggle-basic-hover-checked-background-color:\n * toggle-basic-hover-checked-border-color:\n * toggle-basic-active-background-color:\n * toggle-basic-active-border-color:\n * toggle-basic-active-checked-background-color:\n * toggle-basic-active-checked-border-color:\n * toggle-basic-disabled-background-color:\n * toggle-basic-disabled-border-color:\n * toggle-basic-disabled-switcher-background-color:\n * toggle-basic-disabled-checked-switcher-checkmark-color:\n * toggle-basic-disabled-text-color:\n * toggle-primary-text-color:\n * toggle-primary-background-color:\n * toggle-primary-border-color:\n * toggle-primary-checked-background-color:\n * toggle-primary-checked-border-color:\n * toggle-primary-checked-switcher-background-color:\n * toggle-primary-checked-switcher-checkmark-color:\n * toggle-primary-focus-background-color:\n * toggle-primary-focus-border-color:\n * toggle-primary-focus-checked-background-color:\n * toggle-primary-focus-checked-border-color:\n * toggle-primary-hover-background-color:\n * toggle-primary-hover-border-color:\n * toggle-primary-hover-checked-background-color:\n * toggle-primary-hover-checked-border-color:\n * toggle-primary-active-background-color:\n * toggle-primary-active-border-color:\n * toggle-primary-active-checked-background-color:\n * toggle-primary-active-checked-border-color:\n * toggle-primary-disabled-background-color:\n * toggle-primary-disabled-border-color:\n * toggle-primary-disabled-switcher-background-color:\n * toggle-primary-disabled-checked-switcher-checkmark-color:\n * toggle-primary-disabled-text-color:\n * toggle-success-text-color:\n * toggle-success-background-color:\n * toggle-success-border-color:\n * toggle-success-checked-background-color:\n * toggle-success-checked-border-color:\n * toggle-success-checked-switcher-background-color:\n * toggle-success-checked-switcher-checkmark-color:\n * toggle-success-focus-background-color:\n * toggle-success-focus-border-color:\n * toggle-success-focus-checked-background-color:\n * toggle-success-focus-checked-border-color:\n * toggle-success-hover-background-color:\n * toggle-success-hover-border-color:\n * toggle-success-hover-checked-background-color:\n * toggle-success-hover-checked-border-color:\n * toggle-success-active-background-color:\n * toggle-success-active-border-color:\n * toggle-success-active-checked-background-color:\n * toggle-success-active-checked-border-color:\n * toggle-success-disabled-background-color:\n * toggle-success-disabled-border-color:\n * toggle-success-disabled-switcher-background-color:\n * toggle-success-disabled-checked-switcher-checkmark-color:\n * toggle-success-disabled-text-color:\n * toggle-info-text-color:\n * toggle-info-background-color:\n * toggle-info-border-color:\n * toggle-info-checked-background-color:\n * toggle-info-checked-border-color:\n * toggle-info-checked-switcher-background-color:\n * toggle-info-checked-switcher-checkmark-color:\n * toggle-info-focus-background-color:\n * toggle-info-focus-border-color:\n * toggle-info-focus-checked-background-color:\n * toggle-info-focus-checked-border-color:\n * toggle-info-hover-background-color:\n * toggle-info-hover-border-color:\n * toggle-info-hover-checked-background-color:\n * toggle-info-hover-checked-border-color:\n * toggle-info-active-background-color:\n * toggle-info-active-border-color:\n * toggle-info-active-checked-background-color:\n * toggle-info-active-checked-border-color:\n * toggle-info-disabled-background-color:\n * toggle-info-disabled-border-color:\n * toggle-info-disabled-switcher-background-color:\n * toggle-info-disabled-checked-switcher-checkmark-color:\n * toggle-info-disabled-text-color:\n * toggle-warning-text-color:\n * toggle-warning-background-color:\n * toggle-warning-border-color:\n * toggle-warning-checked-background-color:\n * toggle-warning-checked-border-color:\n * toggle-warning-checked-switcher-background-color:\n * toggle-warning-checked-switcher-checkmark-color:\n * toggle-warning-focus-background-color:\n * toggle-warning-focus-border-color:\n * toggle-warning-focus-checked-background-color:\n * toggle-warning-focus-checked-border-color:\n * toggle-warning-hover-background-color:\n * toggle-warning-hover-border-color:\n * toggle-warning-hover-checked-background-color:\n * toggle-warning-hover-checked-border-color:\n * toggle-warning-active-background-color:\n * toggle-warning-active-border-color:\n * toggle-warning-active-checked-background-color:\n * toggle-warning-active-checked-border-color:\n * toggle-warning-disabled-background-color:\n * toggle-warning-disabled-border-color:\n * toggle-warning-disabled-switcher-background-color:\n * toggle-warning-disabled-checked-switcher-checkmark-color:\n * toggle-warning-disabled-text-color:\n * toggle-danger-text-color:\n * toggle-danger-background-color:\n * toggle-danger-border-color:\n * toggle-danger-checked-background-color:\n * toggle-danger-checked-border-color:\n * toggle-danger-checked-switcher-background-color:\n * toggle-danger-checked-switcher-checkmark-color:\n * toggle-danger-focus-background-color:\n * toggle-danger-focus-border-color:\n * toggle-danger-focus-checked-background-color:\n * toggle-danger-focus-checked-border-color:\n * toggle-danger-hover-background-color:\n * toggle-danger-hover-border-color:\n * toggle-danger-hover-checked-background-color:\n * toggle-danger-hover-checked-border-color:\n * toggle-danger-active-background-color:\n * toggle-danger-active-border-color:\n * toggle-danger-active-checked-background-color:\n * toggle-danger-active-checked-border-color:\n * toggle-danger-disabled-background-color:\n * toggle-danger-disabled-border-color:\n * toggle-danger-disabled-switcher-background-color:\n * toggle-danger-disabled-checked-switcher-checkmark-color:\n * toggle-danger-disabled-text-color:\n * toggle-control-text-color:\n * toggle-control-background-color:\n * toggle-control-border-color:\n * toggle-control-checked-background-color:\n * toggle-control-checked-border-color:\n * toggle-control-checked-switcher-background-color:\n * toggle-control-checked-switcher-checkmark-color:\n * toggle-control-focus-background-color:\n * toggle-control-focus-border-color:\n * toggle-control-focus-checked-background-color:\n * toggle-control-focus-checked-border-color:\n * toggle-control-hover-background-color:\n * toggle-control-hover-border-color:\n * toggle-control-hover-checked-background-color:\n * toggle-control-hover-checked-border-color:\n * toggle-control-active-background-color:\n * toggle-control-active-border-color:\n * toggle-control-active-checked-background-color:\n * toggle-control-active-checked-border-color:\n * toggle-control-disabled-background-color:\n * toggle-control-disabled-border-color:\n * toggle-control-disabled-switcher-background-color:\n * toggle-control-disabled-checked-switcher-checkmark-color:\n * toggle-control-disabled-text-color:\n */\n@Component({\n  selector: 'nb-toggle',\n  animations: [\n    trigger('position', [\n      state('right', style({ right: 0, left: '*' })),\n      state('left', style({ left: 0, right: '*' })),\n      transition(':enter', [animate(0)]),\n      transition('right <=> left', [animate('0.15s')]),\n    ]),\n  ],\n  template: `\n    <label class=\"toggle-label\">\n      <input type=\"checkbox\"\n             class=\"native-input visually-hidden\"\n             role=\"switch\"\n             [attr.aria-checked]=\"checked\"\n             [disabled]=\"disabled\"\n             [checked]=\"checked\"\n             (change)=\"updateValue($event)\"\n             (blur)=\"onTouched()\"\n             (click)=\"onInputClick($event)\">\n      <div class=\"toggle\" [class.checked]=\"checked\">\n        <span [@position]=\"checkState()\" class=\"toggle-switcher\">\n          <nb-icon *ngIf=\"checked\" icon=\"checkmark-bold-outline\" pack=\"nebular-essentials\"></nb-icon>\n        </span>\n      </div>\n      <span class=\"text\">\n        <ng-content></ng-content>\n      </span>\n    </label>\n  `,\n  styleUrls: [ `./toggle.component.css` ],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NbToggleComponent),\n    multi: true,\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbToggleComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {\n\n  onChange: any = () => { };\n  onTouched: any = () => { };\n\n  private destroy$ = new Subject<void>();\n\n  /**\n   * Toggle checked\n   * @type {boolean}\n   */\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(value: boolean) {\n    this._checked = convertToBoolProperty(value);\n  }\n  private _checked: boolean = false;\n  static ngAcceptInputType_checked: NbBooleanInput;\n\n  /**\n   * Controls input disabled state\n   */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = convertToBoolProperty(value);\n  }\n  private _disabled: boolean = false;\n  static ngAcceptInputType_disabled: NbBooleanInput;\n\n  /**\n   * Toggle status.\n   * Possible values are: `basic`, `primary`, `success`, `warning`, `danger`, `info`, `control`.\n   */\n  @Input()\n  get status(): NbComponentStatus {\n    return this._status;\n  }\n  set status(value: NbComponentStatus) {\n    if ((value as string) === '') {\n      emptyStatusWarning('NbToggle');\n      value = 'basic';\n    }\n    this._status = value;\n  }\n  _status: NbComponentStatus = 'basic';\n\n  /**\n   * Toggle label position.\n   * Possible values are: `left`, `right`, `start`, `end` (default)\n   */\n  @Input() labelPosition: 'left' | 'right' | 'start' | 'end' = 'end';\n\n  /**\n   * Output when checked state is changed by a user\n   * @type EventEmitter<boolean>\n   */\n  @Output() checkedChange = new EventEmitter<boolean>();\n\n  @HostBinding('class.status-primary')\n  get primary() {\n    return this.status === 'primary';\n  }\n\n  @HostBinding('class.status-success')\n  get success() {\n    return this.status === 'success';\n  }\n\n  @HostBinding('class.status-warning')\n  get warning() {\n    return this.status === 'warning';\n  }\n\n  @HostBinding('class.status-danger')\n  get danger() {\n    return this.status === 'danger';\n  }\n\n  @HostBinding('class.status-info')\n  get info() {\n    return this.status === 'info';\n  }\n\n  @HostBinding('class.status-basic')\n  get basic() {\n    return this.status === 'basic';\n  }\n\n  @HostBinding('class.status-control')\n  get control() {\n    return this.status === 'control';\n  }\n\n  @HostBinding('class.toggle-label-left')\n  get labelLeft() {\n    return this.labelPosition === 'left';\n  }\n\n  @HostBinding('class.toggle-label-right')\n  get labelRight() {\n    return this.labelPosition === 'right';\n  }\n\n  @HostBinding('class.toggle-label-start')\n  get labelStart() {\n    return this.labelPosition === 'start';\n  }\n\n  @HostBinding('class.toggle-label-end')\n  get labelEnd() {\n    return this.labelPosition === 'end';\n  }\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private layoutDirection: NbLayoutDirectionService,\n    private renderer: Renderer2,\n    private hostElement: ElementRef<HTMLElement>,\n    private zone: NgZone,\n  ) {}\n\n  ngOnInit(): void {\n    this.layoutDirection.onDirectionChange()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.changeDetector.detectChanges());\n  }\n\n  ngAfterViewInit() {\n    // TODO: #2254\n    this.zone.runOutsideAngular(() => setTimeout(() => {\n      this.renderer.addClass(this.hostElement.nativeElement, 'nb-transition');\n    }));\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  checkState(): string {\n    if (this.checked) {\n      return this.layoutDirection.isLtr() ? 'right' : 'left';\n    }\n\n    return this.layoutDirection.isLtr() ? 'left' : 'right';\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  writeValue(val: any) {\n    this.checked = val;\n    this.changeDetector.markForCheck();\n  }\n\n  setDisabledState(val: boolean) {\n    this.disabled = convertToBoolProperty(val);\n    this.changeDetector.markForCheck();\n  }\n\n  updateValue(event: Event): void {\n    const input = (event.target as HTMLInputElement);\n    this.checked = input.checked;\n    this.checkedChange.emit(this.checked);\n    this.onChange(this.checked);\n  }\n\n  onInputClick(event: Event) {\n    event.stopPropagation();\n  }\n}\n"]}