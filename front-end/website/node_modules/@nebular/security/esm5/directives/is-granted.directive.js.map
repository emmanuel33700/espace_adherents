{"version":3,"file":"is-granted.directive.js","sourceRoot":"","sources":["../../../../../.ng_build/security/directives/is-granted.directive.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAa,WAAW,EAAE,gBAAgB,EAAE,MAAM,eAAe,CAAC;AAC3F,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAE/B,OAAO,EAAE,eAAe,EAAE,MAAM,oCAAoC,CAAC;AAGrE;IAME,8BAAoB,WAA6B,EAC7B,aAA+B,EAC/B,aAA8B;QAF9B,gBAAW,GAAX,WAAW,CAAkB;QAC7B,kBAAa,GAAb,aAAa,CAAkB;QAC/B,kBAAa,GAAb,aAAa,CAAiB;QAN1C,aAAQ,GAAG,IAAI,OAAO,EAAQ,CAAC;QAE/B,YAAO,GAAG,KAAK,CAAC;IAKxB,CAAC;IAEQ,sBAAI,6CAAW;aAAf,UAAgB,EAAwC;YAAjE,iBAeC;gBAfyB,kBAAU,EAAE,gBAAQ;YAE5C,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC;iBAC/C,IAAI,CACH,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CACzB;iBACA,SAAS,CAAC,UAAC,GAAY;gBACtB,IAAI,GAAG,IAAI,CAAC,KAAI,CAAC,OAAO,EAAE;oBACxB,KAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;oBACxD,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;iBACrB;qBAAM,IAAI,CAAC,GAAG,IAAI,KAAI,CAAC,OAAO,EAAE;oBAC/B,KAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;oBAC3B,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;iBACtB;YACH,CAAC,CAAC,CAAC;QACP,CAAC;;;OAAA;IAED,0CAAW,GAAX;QACE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IApBQ;QAAR,KAAK,EAAE;;;2DAeP;IA1BU,oBAAoB;QADhC,SAAS,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAC,CAAC;yCAOL,WAAW;YACT,gBAAgB;YAChB,eAAe;OARvC,oBAAoB,CAgChC;IAAD,2BAAC;CAAA,AAhCD,IAgCC;SAhCY,oBAAoB","sourcesContent":["import { Directive, Input, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nimport { NbAccessChecker } from '../services/access-checker.service';\n\n@Directive({ selector: '[nbIsGranted]'})\nexport class NbIsGrantedDirective implements OnDestroy {\n\n  private destroy$ = new Subject<void>();\n\n  private hasView = false;\n\n  constructor(private templateRef: TemplateRef<any>,\n              private viewContainer: ViewContainerRef,\n              private accessChecker: NbAccessChecker) {\n  }\n\n  @Input() set nbIsGranted([permission, resource]: [string, string]) {\n\n    this.accessChecker.isGranted(permission, resource)\n      .pipe(\n        takeUntil(this.destroy$),\n      )\n      .subscribe((can: boolean) => {\n        if (can && !this.hasView) {\n          this.viewContainer.createEmbeddedView(this.templateRef);\n          this.hasView = true;\n        } else if (!can && this.hasView) {\n          this.viewContainer.clear();\n          this.hasView = false;\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n"]}