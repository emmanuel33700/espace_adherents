import { AfterContentInit, AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, QueryList, SimpleChanges } from '@angular/core';
import { NgToggleLabel } from './toggle-label';
/**
 * The Toggle directive allows for standalone or checkbox-enabled switch toggling via a UI element.
 * The toggle is styled using Bootstrap v4+ classes.
 * Accessibility implemented according to
 * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/checkbox_role
 */
export declare class NgToggle implements AfterViewInit, AfterContentInit, AfterViewChecked, OnChanges {
    private ngZone;
    private element;
    /**
     * Display text when toggled in the "On" position
     */
    onText: string;
    /**
     * Display text when toggled in the "Off" position
     */
    offText: string;
    /**
     * Bootstrap color scheme when toggled in the "On" position (i.e. "primary" translates to "btn-primary")
     */
    onColor: string;
    /**
     * Bootstrap color scheme when toggled in the "Off" position (i.e. "primary" translates to "btn-primary")
     */
    offColor: string;
    /**
     * Button size to display the toggle
     */
    size: 'sm' | 'lg' | '';
    /**
     * Whether the toggle is disabled or not
     */
    disabled: boolean;
    /**
     * An event fired when the user causes a change.
     * The payload of the event is the currently selected value.
     */
    valueChange: EventEmitter<boolean>;
    btnClass: boolean;
    tabindex: number;
    role: string;
    width: number;
    handleWidth: number;
    containerElement: ElementRef;
    onElement: ElementRef;
    offElement: ElementRef;
    handleElement: ElementRef;
    labelElements: QueryList<NgToggleLabel>;
    onLabel: NgToggleLabel;
    offLabel: NgToggleLabel;
    private _animate;
    private _innerAnimate;
    private _innerState;
    private _innerWidth;
    private _disableInitialAnimation;
    private _dragStart;
    private _dragEnd;
    private _initialized;
    private _hidden;
    /**
     * Optional. Enable/Disable the initial transition animation. May prevent unwanted animation display.
     */
    set outerAnimate(value: boolean);
    set value(value: boolean);
    get value(): boolean;
    constructor(ngZone: NgZone, element: ElementRef);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    get largeButton(): boolean;
    get smallButton(): boolean;
    get handleDark(): boolean;
    get indeterminate(): boolean;
    get toggledOn(): boolean;
    get toggledOff(): boolean;
    get innerState(): boolean;
    get ariaCheckedValue(): string;
    get animate(): boolean;
    get marginLeft(): string;
    handleResize(): void;
    handleClick(): void;
    onTouchStart(event: any): void;
    onMouseDown(event: any): void;
    onTouchMove(event: any): void;
    onMouseMove(event: any): void;
    onTouchEnd(event: any): void;
    onMouseUp(event: any): void;
    onMouseLeave(event: any): void;
    onKeyDown(event: KeyboardEvent): void;
    private onDragStart;
    private onDragMove;
    private onDragEnd;
    private calculateWidth;
    private setState;
    private get element$();
    private get on$();
    private get off$();
    private get handle$();
    private get container$();
}
