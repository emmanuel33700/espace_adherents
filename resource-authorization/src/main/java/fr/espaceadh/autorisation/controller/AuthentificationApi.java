/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package fr.espaceadh.autorisation.controller;

import fr.espaceadh.autorisation.model.Authentification;
import fr.espaceadh.autorisation.model.Roles;
import fr.espaceadh.autorisation.model.Validation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import javax.validation.constraints.*;
import org.springframework.security.access.prepost.PreAuthorize;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-07-05T20:02:22.596Z[GMT]")
@Api(value = "authentification", description = "the authentification API")
public interface AuthentificationApi {

    @ApiOperation(value = "Ajouter  compte d'accès d'une personne", nickname = "addAuthentification", notes = "", tags={ "Authentification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/authentification",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addAuthentification(@ApiParam(value = "ajout de l'objet authentification" ,required=true )  @Valid @RequestBody Authentification body);


    @ApiOperation(value = "suppression du compte accès d'une personne", nickname = "deleteAuthentification", notes = "", tags={ "Authentification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 403, message = "Droit insufisant pour suppriler une authentification"),
        @ApiResponse(code = 404, message = "Personne non trouvée"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/authentification/{login}/validation",
        method = RequestMethod.DELETE)
    @PreAuthorize("#oauth2.hasScope('del') or hasRole('ADMIN') ")
    ResponseEntity<Void> deleteAuthentification(@Size(min=3,max=50) @ApiParam(value = "login de la personne encodé en base64",required=true) @PathVariable("login") String login);


    @ApiOperation(value = "Mise à jour du compte accès d'une personne", nickname = "updateAuthentification", notes = "Mise à jour de l'authentification d'une personne", tags={ "Authentification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 403, message = "Droit insufisant pour modifier une authentification"),
        @ApiResponse(code = 404, message = "Personne non trouvée"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/authentification",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    @PreAuthorize("#oauth2.hasScope('update') or hasRole('ADMIN') ")
    ResponseEntity<Void> updateAuthentification(@ApiParam(value = "mise à jour de l'objet authentification" ,required=true )  @Valid @RequestBody Authentification body);


    @ApiOperation(value = "Mise à jour des roles d'une personne", nickname = "updateRoles", notes = "Mise à jour des roles d'une personne", tags={ "Roles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 403, message = "Droit insufisant pour modifier une authentification"),
        @ApiResponse(code = 404, message = "Personne non trouvée"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/authentification/{login}/roles",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    @PreAuthorize("hasRole('ADMIN') or hasRole('CONSEIL')")
    ResponseEntity<Void> updateRoles(@ApiParam(value = "mise à jour de l'objet role" ,required=true )  @Valid @RequestBody Roles body,@Size(min=3,max=50) @ApiParam(value = "login de la personne encodé en base64",required=true) @PathVariable("login") String login);


    @ApiOperation(value = "validation d'enregistrement du login d'une personne", nickname = "validationAuthentification", notes = "", tags={ "Authentification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/authentification/{login}/validation",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    @PreAuthorize("#oauth2.hasScope('write')  ")
    ResponseEntity<Void> validationAuthentification(@ApiParam(value = "ajout de l'objet authentification" ,required=true )  @Valid @RequestBody Validation body,@Size(min=3,max=50) @ApiParam(value = "login de la personne encodé en base64",required=true) @PathVariable("login") String login);

}
